/*! For license information please see single.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./assets/js/fieldMasks.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jquery_mask_plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-mask-plugin */ "./node_modules/jquery-mask-plugin/dist/jquery.mask.js");\n/* harmony import */ var jquery_mask_plugin__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_mask_plugin__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nconst fieldMasks = () => {\n  const phoneMask = jquery__WEBPACK_IMPORTED_MODULE_0___default()("input.phone-mask");\n\n  var SPMaskBehavior = function (val) {\n    return val.replace(/\\D/g, "").length === 11 ? "(00) 00000-0000" : "(00) 0000-00009";\n  },\n      spOptions = {\n    onKeyPress: function (val, e, field, options) {\n      field.mask(SPMaskBehavior.apply({}, arguments), options);\n    }\n  };\n\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(phoneMask).mask(SPMaskBehavior, spOptions);\n};\n\nfieldMasks();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvZmllbGRNYXNrcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzZG9jcy1ib2lsZXJwbGF0ZS8uL2Fzc2V0cy9qcy9maWVsZE1hc2tzLmpzPzk5Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xuaW1wb3J0IFwianF1ZXJ5LW1hc2stcGx1Z2luXCI7XG5cbmNvbnN0IGZpZWxkTWFza3MgPSAoKSA9PiB7XG4gIGNvbnN0IHBob25lTWFzayA9ICQoXCJpbnB1dC5waG9uZS1tYXNrXCIpO1xuXG4gIHZhciBTUE1hc2tCZWhhdmlvciA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UoL1xcRC9nLCBcIlwiKS5sZW5ndGggPT09IDExID8gXCIoMDApIDAwMDAwLTAwMDBcIiA6IFwiKDAwKSAwMDAwLTAwMDA5XCI7XG4gIH0sXG4gICAgICBzcE9wdGlvbnMgPSB7XG4gICAgb25LZXlQcmVzczogZnVuY3Rpb24gKHZhbCwgZSwgZmllbGQsIG9wdGlvbnMpIHtcbiAgICAgIGZpZWxkLm1hc2soU1BNYXNrQmVoYXZpb3IuYXBwbHkoe30sIGFyZ3VtZW50cyksIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICAkKHBob25lTWFzaykubWFzayhTUE1hc2tCZWhhdmlvciwgc3BPcHRpb25zKTtcbn07XG5cbmZpZWxkTWFza3MoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/fieldMasks.js\n')},"./assets/js/main.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _fieldMasks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fieldMasks */ "./assets/js/fieldMasks.js");\n/* harmony import */ var bootstrap_dist_js_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bootstrap/dist/js/bootstrap.bundle.min */ "./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js");\n/* harmony import */ var bootstrap_dist_js_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bootstrap_dist_js_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_1__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvbWFpbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXNkb2NzLWJvaWxlcnBsYXRlLy4vYXNzZXRzL2pzL21haW4uanM/ODQ5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2ZpZWxkTWFza3NcIjtcbmltcG9ydCBcImJvb3RzdHJhcC9kaXN0L2pzL2Jvb3RzdHJhcC5idW5kbGUubWluXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/main.js\n')},"./components/Footer/Footer/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "footer": () => (/* binding */ footer)\n/* harmony export */ });\nconst footer = () => {\n  const ref = document.querySelectorAll("._footer");\n  ref.forEach(component => {\n    console.log(component);\n  });\n};\nfooter();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0Zvb3Rlci9Gb290ZXIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzZG9jcy1ib2lsZXJwbGF0ZS8uL2NvbXBvbmVudHMvRm9vdGVyL0Zvb3Rlci9pbmRleC5qcz8zOWRhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmb290ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHJlZiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuX2Zvb3RlclwiKTtcbiAgcmVmLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICBjb25zb2xlLmxvZyhjb21wb25lbnQpO1xuICB9KTtcbn07XG5mb290ZXIoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Footer/Footer/index.js\n')},"./components/Header/Header/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NavMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../NavMenu */ "./components/Header/NavMenu/index.js");\n/* harmony import */ var _NavMenu__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_NavMenu__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst header = () => {\n  const ref = document.querySelectorAll("._header");\n  ref.forEach(component => {\n    const scrollListener = () => {\n      if (window.scrollY > 50) {\n        component.classList.add("sticky");\n      } else {\n        component.classList.remove("sticky");\n      }\n    };\n\n    window.addEventListener("scroll", scrollListener);\n  });\n};\n\nheader();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzZG9jcy1ib2lsZXJwbGF0ZS8uL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci9pbmRleC5qcz83Mjk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL05hdk1lbnVcIjtcblxuY29uc3QgaGVhZGVyID0gKCkgPT4ge1xuICBjb25zdCByZWYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLl9oZWFkZXJcIik7XG4gIHJlZi5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICBpZiAod2luZG93LnNjcm9sbFkgPiA1MCkge1xuICAgICAgICBjb21wb25lbnQuY2xhc3NMaXN0LmFkZChcInN0aWNreVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBvbmVudC5jbGFzc0xpc3QucmVtb3ZlKFwic3RpY2t5XCIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzY3JvbGxMaXN0ZW5lcik7XG4gIH0pO1xufTtcblxuaGVhZGVyKCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Header/Header/index.js\n')},"./components/Header/NavMenu/index.js":()=>{eval('const navMenu = () => {\n  const ref = document.querySelectorAll("._nav-menu");\n  ref.forEach(component => {\n    console.log(component);\n  });\n};\n\nnavMenu();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0hlYWRlci9OYXZNZW51L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXNkb2NzLWJvaWxlcnBsYXRlLy4vY29tcG9uZW50cy9IZWFkZXIvTmF2TWVudS9pbmRleC5qcz81OTNhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5hdk1lbnUgPSAoKSA9PiB7XG4gIGNvbnN0IHJlZiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuX25hdi1tZW51XCIpO1xuICByZWYuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgIGNvbnNvbGUubG9nKGNvbXBvbmVudCk7XG4gIH0pO1xufTtcblxubmF2TWVudSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Header/NavMenu/index.js\n')},"./components/Hero/Hero/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "hero": () => (/* binding */ hero)\n/* harmony export */ });\nconst hero = () => {\n  const ref = document.querySelectorAll("._hero");\n  ref.forEach(component => {\n    console.log(component);\n  });\n};\nhero();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0hlcm8vSGVyby9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXNkb2NzLWJvaWxlcnBsYXRlLy4vY29tcG9uZW50cy9IZXJvL0hlcm8vaW5kZXguanM/MjUzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGVybyA9ICgpID0+IHtcbiAgY29uc3QgcmVmID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5faGVyb1wiKTtcbiAgcmVmLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICBjb25zb2xlLmxvZyhjb21wb25lbnQpO1xuICB9KTtcbn07XG5oZXJvKCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Hero/Hero/index.js\n')},"./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js":function(module){eval('/*!\n  * Bootstrap v5.1.3 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n!function (t, e) {\n   true ? module.exports = e() : 0;\n}(this, function () {\n  "use strict";\n\n  const t = "transitionend",\n        e = t => {\n    let e = t.getAttribute("data-bs-target");\n\n    if (!e || "#" === e) {\n      let i = t.getAttribute("href");\n      if (!i || !i.includes("#") && !i.startsWith(".")) return null;\n      i.includes("#") && !i.startsWith("#") && (i = `#${i.split("#")[1]}`), e = i && "#" !== i ? i.trim() : null;\n    }\n\n    return e;\n  },\n        i = t => {\n    const i = e(t);\n    return i && document.querySelector(i) ? i : null;\n  },\n        n = t => {\n    const i = e(t);\n    return i ? document.querySelector(i) : null;\n  },\n        s = e => {\n    e.dispatchEvent(new Event(t));\n  },\n        o = t => !(!t || "object" != typeof t) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType),\n        r = t => o(t) ? t.jquery ? t[0] : t : "string" == typeof t && t.length > 0 ? document.querySelector(t) : null,\n        a = (t, e, i) => {\n    Object.keys(i).forEach(n => {\n      const s = i[n],\n            r = e[n],\n            a = r && o(r) ? "element" : null == (l = r) ? `${l}` : {}.toString.call(l).match(/\\s([a-z]+)/i)[1].toLowerCase();\n      var l;\n      if (!new RegExp(s).test(a)) throw new TypeError(`${t.toUpperCase()}: Option "${n}" provided type "${a}" but expected type "${s}".`);\n    });\n  },\n        l = t => !(!o(t) || 0 === t.getClientRects().length) && "visible" === getComputedStyle(t).getPropertyValue("visibility"),\n        c = t => !t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains("disabled") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute("disabled") && "false" !== t.getAttribute("disabled")),\n        h = t => {\n    if (!document.documentElement.attachShadow) return null;\n\n    if ("function" == typeof t.getRootNode) {\n      const e = t.getRootNode();\n      return e instanceof ShadowRoot ? e : null;\n    }\n\n    return t instanceof ShadowRoot ? t : t.parentNode ? h(t.parentNode) : null;\n  },\n        d = () => {},\n        u = t => {\n    t.offsetHeight;\n  },\n        f = () => {\n    const {\n      jQuery: t\n    } = window;\n    return t && !document.body.hasAttribute("data-bs-no-jquery") ? t : null;\n  },\n        p = [],\n        m = () => "rtl" === document.documentElement.dir,\n        g = t => {\n    var e;\n    e = () => {\n      const e = f();\n\n      if (e) {\n        const i = t.NAME,\n              n = e.fn[i];\n        e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = () => (e.fn[i] = n, t.jQueryInterface);\n      }\n    }, "loading" === document.readyState ? (p.length || document.addEventListener("DOMContentLoaded", () => {\n      p.forEach(t => t());\n    }), p.push(e)) : e();\n  },\n        _ = t => {\n    "function" == typeof t && t();\n  },\n        b = (e, i, n = !0) => {\n    if (!n) return void _(e);\n\n    const o = (t => {\n      if (!t) return 0;\n      let {\n        transitionDuration: e,\n        transitionDelay: i\n      } = window.getComputedStyle(t);\n      const n = Number.parseFloat(e),\n            s = Number.parseFloat(i);\n      return n || s ? (e = e.split(",")[0], i = i.split(",")[0], 1e3 * (Number.parseFloat(e) + Number.parseFloat(i))) : 0;\n    })(i) + 5;\n\n    let r = !1;\n\n    const a = ({\n      target: n\n    }) => {\n      n === i && (r = !0, i.removeEventListener(t, a), _(e));\n    };\n\n    i.addEventListener(t, a), setTimeout(() => {\n      r || s(i);\n    }, o);\n  },\n        v = (t, e, i, n) => {\n    let s = t.indexOf(e);\n    if (-1 === s) return t[!i && n ? t.length - 1 : 0];\n    const o = t.length;\n    return s += i ? 1 : -1, n && (s = (s + o) % o), t[Math.max(0, Math.min(s, o - 1))];\n  },\n        y = /[^.]*(?=\\..*)\\.|.*/,\n        w = /\\..*/,\n        E = /::\\d+$/,\n        A = {};\n\n  let T = 1;\n  const O = {\n    mouseenter: "mouseover",\n    mouseleave: "mouseout"\n  },\n        C = /^(mouseenter|mouseleave)/i,\n        k = new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);\n\n  function L(t, e) {\n    return e && `${e}::${T++}` || t.uidEvent || T++;\n  }\n\n  function x(t) {\n    const e = L(t);\n    return t.uidEvent = e, A[e] = A[e] || {}, A[e];\n  }\n\n  function D(t, e, i = null) {\n    const n = Object.keys(t);\n\n    for (let s = 0, o = n.length; s < o; s++) {\n      const o = t[n[s]];\n      if (o.originalHandler === e && o.delegationSelector === i) return o;\n    }\n\n    return null;\n  }\n\n  function S(t, e, i) {\n    const n = "string" == typeof e,\n          s = n ? i : e;\n    let o = P(t);\n    return k.has(o) || (o = t), [n, s, o];\n  }\n\n  function N(t, e, i, n, s) {\n    if ("string" != typeof e || !t) return;\n\n    if (i || (i = n, n = null), C.test(e)) {\n      const t = t => function (e) {\n        if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return t.call(this, e);\n      };\n\n      n ? n = t(n) : i = t(i);\n    }\n\n    const [o, r, a] = S(e, i, n),\n          l = x(t),\n          c = l[a] || (l[a] = {}),\n          h = D(c, r, o ? i : null);\n    if (h) return void (h.oneOff = h.oneOff && s);\n    const d = L(r, e.replace(y, "")),\n          u = o ? function (t, e, i) {\n      return function n(s) {\n        const o = t.querySelectorAll(e);\n\n        for (let {\n          target: r\n        } = s; r && r !== this; r = r.parentNode) for (let a = o.length; a--;) if (o[a] === r) return s.delegateTarget = r, n.oneOff && j.off(t, s.type, e, i), i.apply(r, [s]);\n\n        return null;\n      };\n    }(t, i, n) : function (t, e) {\n      return function i(n) {\n        return n.delegateTarget = t, i.oneOff && j.off(t, n.type, e), e.apply(t, [n]);\n      };\n    }(t, i);\n    u.delegationSelector = o ? i : null, u.originalHandler = r, u.oneOff = s, u.uidEvent = d, c[d] = u, t.addEventListener(a, u, o);\n  }\n\n  function I(t, e, i, n, s) {\n    const o = D(e[i], n, s);\n    o && (t.removeEventListener(i, o, Boolean(s)), delete e[i][o.uidEvent]);\n  }\n\n  function P(t) {\n    return t = t.replace(w, ""), O[t] || t;\n  }\n\n  const j = {\n    on(t, e, i, n) {\n      N(t, e, i, n, !1);\n    },\n\n    one(t, e, i, n) {\n      N(t, e, i, n, !0);\n    },\n\n    off(t, e, i, n) {\n      if ("string" != typeof e || !t) return;\n      const [s, o, r] = S(e, i, n),\n            a = r !== e,\n            l = x(t),\n            c = e.startsWith(".");\n\n      if (void 0 !== o) {\n        if (!l || !l[r]) return;\n        return void I(t, l, r, o, s ? i : null);\n      }\n\n      c && Object.keys(l).forEach(i => {\n        !function (t, e, i, n) {\n          const s = e[i] || {};\n          Object.keys(s).forEach(o => {\n            if (o.includes(n)) {\n              const n = s[o];\n              I(t, e, i, n.originalHandler, n.delegationSelector);\n            }\n          });\n        }(t, l, i, e.slice(1));\n      });\n      const h = l[r] || {};\n      Object.keys(h).forEach(i => {\n        const n = i.replace(E, "");\n\n        if (!a || e.includes(n)) {\n          const e = h[i];\n          I(t, l, r, e.originalHandler, e.delegationSelector);\n        }\n      });\n    },\n\n    trigger(t, e, i) {\n      if ("string" != typeof e || !t) return null;\n      const n = f(),\n            s = P(e),\n            o = e !== s,\n            r = k.has(s);\n      let a,\n          l = !0,\n          c = !0,\n          h = !1,\n          d = null;\n      return o && n && (a = n.Event(e, i), n(t).trigger(a), l = !a.isPropagationStopped(), c = !a.isImmediatePropagationStopped(), h = a.isDefaultPrevented()), r ? (d = document.createEvent("HTMLEvents"), d.initEvent(s, l, !0)) : d = new CustomEvent(e, {\n        bubbles: l,\n        cancelable: !0\n      }), void 0 !== i && Object.keys(i).forEach(t => {\n        Object.defineProperty(d, t, {\n          get: () => i[t]\n        });\n      }), h && d.preventDefault(), c && t.dispatchEvent(d), d.defaultPrevented && void 0 !== a && a.preventDefault(), d;\n    }\n\n  },\n        M = new Map(),\n        H = {\n    set(t, e, i) {\n      M.has(t) || M.set(t, new Map());\n      const n = M.get(t);\n      n.has(e) || 0 === n.size ? n.set(e, i) : console.error(`Bootstrap doesn\'t allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`);\n    },\n\n    get: (t, e) => M.has(t) && M.get(t).get(e) || null,\n\n    remove(t, e) {\n      if (!M.has(t)) return;\n      const i = M.get(t);\n      i.delete(e), 0 === i.size && M.delete(t);\n    }\n\n  };\n\n  class B {\n    constructor(t) {\n      (t = r(t)) && (this._element = t, H.set(this._element, this.constructor.DATA_KEY, this));\n    }\n\n    dispose() {\n      H.remove(this._element, this.constructor.DATA_KEY), j.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach(t => {\n        this[t] = null;\n      });\n    }\n\n    _queueCallback(t, e, i = !0) {\n      b(t, e, i);\n    }\n\n    static getInstance(t) {\n      return H.get(r(t), this.DATA_KEY);\n    }\n\n    static getOrCreateInstance(t, e = {}) {\n      return this.getInstance(t) || new this(t, "object" == typeof e ? e : null);\n    }\n\n    static get VERSION() {\n      return "5.1.3";\n    }\n\n    static get NAME() {\n      throw new Error(\'You have to implement the static method "NAME", for each component!\');\n    }\n\n    static get DATA_KEY() {\n      return `bs.${this.NAME}`;\n    }\n\n    static get EVENT_KEY() {\n      return `.${this.DATA_KEY}`;\n    }\n\n  }\n\n  const R = (t, e = "hide") => {\n    const i = `click.dismiss${t.EVENT_KEY}`,\n          s = t.NAME;\n    j.on(document, i, `[data-bs-dismiss="${s}"]`, function (i) {\n      if (["A", "AREA"].includes(this.tagName) && i.preventDefault(), c(this)) return;\n      const o = n(this) || this.closest(`.${s}`);\n      t.getOrCreateInstance(o)[e]();\n    });\n  };\n\n  class W extends B {\n    static get NAME() {\n      return "alert";\n    }\n\n    close() {\n      if (j.trigger(this._element, "close.bs.alert").defaultPrevented) return;\n\n      this._element.classList.remove("show");\n\n      const t = this._element.classList.contains("fade");\n\n      this._queueCallback(() => this._destroyElement(), this._element, t);\n    }\n\n    _destroyElement() {\n      this._element.remove(), j.trigger(this._element, "closed.bs.alert"), this.dispose();\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = W.getOrCreateInstance(this);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`);\n          e[t](this);\n        }\n      });\n    }\n\n  }\n\n  R(W, "close"), g(W);\n  const $ = \'[data-bs-toggle="button"]\';\n\n  class z extends B {\n    static get NAME() {\n      return "button";\n    }\n\n    toggle() {\n      this._element.setAttribute("aria-pressed", this._element.classList.toggle("active"));\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = z.getOrCreateInstance(this);\n        "toggle" === t && e[t]();\n      });\n    }\n\n  }\n\n  function q(t) {\n    return "true" === t || "false" !== t && (t === Number(t).toString() ? Number(t) : "" === t || "null" === t ? null : t);\n  }\n\n  function F(t) {\n    return t.replace(/[A-Z]/g, t => `-${t.toLowerCase()}`);\n  }\n\n  j.on(document, "click.bs.button.data-api", $, t => {\n    t.preventDefault();\n    const e = t.target.closest($);\n    z.getOrCreateInstance(e).toggle();\n  }), g(z);\n  const U = {\n    setDataAttribute(t, e, i) {\n      t.setAttribute(`data-bs-${F(e)}`, i);\n    },\n\n    removeDataAttribute(t, e) {\n      t.removeAttribute(`data-bs-${F(e)}`);\n    },\n\n    getDataAttributes(t) {\n      if (!t) return {};\n      const e = {};\n      return Object.keys(t.dataset).filter(t => t.startsWith("bs")).forEach(i => {\n        let n = i.replace(/^bs/, "");\n        n = n.charAt(0).toLowerCase() + n.slice(1, n.length), e[n] = q(t.dataset[i]);\n      }), e;\n    },\n\n    getDataAttribute: (t, e) => q(t.getAttribute(`data-bs-${F(e)}`)),\n\n    offset(t) {\n      const e = t.getBoundingClientRect();\n      return {\n        top: e.top + window.pageYOffset,\n        left: e.left + window.pageXOffset\n      };\n    },\n\n    position: t => ({\n      top: t.offsetTop,\n      left: t.offsetLeft\n    })\n  },\n        V = {\n    find: (t, e = document.documentElement) => [].concat(...Element.prototype.querySelectorAll.call(e, t)),\n    findOne: (t, e = document.documentElement) => Element.prototype.querySelector.call(e, t),\n    children: (t, e) => [].concat(...t.children).filter(t => t.matches(e)),\n\n    parents(t, e) {\n      const i = [];\n      let n = t.parentNode;\n\n      for (; n && n.nodeType === Node.ELEMENT_NODE && 3 !== n.nodeType;) n.matches(e) && i.push(n), n = n.parentNode;\n\n      return i;\n    },\n\n    prev(t, e) {\n      let i = t.previousElementSibling;\n\n      for (; i;) {\n        if (i.matches(e)) return [i];\n        i = i.previousElementSibling;\n      }\n\n      return [];\n    },\n\n    next(t, e) {\n      let i = t.nextElementSibling;\n\n      for (; i;) {\n        if (i.matches(e)) return [i];\n        i = i.nextElementSibling;\n      }\n\n      return [];\n    },\n\n    focusableChildren(t) {\n      const e = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", \'[contenteditable="true"]\'].map(t => `${t}:not([tabindex^="-"])`).join(", ");\n      return this.find(e, t).filter(t => !c(t) && l(t));\n    }\n\n  },\n        K = "carousel",\n        X = {\n    interval: 5e3,\n    keyboard: !0,\n    slide: !1,\n    pause: "hover",\n    wrap: !0,\n    touch: !0\n  },\n        Y = {\n    interval: "(number|boolean)",\n    keyboard: "boolean",\n    slide: "(boolean|string)",\n    pause: "(string|boolean)",\n    wrap: "boolean",\n    touch: "boolean"\n  },\n        Q = "next",\n        G = "prev",\n        Z = "left",\n        J = "right",\n        tt = {\n    ArrowLeft: J,\n    ArrowRight: Z\n  },\n        et = "slid.bs.carousel",\n        it = "active",\n        nt = ".active.carousel-item";\n\n  class st extends B {\n    constructor(t, e) {\n      super(t), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._indicatorsElement = V.findOne(".carousel-indicators", this._element), this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._addEventListeners();\n    }\n\n    static get Default() {\n      return X;\n    }\n\n    static get NAME() {\n      return K;\n    }\n\n    next() {\n      this._slide(Q);\n    }\n\n    nextWhenVisible() {\n      !document.hidden && l(this._element) && this.next();\n    }\n\n    prev() {\n      this._slide(G);\n    }\n\n    pause(t) {\n      t || (this._isPaused = !0), V.findOne(".carousel-item-next, .carousel-item-prev", this._element) && (s(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }\n\n    cycle(t) {\n      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }\n\n    to(t) {\n      this._activeElement = V.findOne(nt, this._element);\n\n      const e = this._getItemIndex(this._activeElement);\n\n      if (t > this._items.length - 1 || t < 0) return;\n      if (this._isSliding) return void j.one(this._element, et, () => this.to(t));\n      if (e === t) return this.pause(), void this.cycle();\n      const i = t > e ? Q : G;\n\n      this._slide(i, this._items[t]);\n    }\n\n    _getConfig(t) {\n      return t = { ...X,\n        ...U.getDataAttributes(this._element),\n        ...("object" == typeof t ? t : {})\n      }, a(K, t, Y), t;\n    }\n\n    _handleSwipe() {\n      const t = Math.abs(this.touchDeltaX);\n      if (t <= 40) return;\n      const e = t / this.touchDeltaX;\n      this.touchDeltaX = 0, e && this._slide(e > 0 ? J : Z);\n    }\n\n    _addEventListeners() {\n      this._config.keyboard && j.on(this._element, "keydown.bs.carousel", t => this._keydown(t)), "hover" === this._config.pause && (j.on(this._element, "mouseenter.bs.carousel", t => this.pause(t)), j.on(this._element, "mouseleave.bs.carousel", t => this.cycle(t))), this._config.touch && this._touchSupported && this._addTouchEventListeners();\n    }\n\n    _addTouchEventListeners() {\n      const t = t => this._pointerEvent && ("pen" === t.pointerType || "touch" === t.pointerType),\n            e = e => {\n        t(e) ? this.touchStartX = e.clientX : this._pointerEvent || (this.touchStartX = e.touches[0].clientX);\n      },\n            i = t => {\n        this.touchDeltaX = t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this.touchStartX;\n      },\n            n = e => {\n        t(e) && (this.touchDeltaX = e.clientX - this.touchStartX), this._handleSwipe(), "hover" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout(t => this.cycle(t), 500 + this._config.interval));\n      };\n\n      V.find(".carousel-item img", this._element).forEach(t => {\n        j.on(t, "dragstart.bs.carousel", t => t.preventDefault());\n      }), this._pointerEvent ? (j.on(this._element, "pointerdown.bs.carousel", t => e(t)), j.on(this._element, "pointerup.bs.carousel", t => n(t)), this._element.classList.add("pointer-event")) : (j.on(this._element, "touchstart.bs.carousel", t => e(t)), j.on(this._element, "touchmove.bs.carousel", t => i(t)), j.on(this._element, "touchend.bs.carousel", t => n(t)));\n    }\n\n    _keydown(t) {\n      if (/input|textarea/i.test(t.target.tagName)) return;\n      const e = tt[t.key];\n      e && (t.preventDefault(), this._slide(e));\n    }\n\n    _getItemIndex(t) {\n      return this._items = t && t.parentNode ? V.find(".carousel-item", t.parentNode) : [], this._items.indexOf(t);\n    }\n\n    _getItemByOrder(t, e) {\n      const i = t === Q;\n      return v(this._items, e, i, this._config.wrap);\n    }\n\n    _triggerSlideEvent(t, e) {\n      const i = this._getItemIndex(t),\n            n = this._getItemIndex(V.findOne(nt, this._element));\n\n      return j.trigger(this._element, "slide.bs.carousel", {\n        relatedTarget: t,\n        direction: e,\n        from: n,\n        to: i\n      });\n    }\n\n    _setActiveIndicatorElement(t) {\n      if (this._indicatorsElement) {\n        const e = V.findOne(".active", this._indicatorsElement);\n        e.classList.remove(it), e.removeAttribute("aria-current");\n        const i = V.find("[data-bs-target]", this._indicatorsElement);\n\n        for (let e = 0; e < i.length; e++) if (Number.parseInt(i[e].getAttribute("data-bs-slide-to"), 10) === this._getItemIndex(t)) {\n          i[e].classList.add(it), i[e].setAttribute("aria-current", "true");\n          break;\n        }\n      }\n    }\n\n    _updateInterval() {\n      const t = this._activeElement || V.findOne(nt, this._element);\n      if (!t) return;\n      const e = Number.parseInt(t.getAttribute("data-bs-interval"), 10);\n      e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval;\n    }\n\n    _slide(t, e) {\n      const i = this._directionToOrder(t),\n            n = V.findOne(nt, this._element),\n            s = this._getItemIndex(n),\n            o = e || this._getItemByOrder(i, n),\n            r = this._getItemIndex(o),\n            a = Boolean(this._interval),\n            l = i === Q,\n            c = l ? "carousel-item-start" : "carousel-item-end",\n            h = l ? "carousel-item-next" : "carousel-item-prev",\n            d = this._orderToDirection(i);\n\n      if (o && o.classList.contains(it)) return void (this._isSliding = !1);\n      if (this._isSliding) return;\n      if (this._triggerSlideEvent(o, d).defaultPrevented) return;\n      if (!n || !o) return;\n      this._isSliding = !0, a && this.pause(), this._setActiveIndicatorElement(o), this._activeElement = o;\n\n      const f = () => {\n        j.trigger(this._element, et, {\n          relatedTarget: o,\n          direction: d,\n          from: s,\n          to: r\n        });\n      };\n\n      if (this._element.classList.contains("slide")) {\n        o.classList.add(h), u(o), n.classList.add(c), o.classList.add(c);\n\n        const t = () => {\n          o.classList.remove(c, h), o.classList.add(it), n.classList.remove(it, h, c), this._isSliding = !1, setTimeout(f, 0);\n        };\n\n        this._queueCallback(t, n, !0);\n      } else n.classList.remove(it), o.classList.add(it), this._isSliding = !1, f();\n\n      a && this.cycle();\n    }\n\n    _directionToOrder(t) {\n      return [J, Z].includes(t) ? m() ? t === Z ? G : Q : t === Z ? Q : G : t;\n    }\n\n    _orderToDirection(t) {\n      return [Q, G].includes(t) ? m() ? t === G ? Z : J : t === G ? J : Z : t;\n    }\n\n    static carouselInterface(t, e) {\n      const i = st.getOrCreateInstance(t, e);\n      let {\n        _config: n\n      } = i;\n      "object" == typeof e && (n = { ...n,\n        ...e\n      });\n      const s = "string" == typeof e ? e : n.slide;\n      if ("number" == typeof e) i.to(e);else if ("string" == typeof s) {\n        if (void 0 === i[s]) throw new TypeError(`No method named "${s}"`);\n        i[s]();\n      } else n.interval && n.ride && (i.pause(), i.cycle());\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        st.carouselInterface(this, t);\n      });\n    }\n\n    static dataApiClickHandler(t) {\n      const e = n(this);\n      if (!e || !e.classList.contains("carousel")) return;\n      const i = { ...U.getDataAttributes(e),\n        ...U.getDataAttributes(this)\n      },\n            s = this.getAttribute("data-bs-slide-to");\n      s && (i.interval = !1), st.carouselInterface(e, i), s && st.getInstance(e).to(s), t.preventDefault();\n    }\n\n  }\n\n  j.on(document, "click.bs.carousel.data-api", "[data-bs-slide], [data-bs-slide-to]", st.dataApiClickHandler), j.on(window, "load.bs.carousel.data-api", () => {\n    const t = V.find(\'[data-bs-ride="carousel"]\');\n\n    for (let e = 0, i = t.length; e < i; e++) st.carouselInterface(t[e], st.getInstance(t[e]));\n  }), g(st);\n  const ot = "collapse",\n        rt = {\n    toggle: !0,\n    parent: null\n  },\n        at = {\n    toggle: "boolean",\n    parent: "(null|element)"\n  },\n        lt = "show",\n        ct = "collapse",\n        ht = "collapsing",\n        dt = "collapsed",\n        ut = ":scope .collapse .collapse",\n        ft = \'[data-bs-toggle="collapse"]\';\n\n  class pt extends B {\n    constructor(t, e) {\n      super(t), this._isTransitioning = !1, this._config = this._getConfig(e), this._triggerArray = [];\n      const n = V.find(ft);\n\n      for (let t = 0, e = n.length; t < e; t++) {\n        const e = n[t],\n              s = i(e),\n              o = V.find(s).filter(t => t === this._element);\n        null !== s && o.length && (this._selector = s, this._triggerArray.push(e));\n      }\n\n      this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle();\n    }\n\n    static get Default() {\n      return rt;\n    }\n\n    static get NAME() {\n      return ot;\n    }\n\n    toggle() {\n      this._isShown() ? this.hide() : this.show();\n    }\n\n    show() {\n      if (this._isTransitioning || this._isShown()) return;\n      let t,\n          e = [];\n\n      if (this._config.parent) {\n        const t = V.find(ut, this._config.parent);\n        e = V.find(".collapse.show, .collapse.collapsing", this._config.parent).filter(e => !t.includes(e));\n      }\n\n      const i = V.findOne(this._selector);\n\n      if (e.length) {\n        const n = e.find(t => i !== t);\n        if (t = n ? pt.getInstance(n) : null, t && t._isTransitioning) return;\n      }\n\n      if (j.trigger(this._element, "show.bs.collapse").defaultPrevented) return;\n      e.forEach(e => {\n        i !== e && pt.getOrCreateInstance(e, {\n          toggle: !1\n        }).hide(), t || H.set(e, "bs.collapse", null);\n      });\n\n      const n = this._getDimension();\n\n      this._element.classList.remove(ct), this._element.classList.add(ht), this._element.style[n] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0;\n      const s = `scroll${n[0].toUpperCase() + n.slice(1)}`;\n      this._queueCallback(() => {\n        this._isTransitioning = !1, this._element.classList.remove(ht), this._element.classList.add(ct, lt), this._element.style[n] = "", j.trigger(this._element, "shown.bs.collapse");\n      }, this._element, !0), this._element.style[n] = `${this._element[s]}px`;\n    }\n\n    hide() {\n      if (this._isTransitioning || !this._isShown()) return;\n      if (j.trigger(this._element, "hide.bs.collapse").defaultPrevented) return;\n\n      const t = this._getDimension();\n\n      this._element.style[t] = `${this._element.getBoundingClientRect()[t]}px`, u(this._element), this._element.classList.add(ht), this._element.classList.remove(ct, lt);\n      const e = this._triggerArray.length;\n\n      for (let t = 0; t < e; t++) {\n        const e = this._triggerArray[t],\n              i = n(e);\n        i && !this._isShown(i) && this._addAriaAndCollapsedClass([e], !1);\n      }\n\n      this._isTransitioning = !0, this._element.style[t] = "", this._queueCallback(() => {\n        this._isTransitioning = !1, this._element.classList.remove(ht), this._element.classList.add(ct), j.trigger(this._element, "hidden.bs.collapse");\n      }, this._element, !0);\n    }\n\n    _isShown(t = this._element) {\n      return t.classList.contains(lt);\n    }\n\n    _getConfig(t) {\n      return (t = { ...rt,\n        ...U.getDataAttributes(this._element),\n        ...t\n      }).toggle = Boolean(t.toggle), t.parent = r(t.parent), a(ot, t, at), t;\n    }\n\n    _getDimension() {\n      return this._element.classList.contains("collapse-horizontal") ? "width" : "height";\n    }\n\n    _initializeChildren() {\n      if (!this._config.parent) return;\n      const t = V.find(ut, this._config.parent);\n      V.find(ft, this._config.parent).filter(e => !t.includes(e)).forEach(t => {\n        const e = n(t);\n        e && this._addAriaAndCollapsedClass([t], this._isShown(e));\n      });\n    }\n\n    _addAriaAndCollapsedClass(t, e) {\n      t.length && t.forEach(t => {\n        e ? t.classList.remove(dt) : t.classList.add(dt), t.setAttribute("aria-expanded", e);\n      });\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = {};\n        "string" == typeof t && /show|hide/.test(t) && (e.toggle = !1);\n        const i = pt.getOrCreateInstance(this, e);\n\n        if ("string" == typeof t) {\n          if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);\n          i[t]();\n        }\n      });\n    }\n\n  }\n\n  j.on(document, "click.bs.collapse.data-api", ft, function (t) {\n    ("A" === t.target.tagName || t.delegateTarget && "A" === t.delegateTarget.tagName) && t.preventDefault();\n    const e = i(this);\n    V.find(e).forEach(t => {\n      pt.getOrCreateInstance(t, {\n        toggle: !1\n      }).toggle();\n    });\n  }), g(pt);\n  var mt = "top",\n      gt = "bottom",\n      _t = "right",\n      bt = "left",\n      vt = "auto",\n      yt = [mt, gt, _t, bt],\n      wt = "start",\n      Et = "end",\n      At = "clippingParents",\n      Tt = "viewport",\n      Ot = "popper",\n      Ct = "reference",\n      kt = yt.reduce(function (t, e) {\n    return t.concat([e + "-" + wt, e + "-" + Et]);\n  }, []),\n      Lt = [].concat(yt, [vt]).reduce(function (t, e) {\n    return t.concat([e, e + "-" + wt, e + "-" + Et]);\n  }, []),\n      xt = "beforeRead",\n      Dt = "read",\n      St = "afterRead",\n      Nt = "beforeMain",\n      It = "main",\n      Pt = "afterMain",\n      jt = "beforeWrite",\n      Mt = "write",\n      Ht = "afterWrite",\n      Bt = [xt, Dt, St, Nt, It, Pt, jt, Mt, Ht];\n\n  function Rt(t) {\n    return t ? (t.nodeName || "").toLowerCase() : null;\n  }\n\n  function Wt(t) {\n    if (null == t) return window;\n\n    if ("[object Window]" !== t.toString()) {\n      var e = t.ownerDocument;\n      return e && e.defaultView || window;\n    }\n\n    return t;\n  }\n\n  function $t(t) {\n    return t instanceof Wt(t).Element || t instanceof Element;\n  }\n\n  function zt(t) {\n    return t instanceof Wt(t).HTMLElement || t instanceof HTMLElement;\n  }\n\n  function qt(t) {\n    return "undefined" != typeof ShadowRoot && (t instanceof Wt(t).ShadowRoot || t instanceof ShadowRoot);\n  }\n\n  const Ft = {\n    name: "applyStyles",\n    enabled: !0,\n    phase: "write",\n    fn: function (t) {\n      var e = t.state;\n      Object.keys(e.elements).forEach(function (t) {\n        var i = e.styles[t] || {},\n            n = e.attributes[t] || {},\n            s = e.elements[t];\n        zt(s) && Rt(s) && (Object.assign(s.style, i), Object.keys(n).forEach(function (t) {\n          var e = n[t];\n          !1 === e ? s.removeAttribute(t) : s.setAttribute(t, !0 === e ? "" : e);\n        }));\n      });\n    },\n    effect: function (t) {\n      var e = t.state,\n          i = {\n        popper: {\n          position: e.options.strategy,\n          left: "0",\n          top: "0",\n          margin: "0"\n        },\n        arrow: {\n          position: "absolute"\n        },\n        reference: {}\n      };\n      return Object.assign(e.elements.popper.style, i.popper), e.styles = i, e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow), function () {\n        Object.keys(e.elements).forEach(function (t) {\n          var n = e.elements[t],\n              s = e.attributes[t] || {},\n              o = Object.keys(e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]).reduce(function (t, e) {\n            return t[e] = "", t;\n          }, {});\n          zt(n) && Rt(n) && (Object.assign(n.style, o), Object.keys(s).forEach(function (t) {\n            n.removeAttribute(t);\n          }));\n        });\n      };\n    },\n    requires: ["computeStyles"]\n  };\n\n  function Ut(t) {\n    return t.split("-")[0];\n  }\n\n  function Vt(t, e) {\n    var i = t.getBoundingClientRect();\n    return {\n      width: i.width / 1,\n      height: i.height / 1,\n      top: i.top / 1,\n      right: i.right / 1,\n      bottom: i.bottom / 1,\n      left: i.left / 1,\n      x: i.left / 1,\n      y: i.top / 1\n    };\n  }\n\n  function Kt(t) {\n    var e = Vt(t),\n        i = t.offsetWidth,\n        n = t.offsetHeight;\n    return Math.abs(e.width - i) <= 1 && (i = e.width), Math.abs(e.height - n) <= 1 && (n = e.height), {\n      x: t.offsetLeft,\n      y: t.offsetTop,\n      width: i,\n      height: n\n    };\n  }\n\n  function Xt(t, e) {\n    var i = e.getRootNode && e.getRootNode();\n    if (t.contains(e)) return !0;\n\n    if (i && qt(i)) {\n      var n = e;\n\n      do {\n        if (n && t.isSameNode(n)) return !0;\n        n = n.parentNode || n.host;\n      } while (n);\n    }\n\n    return !1;\n  }\n\n  function Yt(t) {\n    return Wt(t).getComputedStyle(t);\n  }\n\n  function Qt(t) {\n    return ["table", "td", "th"].indexOf(Rt(t)) >= 0;\n  }\n\n  function Gt(t) {\n    return (($t(t) ? t.ownerDocument : t.document) || window.document).documentElement;\n  }\n\n  function Zt(t) {\n    return "html" === Rt(t) ? t : t.assignedSlot || t.parentNode || (qt(t) ? t.host : null) || Gt(t);\n  }\n\n  function Jt(t) {\n    return zt(t) && "fixed" !== Yt(t).position ? t.offsetParent : null;\n  }\n\n  function te(t) {\n    for (var e = Wt(t), i = Jt(t); i && Qt(i) && "static" === Yt(i).position;) i = Jt(i);\n\n    return i && ("html" === Rt(i) || "body" === Rt(i) && "static" === Yt(i).position) ? e : i || function (t) {\n      var e = -1 !== navigator.userAgent.toLowerCase().indexOf("firefox");\n      if (-1 !== navigator.userAgent.indexOf("Trident") && zt(t) && "fixed" === Yt(t).position) return null;\n\n      for (var i = Zt(t); zt(i) && ["html", "body"].indexOf(Rt(i)) < 0;) {\n        var n = Yt(i);\n        if ("none" !== n.transform || "none" !== n.perspective || "paint" === n.contain || -1 !== ["transform", "perspective"].indexOf(n.willChange) || e && "filter" === n.willChange || e && n.filter && "none" !== n.filter) return i;\n        i = i.parentNode;\n      }\n\n      return null;\n    }(t) || e;\n  }\n\n  function ee(t) {\n    return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";\n  }\n\n  var ie = Math.max,\n      ne = Math.min,\n      se = Math.round;\n\n  function oe(t, e, i) {\n    return ie(t, ne(e, i));\n  }\n\n  function re(t) {\n    return Object.assign({}, {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }, t);\n  }\n\n  function ae(t, e) {\n    return e.reduce(function (e, i) {\n      return e[i] = t, e;\n    }, {});\n  }\n\n  const le = {\n    name: "arrow",\n    enabled: !0,\n    phase: "main",\n    fn: function (t) {\n      var e,\n          i = t.state,\n          n = t.name,\n          s = t.options,\n          o = i.elements.arrow,\n          r = i.modifiersData.popperOffsets,\n          a = Ut(i.placement),\n          l = ee(a),\n          c = [bt, _t].indexOf(a) >= 0 ? "height" : "width";\n\n      if (o && r) {\n        var h = function (t, e) {\n          return re("number" != typeof (t = "function" == typeof t ? t(Object.assign({}, e.rects, {\n            placement: e.placement\n          })) : t) ? t : ae(t, yt));\n        }(s.padding, i),\n            d = Kt(o),\n            u = "y" === l ? mt : bt,\n            f = "y" === l ? gt : _t,\n            p = i.rects.reference[c] + i.rects.reference[l] - r[l] - i.rects.popper[c],\n            m = r[l] - i.rects.reference[l],\n            g = te(o),\n            _ = g ? "y" === l ? g.clientHeight || 0 : g.clientWidth || 0 : 0,\n            b = p / 2 - m / 2,\n            v = h[u],\n            y = _ - d[c] - h[f],\n            w = _ / 2 - d[c] / 2 + b,\n            E = oe(v, w, y),\n            A = l;\n\n        i.modifiersData[n] = ((e = {})[A] = E, e.centerOffset = E - w, e);\n      }\n    },\n    effect: function (t) {\n      var e = t.state,\n          i = t.options.element,\n          n = void 0 === i ? "[data-popper-arrow]" : i;\n      null != n && ("string" != typeof n || (n = e.elements.popper.querySelector(n))) && Xt(e.elements.popper, n) && (e.elements.arrow = n);\n    },\n    requires: ["popperOffsets"],\n    requiresIfExists: ["preventOverflow"]\n  };\n\n  function ce(t) {\n    return t.split("-")[1];\n  }\n\n  var he = {\n    top: "auto",\n    right: "auto",\n    bottom: "auto",\n    left: "auto"\n  };\n\n  function de(t) {\n    var e,\n        i = t.popper,\n        n = t.popperRect,\n        s = t.placement,\n        o = t.variation,\n        r = t.offsets,\n        a = t.position,\n        l = t.gpuAcceleration,\n        c = t.adaptive,\n        h = t.roundOffsets,\n        d = !0 === h ? function (t) {\n      var e = t.x,\n          i = t.y,\n          n = window.devicePixelRatio || 1;\n      return {\n        x: se(se(e * n) / n) || 0,\n        y: se(se(i * n) / n) || 0\n      };\n    }(r) : "function" == typeof h ? h(r) : r,\n        u = d.x,\n        f = void 0 === u ? 0 : u,\n        p = d.y,\n        m = void 0 === p ? 0 : p,\n        g = r.hasOwnProperty("x"),\n        _ = r.hasOwnProperty("y"),\n        b = bt,\n        v = mt,\n        y = window;\n\n    if (c) {\n      var w = te(i),\n          E = "clientHeight",\n          A = "clientWidth";\n      w === Wt(i) && "static" !== Yt(w = Gt(i)).position && "absolute" === a && (E = "scrollHeight", A = "scrollWidth"), w = w, s !== mt && (s !== bt && s !== _t || o !== Et) || (v = gt, m -= w[E] - n.height, m *= l ? 1 : -1), s !== bt && (s !== mt && s !== gt || o !== Et) || (b = _t, f -= w[A] - n.width, f *= l ? 1 : -1);\n    }\n\n    var T,\n        O = Object.assign({\n      position: a\n    }, c && he);\n    return l ? Object.assign({}, O, ((T = {})[v] = _ ? "0" : "", T[b] = g ? "0" : "", T.transform = (y.devicePixelRatio || 1) <= 1 ? "translate(" + f + "px, " + m + "px)" : "translate3d(" + f + "px, " + m + "px, 0)", T)) : Object.assign({}, O, ((e = {})[v] = _ ? m + "px" : "", e[b] = g ? f + "px" : "", e.transform = "", e));\n  }\n\n  const ue = {\n    name: "computeStyles",\n    enabled: !0,\n    phase: "beforeWrite",\n    fn: function (t) {\n      var e = t.state,\n          i = t.options,\n          n = i.gpuAcceleration,\n          s = void 0 === n || n,\n          o = i.adaptive,\n          r = void 0 === o || o,\n          a = i.roundOffsets,\n          l = void 0 === a || a,\n          c = {\n        placement: Ut(e.placement),\n        variation: ce(e.placement),\n        popper: e.elements.popper,\n        popperRect: e.rects.popper,\n        gpuAcceleration: s\n      };\n      null != e.modifiersData.popperOffsets && (e.styles.popper = Object.assign({}, e.styles.popper, de(Object.assign({}, c, {\n        offsets: e.modifiersData.popperOffsets,\n        position: e.options.strategy,\n        adaptive: r,\n        roundOffsets: l\n      })))), null != e.modifiersData.arrow && (e.styles.arrow = Object.assign({}, e.styles.arrow, de(Object.assign({}, c, {\n        offsets: e.modifiersData.arrow,\n        position: "absolute",\n        adaptive: !1,\n        roundOffsets: l\n      })))), e.attributes.popper = Object.assign({}, e.attributes.popper, {\n        "data-popper-placement": e.placement\n      });\n    },\n    data: {}\n  };\n  var fe = {\n    passive: !0\n  };\n  const pe = {\n    name: "eventListeners",\n    enabled: !0,\n    phase: "write",\n    fn: function () {},\n    effect: function (t) {\n      var e = t.state,\n          i = t.instance,\n          n = t.options,\n          s = n.scroll,\n          o = void 0 === s || s,\n          r = n.resize,\n          a = void 0 === r || r,\n          l = Wt(e.elements.popper),\n          c = [].concat(e.scrollParents.reference, e.scrollParents.popper);\n      return o && c.forEach(function (t) {\n        t.addEventListener("scroll", i.update, fe);\n      }), a && l.addEventListener("resize", i.update, fe), function () {\n        o && c.forEach(function (t) {\n          t.removeEventListener("scroll", i.update, fe);\n        }), a && l.removeEventListener("resize", i.update, fe);\n      };\n    },\n    data: {}\n  };\n  var me = {\n    left: "right",\n    right: "left",\n    bottom: "top",\n    top: "bottom"\n  };\n\n  function ge(t) {\n    return t.replace(/left|right|bottom|top/g, function (t) {\n      return me[t];\n    });\n  }\n\n  var _e = {\n    start: "end",\n    end: "start"\n  };\n\n  function be(t) {\n    return t.replace(/start|end/g, function (t) {\n      return _e[t];\n    });\n  }\n\n  function ve(t) {\n    var e = Wt(t);\n    return {\n      scrollLeft: e.pageXOffset,\n      scrollTop: e.pageYOffset\n    };\n  }\n\n  function ye(t) {\n    return Vt(Gt(t)).left + ve(t).scrollLeft;\n  }\n\n  function we(t) {\n    var e = Yt(t),\n        i = e.overflow,\n        n = e.overflowX,\n        s = e.overflowY;\n    return /auto|scroll|overlay|hidden/.test(i + s + n);\n  }\n\n  function Ee(t) {\n    return ["html", "body", "#document"].indexOf(Rt(t)) >= 0 ? t.ownerDocument.body : zt(t) && we(t) ? t : Ee(Zt(t));\n  }\n\n  function Ae(t, e) {\n    var i;\n    void 0 === e && (e = []);\n    var n = Ee(t),\n        s = n === (null == (i = t.ownerDocument) ? void 0 : i.body),\n        o = Wt(n),\n        r = s ? [o].concat(o.visualViewport || [], we(n) ? n : []) : n,\n        a = e.concat(r);\n    return s ? a : a.concat(Ae(Zt(r)));\n  }\n\n  function Te(t) {\n    return Object.assign({}, t, {\n      left: t.x,\n      top: t.y,\n      right: t.x + t.width,\n      bottom: t.y + t.height\n    });\n  }\n\n  function Oe(t, e) {\n    return e === Tt ? Te(function (t) {\n      var e = Wt(t),\n          i = Gt(t),\n          n = e.visualViewport,\n          s = i.clientWidth,\n          o = i.clientHeight,\n          r = 0,\n          a = 0;\n      return n && (s = n.width, o = n.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (r = n.offsetLeft, a = n.offsetTop)), {\n        width: s,\n        height: o,\n        x: r + ye(t),\n        y: a\n      };\n    }(t)) : zt(e) ? function (t) {\n      var e = Vt(t);\n      return e.top = e.top + t.clientTop, e.left = e.left + t.clientLeft, e.bottom = e.top + t.clientHeight, e.right = e.left + t.clientWidth, e.width = t.clientWidth, e.height = t.clientHeight, e.x = e.left, e.y = e.top, e;\n    }(e) : Te(function (t) {\n      var e,\n          i = Gt(t),\n          n = ve(t),\n          s = null == (e = t.ownerDocument) ? void 0 : e.body,\n          o = ie(i.scrollWidth, i.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0),\n          r = ie(i.scrollHeight, i.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0),\n          a = -n.scrollLeft + ye(t),\n          l = -n.scrollTop;\n      return "rtl" === Yt(s || i).direction && (a += ie(i.clientWidth, s ? s.clientWidth : 0) - o), {\n        width: o,\n        height: r,\n        x: a,\n        y: l\n      };\n    }(Gt(t)));\n  }\n\n  function Ce(t) {\n    var e,\n        i = t.reference,\n        n = t.element,\n        s = t.placement,\n        o = s ? Ut(s) : null,\n        r = s ? ce(s) : null,\n        a = i.x + i.width / 2 - n.width / 2,\n        l = i.y + i.height / 2 - n.height / 2;\n\n    switch (o) {\n      case mt:\n        e = {\n          x: a,\n          y: i.y - n.height\n        };\n        break;\n\n      case gt:\n        e = {\n          x: a,\n          y: i.y + i.height\n        };\n        break;\n\n      case _t:\n        e = {\n          x: i.x + i.width,\n          y: l\n        };\n        break;\n\n      case bt:\n        e = {\n          x: i.x - n.width,\n          y: l\n        };\n        break;\n\n      default:\n        e = {\n          x: i.x,\n          y: i.y\n        };\n    }\n\n    var c = o ? ee(o) : null;\n\n    if (null != c) {\n      var h = "y" === c ? "height" : "width";\n\n      switch (r) {\n        case wt:\n          e[c] = e[c] - (i[h] / 2 - n[h] / 2);\n          break;\n\n        case Et:\n          e[c] = e[c] + (i[h] / 2 - n[h] / 2);\n      }\n    }\n\n    return e;\n  }\n\n  function ke(t, e) {\n    void 0 === e && (e = {});\n\n    var i = e,\n        n = i.placement,\n        s = void 0 === n ? t.placement : n,\n        o = i.boundary,\n        r = void 0 === o ? At : o,\n        a = i.rootBoundary,\n        l = void 0 === a ? Tt : a,\n        c = i.elementContext,\n        h = void 0 === c ? Ot : c,\n        d = i.altBoundary,\n        u = void 0 !== d && d,\n        f = i.padding,\n        p = void 0 === f ? 0 : f,\n        m = re("number" != typeof p ? p : ae(p, yt)),\n        g = h === Ot ? Ct : Ot,\n        _ = t.rects.popper,\n        b = t.elements[u ? g : h],\n        v = function (t, e, i) {\n      var n = "clippingParents" === e ? function (t) {\n        var e = Ae(Zt(t)),\n            i = ["absolute", "fixed"].indexOf(Yt(t).position) >= 0 && zt(t) ? te(t) : t;\n        return $t(i) ? e.filter(function (t) {\n          return $t(t) && Xt(t, i) && "body" !== Rt(t);\n        }) : [];\n      }(t) : [].concat(e),\n          s = [].concat(n, [i]),\n          o = s[0],\n          r = s.reduce(function (e, i) {\n        var n = Oe(t, i);\n        return e.top = ie(n.top, e.top), e.right = ne(n.right, e.right), e.bottom = ne(n.bottom, e.bottom), e.left = ie(n.left, e.left), e;\n      }, Oe(t, o));\n      return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;\n    }($t(b) ? b : b.contextElement || Gt(t.elements.popper), r, l),\n        y = Vt(t.elements.reference),\n        w = Ce({\n      reference: y,\n      element: _,\n      strategy: "absolute",\n      placement: s\n    }),\n        E = Te(Object.assign({}, _, w)),\n        A = h === Ot ? E : y,\n        T = {\n      top: v.top - A.top + m.top,\n      bottom: A.bottom - v.bottom + m.bottom,\n      left: v.left - A.left + m.left,\n      right: A.right - v.right + m.right\n    },\n        O = t.modifiersData.offset;\n\n    if (h === Ot && O) {\n      var C = O[s];\n      Object.keys(T).forEach(function (t) {\n        var e = [_t, gt].indexOf(t) >= 0 ? 1 : -1,\n            i = [mt, gt].indexOf(t) >= 0 ? "y" : "x";\n        T[t] += C[i] * e;\n      });\n    }\n\n    return T;\n  }\n\n  function Le(t, e) {\n    void 0 === e && (e = {});\n    var i = e,\n        n = i.placement,\n        s = i.boundary,\n        o = i.rootBoundary,\n        r = i.padding,\n        a = i.flipVariations,\n        l = i.allowedAutoPlacements,\n        c = void 0 === l ? Lt : l,\n        h = ce(n),\n        d = h ? a ? kt : kt.filter(function (t) {\n      return ce(t) === h;\n    }) : yt,\n        u = d.filter(function (t) {\n      return c.indexOf(t) >= 0;\n    });\n    0 === u.length && (u = d);\n    var f = u.reduce(function (e, i) {\n      return e[i] = ke(t, {\n        placement: i,\n        boundary: s,\n        rootBoundary: o,\n        padding: r\n      })[Ut(i)], e;\n    }, {});\n    return Object.keys(f).sort(function (t, e) {\n      return f[t] - f[e];\n    });\n  }\n\n  const xe = {\n    name: "flip",\n    enabled: !0,\n    phase: "main",\n    fn: function (t) {\n      var e = t.state,\n          i = t.options,\n          n = t.name;\n\n      if (!e.modifiersData[n]._skip) {\n        for (var s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 === r || r, l = i.fallbackPlacements, c = i.padding, h = i.boundary, d = i.rootBoundary, u = i.altBoundary, f = i.flipVariations, p = void 0 === f || f, m = i.allowedAutoPlacements, g = e.options.placement, _ = Ut(g), b = l || (_ !== g && p ? function (t) {\n          if (Ut(t) === vt) return [];\n          var e = ge(t);\n          return [be(t), e, be(e)];\n        }(g) : [ge(g)]), v = [g].concat(b).reduce(function (t, i) {\n          return t.concat(Ut(i) === vt ? Le(e, {\n            placement: i,\n            boundary: h,\n            rootBoundary: d,\n            padding: c,\n            flipVariations: p,\n            allowedAutoPlacements: m\n          }) : i);\n        }, []), y = e.rects.reference, w = e.rects.popper, E = new Map(), A = !0, T = v[0], O = 0; O < v.length; O++) {\n          var C = v[O],\n              k = Ut(C),\n              L = ce(C) === wt,\n              x = [mt, gt].indexOf(k) >= 0,\n              D = x ? "width" : "height",\n              S = ke(e, {\n            placement: C,\n            boundary: h,\n            rootBoundary: d,\n            altBoundary: u,\n            padding: c\n          }),\n              N = x ? L ? _t : bt : L ? gt : mt;\n          y[D] > w[D] && (N = ge(N));\n          var I = ge(N),\n              P = [];\n\n          if (o && P.push(S[k] <= 0), a && P.push(S[N] <= 0, S[I] <= 0), P.every(function (t) {\n            return t;\n          })) {\n            T = C, A = !1;\n            break;\n          }\n\n          E.set(C, P);\n        }\n\n        if (A) for (var j = function (t) {\n          var e = v.find(function (e) {\n            var i = E.get(e);\n            if (i) return i.slice(0, t).every(function (t) {\n              return t;\n            });\n          });\n          if (e) return T = e, "break";\n        }, M = p ? 3 : 1; M > 0 && "break" !== j(M); M--);\n        e.placement !== T && (e.modifiersData[n]._skip = !0, e.placement = T, e.reset = !0);\n      }\n    },\n    requiresIfExists: ["offset"],\n    data: {\n      _skip: !1\n    }\n  };\n\n  function De(t, e, i) {\n    return void 0 === i && (i = {\n      x: 0,\n      y: 0\n    }), {\n      top: t.top - e.height - i.y,\n      right: t.right - e.width + i.x,\n      bottom: t.bottom - e.height + i.y,\n      left: t.left - e.width - i.x\n    };\n  }\n\n  function Se(t) {\n    return [mt, _t, gt, bt].some(function (e) {\n      return t[e] >= 0;\n    });\n  }\n\n  const Ne = {\n    name: "hide",\n    enabled: !0,\n    phase: "main",\n    requiresIfExists: ["preventOverflow"],\n    fn: function (t) {\n      var e = t.state,\n          i = t.name,\n          n = e.rects.reference,\n          s = e.rects.popper,\n          o = e.modifiersData.preventOverflow,\n          r = ke(e, {\n        elementContext: "reference"\n      }),\n          a = ke(e, {\n        altBoundary: !0\n      }),\n          l = De(r, n),\n          c = De(a, s, o),\n          h = Se(l),\n          d = Se(c);\n      e.modifiersData[i] = {\n        referenceClippingOffsets: l,\n        popperEscapeOffsets: c,\n        isReferenceHidden: h,\n        hasPopperEscaped: d\n      }, e.attributes.popper = Object.assign({}, e.attributes.popper, {\n        "data-popper-reference-hidden": h,\n        "data-popper-escaped": d\n      });\n    }\n  },\n        Ie = {\n    name: "offset",\n    enabled: !0,\n    phase: "main",\n    requires: ["popperOffsets"],\n    fn: function (t) {\n      var e = t.state,\n          i = t.options,\n          n = t.name,\n          s = i.offset,\n          o = void 0 === s ? [0, 0] : s,\n          r = Lt.reduce(function (t, i) {\n        return t[i] = function (t, e, i) {\n          var n = Ut(t),\n              s = [bt, mt].indexOf(n) >= 0 ? -1 : 1,\n              o = "function" == typeof i ? i(Object.assign({}, e, {\n            placement: t\n          })) : i,\n              r = o[0],\n              a = o[1];\n          return r = r || 0, a = (a || 0) * s, [bt, _t].indexOf(n) >= 0 ? {\n            x: a,\n            y: r\n          } : {\n            x: r,\n            y: a\n          };\n        }(i, e.rects, o), t;\n      }, {}),\n          a = r[e.placement],\n          l = a.x,\n          c = a.y;\n      null != e.modifiersData.popperOffsets && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c), e.modifiersData[n] = r;\n    }\n  },\n        Pe = {\n    name: "popperOffsets",\n    enabled: !0,\n    phase: "read",\n    fn: function (t) {\n      var e = t.state,\n          i = t.name;\n      e.modifiersData[i] = Ce({\n        reference: e.rects.reference,\n        element: e.rects.popper,\n        strategy: "absolute",\n        placement: e.placement\n      });\n    },\n    data: {}\n  },\n        je = {\n    name: "preventOverflow",\n    enabled: !0,\n    phase: "main",\n    fn: function (t) {\n      var e = t.state,\n          i = t.options,\n          n = t.name,\n          s = i.mainAxis,\n          o = void 0 === s || s,\n          r = i.altAxis,\n          a = void 0 !== r && r,\n          l = i.boundary,\n          c = i.rootBoundary,\n          h = i.altBoundary,\n          d = i.padding,\n          u = i.tether,\n          f = void 0 === u || u,\n          p = i.tetherOffset,\n          m = void 0 === p ? 0 : p,\n          g = ke(e, {\n        boundary: l,\n        rootBoundary: c,\n        padding: d,\n        altBoundary: h\n      }),\n          _ = Ut(e.placement),\n          b = ce(e.placement),\n          v = !b,\n          y = ee(_),\n          w = "x" === y ? "y" : "x",\n          E = e.modifiersData.popperOffsets,\n          A = e.rects.reference,\n          T = e.rects.popper,\n          O = "function" == typeof m ? m(Object.assign({}, e.rects, {\n        placement: e.placement\n      })) : m,\n          C = {\n        x: 0,\n        y: 0\n      };\n\n      if (E) {\n        if (o || a) {\n          var k = "y" === y ? mt : bt,\n              L = "y" === y ? gt : _t,\n              x = "y" === y ? "height" : "width",\n              D = E[y],\n              S = E[y] + g[k],\n              N = E[y] - g[L],\n              I = f ? -T[x] / 2 : 0,\n              P = b === wt ? A[x] : T[x],\n              j = b === wt ? -T[x] : -A[x],\n              M = e.elements.arrow,\n              H = f && M ? Kt(M) : {\n            width: 0,\n            height: 0\n          },\n              B = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          },\n              R = B[k],\n              W = B[L],\n              $ = oe(0, A[x], H[x]),\n              z = v ? A[x] / 2 - I - $ - R - O : P - $ - R - O,\n              q = v ? -A[x] / 2 + I + $ + W + O : j + $ + W + O,\n              F = e.elements.arrow && te(e.elements.arrow),\n              U = F ? "y" === y ? F.clientTop || 0 : F.clientLeft || 0 : 0,\n              V = e.modifiersData.offset ? e.modifiersData.offset[e.placement][y] : 0,\n              K = E[y] + z - V - U,\n              X = E[y] + q - V;\n\n          if (o) {\n            var Y = oe(f ? ne(S, K) : S, D, f ? ie(N, X) : N);\n            E[y] = Y, C[y] = Y - D;\n          }\n\n          if (a) {\n            var Q = "x" === y ? mt : bt,\n                G = "x" === y ? gt : _t,\n                Z = E[w],\n                J = Z + g[Q],\n                tt = Z - g[G],\n                et = oe(f ? ne(J, K) : J, Z, f ? ie(tt, X) : tt);\n            E[w] = et, C[w] = et - Z;\n          }\n        }\n\n        e.modifiersData[n] = C;\n      }\n    },\n    requiresIfExists: ["offset"]\n  };\n\n  function Me(t, e, i) {\n    void 0 === i && (i = !1);\n    var n = zt(e);\n    zt(e) && function (t) {\n      var e = t.getBoundingClientRect();\n      e.width, t.offsetWidth, e.height, t.offsetHeight;\n    }(e);\n    var s,\n        o,\n        r = Gt(e),\n        a = Vt(t),\n        l = {\n      scrollLeft: 0,\n      scrollTop: 0\n    },\n        c = {\n      x: 0,\n      y: 0\n    };\n    return (n || !n && !i) && (("body" !== Rt(e) || we(r)) && (l = (s = e) !== Wt(s) && zt(s) ? {\n      scrollLeft: (o = s).scrollLeft,\n      scrollTop: o.scrollTop\n    } : ve(s)), zt(e) ? ((c = Vt(e)).x += e.clientLeft, c.y += e.clientTop) : r && (c.x = ye(r))), {\n      x: a.left + l.scrollLeft - c.x,\n      y: a.top + l.scrollTop - c.y,\n      width: a.width,\n      height: a.height\n    };\n  }\n\n  function He(t) {\n    var e = new Map(),\n        i = new Set(),\n        n = [];\n\n    function s(t) {\n      i.add(t.name), [].concat(t.requires || [], t.requiresIfExists || []).forEach(function (t) {\n        if (!i.has(t)) {\n          var n = e.get(t);\n          n && s(n);\n        }\n      }), n.push(t);\n    }\n\n    return t.forEach(function (t) {\n      e.set(t.name, t);\n    }), t.forEach(function (t) {\n      i.has(t.name) || s(t);\n    }), n;\n  }\n\n  var Be = {\n    placement: "bottom",\n    modifiers: [],\n    strategy: "absolute"\n  };\n\n  function Re() {\n    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];\n\n    return !e.some(function (t) {\n      return !(t && "function" == typeof t.getBoundingClientRect);\n    });\n  }\n\n  function We(t) {\n    void 0 === t && (t = {});\n    var e = t,\n        i = e.defaultModifiers,\n        n = void 0 === i ? [] : i,\n        s = e.defaultOptions,\n        o = void 0 === s ? Be : s;\n    return function (t, e, i) {\n      void 0 === i && (i = o);\n      var s,\n          r,\n          a = {\n        placement: "bottom",\n        orderedModifiers: [],\n        options: Object.assign({}, Be, o),\n        modifiersData: {},\n        elements: {\n          reference: t,\n          popper: e\n        },\n        attributes: {},\n        styles: {}\n      },\n          l = [],\n          c = !1,\n          h = {\n        state: a,\n        setOptions: function (i) {\n          var s = "function" == typeof i ? i(a.options) : i;\n          d(), a.options = Object.assign({}, o, a.options, s), a.scrollParents = {\n            reference: $t(t) ? Ae(t) : t.contextElement ? Ae(t.contextElement) : [],\n            popper: Ae(e)\n          };\n\n          var r,\n              c,\n              u = function (t) {\n            var e = He(t);\n            return Bt.reduce(function (t, i) {\n              return t.concat(e.filter(function (t) {\n                return t.phase === i;\n              }));\n            }, []);\n          }((r = [].concat(n, a.options.modifiers), c = r.reduce(function (t, e) {\n            var i = t[e.name];\n            return t[e.name] = i ? Object.assign({}, i, e, {\n              options: Object.assign({}, i.options, e.options),\n              data: Object.assign({}, i.data, e.data)\n            }) : e, t;\n          }, {}), Object.keys(c).map(function (t) {\n            return c[t];\n          })));\n\n          return a.orderedModifiers = u.filter(function (t) {\n            return t.enabled;\n          }), a.orderedModifiers.forEach(function (t) {\n            var e = t.name,\n                i = t.options,\n                n = void 0 === i ? {} : i,\n                s = t.effect;\n\n            if ("function" == typeof s) {\n              var o = s({\n                state: a,\n                name: e,\n                instance: h,\n                options: n\n              });\n              l.push(o || function () {});\n            }\n          }), h.update();\n        },\n        forceUpdate: function () {\n          if (!c) {\n            var t = a.elements,\n                e = t.reference,\n                i = t.popper;\n\n            if (Re(e, i)) {\n              a.rects = {\n                reference: Me(e, te(i), "fixed" === a.options.strategy),\n                popper: Kt(i)\n              }, a.reset = !1, a.placement = a.options.placement, a.orderedModifiers.forEach(function (t) {\n                return a.modifiersData[t.name] = Object.assign({}, t.data);\n              });\n\n              for (var n = 0; n < a.orderedModifiers.length; n++) if (!0 !== a.reset) {\n                var s = a.orderedModifiers[n],\n                    o = s.fn,\n                    r = s.options,\n                    l = void 0 === r ? {} : r,\n                    d = s.name;\n                "function" == typeof o && (a = o({\n                  state: a,\n                  options: l,\n                  name: d,\n                  instance: h\n                }) || a);\n              } else a.reset = !1, n = -1;\n            }\n          }\n        },\n        update: (s = function () {\n          return new Promise(function (t) {\n            h.forceUpdate(), t(a);\n          });\n        }, function () {\n          return r || (r = new Promise(function (t) {\n            Promise.resolve().then(function () {\n              r = void 0, t(s());\n            });\n          })), r;\n        }),\n        destroy: function () {\n          d(), c = !0;\n        }\n      };\n      if (!Re(t, e)) return h;\n\n      function d() {\n        l.forEach(function (t) {\n          return t();\n        }), l = [];\n      }\n\n      return h.setOptions(i).then(function (t) {\n        !c && i.onFirstUpdate && i.onFirstUpdate(t);\n      }), h;\n    };\n  }\n\n  var $e = We(),\n      ze = We({\n    defaultModifiers: [pe, Pe, ue, Ft]\n  }),\n      qe = We({\n    defaultModifiers: [pe, Pe, ue, Ft, Ie, xe, je, le, Ne]\n  });\n  const Fe = Object.freeze({\n    __proto__: null,\n    popperGenerator: We,\n    detectOverflow: ke,\n    createPopperBase: $e,\n    createPopper: qe,\n    createPopperLite: ze,\n    top: mt,\n    bottom: gt,\n    right: _t,\n    left: bt,\n    auto: vt,\n    basePlacements: yt,\n    start: wt,\n    end: Et,\n    clippingParents: At,\n    viewport: Tt,\n    popper: Ot,\n    reference: Ct,\n    variationPlacements: kt,\n    placements: Lt,\n    beforeRead: xt,\n    read: Dt,\n    afterRead: St,\n    beforeMain: Nt,\n    main: It,\n    afterMain: Pt,\n    beforeWrite: jt,\n    write: Mt,\n    afterWrite: Ht,\n    modifierPhases: Bt,\n    applyStyles: Ft,\n    arrow: le,\n    computeStyles: ue,\n    eventListeners: pe,\n    flip: xe,\n    hide: Ne,\n    offset: Ie,\n    popperOffsets: Pe,\n    preventOverflow: je\n  }),\n        Ue = "dropdown",\n        Ve = "Escape",\n        Ke = "Space",\n        Xe = "ArrowUp",\n        Ye = "ArrowDown",\n        Qe = new RegExp("ArrowUp|ArrowDown|Escape"),\n        Ge = "click.bs.dropdown.data-api",\n        Ze = "keydown.bs.dropdown.data-api",\n        Je = "show",\n        ti = \'[data-bs-toggle="dropdown"]\',\n        ei = ".dropdown-menu",\n        ii = m() ? "top-end" : "top-start",\n        ni = m() ? "top-start" : "top-end",\n        si = m() ? "bottom-end" : "bottom-start",\n        oi = m() ? "bottom-start" : "bottom-end",\n        ri = m() ? "left-start" : "right-start",\n        ai = m() ? "right-start" : "left-start",\n        li = {\n    offset: [0, 2],\n    boundary: "clippingParents",\n    reference: "toggle",\n    display: "dynamic",\n    popperConfig: null,\n    autoClose: !0\n  },\n        ci = {\n    offset: "(array|string|function)",\n    boundary: "(string|element)",\n    reference: "(string|element|object)",\n    display: "string",\n    popperConfig: "(null|object|function)",\n    autoClose: "(boolean|string)"\n  };\n\n  class hi extends B {\n    constructor(t, e) {\n      super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar();\n    }\n\n    static get Default() {\n      return li;\n    }\n\n    static get DefaultType() {\n      return ci;\n    }\n\n    static get NAME() {\n      return Ue;\n    }\n\n    toggle() {\n      return this._isShown() ? this.hide() : this.show();\n    }\n\n    show() {\n      if (c(this._element) || this._isShown(this._menu)) return;\n      const t = {\n        relatedTarget: this._element\n      };\n      if (j.trigger(this._element, "show.bs.dropdown", t).defaultPrevented) return;\n      const e = hi.getParentFromElement(this._element);\n      this._inNavbar ? U.setDataAttribute(this._menu, "popper", "none") : this._createPopper(e), "ontouchstart" in document.documentElement && !e.closest(".navbar-nav") && [].concat(...document.body.children).forEach(t => j.on(t, "mouseover", d)), this._element.focus(), this._element.setAttribute("aria-expanded", !0), this._menu.classList.add(Je), this._element.classList.add(Je), j.trigger(this._element, "shown.bs.dropdown", t);\n    }\n\n    hide() {\n      if (c(this._element) || !this._isShown(this._menu)) return;\n      const t = {\n        relatedTarget: this._element\n      };\n\n      this._completeHide(t);\n    }\n\n    dispose() {\n      this._popper && this._popper.destroy(), super.dispose();\n    }\n\n    update() {\n      this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n    }\n\n    _completeHide(t) {\n      j.trigger(this._element, "hide.bs.dropdown", t).defaultPrevented || ("ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(t => j.off(t, "mouseover", d)), this._popper && this._popper.destroy(), this._menu.classList.remove(Je), this._element.classList.remove(Je), this._element.setAttribute("aria-expanded", "false"), U.removeDataAttribute(this._menu, "popper"), j.trigger(this._element, "hidden.bs.dropdown", t));\n    }\n\n    _getConfig(t) {\n      if (t = { ...this.constructor.Default,\n        ...U.getDataAttributes(this._element),\n        ...t\n      }, a(Ue, t, this.constructor.DefaultType), "object" == typeof t.reference && !o(t.reference) && "function" != typeof t.reference.getBoundingClientRect) throw new TypeError(`${Ue.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);\n      return t;\n    }\n\n    _createPopper(t) {\n      if (void 0 === Fe) throw new TypeError("Bootstrap\'s dropdowns require Popper (https://popper.js.org)");\n      let e = this._element;\n      "parent" === this._config.reference ? e = t : o(this._config.reference) ? e = r(this._config.reference) : "object" == typeof this._config.reference && (e = this._config.reference);\n\n      const i = this._getPopperConfig(),\n            n = i.modifiers.find(t => "applyStyles" === t.name && !1 === t.enabled);\n\n      this._popper = qe(e, this._menu, i), n && U.setDataAttribute(this._menu, "popper", "static");\n    }\n\n    _isShown(t = this._element) {\n      return t.classList.contains(Je);\n    }\n\n    _getMenuElement() {\n      return V.next(this._element, ei)[0];\n    }\n\n    _getPlacement() {\n      const t = this._element.parentNode;\n      if (t.classList.contains("dropend")) return ri;\n      if (t.classList.contains("dropstart")) return ai;\n      const e = "end" === getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();\n      return t.classList.contains("dropup") ? e ? ni : ii : e ? oi : si;\n    }\n\n    _detectNavbar() {\n      return null !== this._element.closest(".navbar");\n    }\n\n    _getOffset() {\n      const {\n        offset: t\n      } = this._config;\n      return "string" == typeof t ? t.split(",").map(t => Number.parseInt(t, 10)) : "function" == typeof t ? e => t(e, this._element) : t;\n    }\n\n    _getPopperConfig() {\n      const t = {\n        placement: this._getPlacement(),\n        modifiers: [{\n          name: "preventOverflow",\n          options: {\n            boundary: this._config.boundary\n          }\n        }, {\n          name: "offset",\n          options: {\n            offset: this._getOffset()\n          }\n        }]\n      };\n      return "static" === this._config.display && (t.modifiers = [{\n        name: "applyStyles",\n        enabled: !1\n      }]), { ...t,\n        ...("function" == typeof this._config.popperConfig ? this._config.popperConfig(t) : this._config.popperConfig)\n      };\n    }\n\n    _selectMenuItem({\n      key: t,\n      target: e\n    }) {\n      const i = V.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", this._menu).filter(l);\n      i.length && v(i, e, t === Ye, !i.includes(e)).focus();\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = hi.getOrCreateInstance(this, t);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);\n          e[t]();\n        }\n      });\n    }\n\n    static clearMenus(t) {\n      if (t && (2 === t.button || "keyup" === t.type && "Tab" !== t.key)) return;\n      const e = V.find(ti);\n\n      for (let i = 0, n = e.length; i < n; i++) {\n        const n = hi.getInstance(e[i]);\n        if (!n || !1 === n._config.autoClose) continue;\n        if (!n._isShown()) continue;\n        const s = {\n          relatedTarget: n._element\n        };\n\n        if (t) {\n          const e = t.composedPath(),\n                i = e.includes(n._menu);\n          if (e.includes(n._element) || "inside" === n._config.autoClose && !i || "outside" === n._config.autoClose && i) continue;\n          if (n._menu.contains(t.target) && ("keyup" === t.type && "Tab" === t.key || /input|select|option|textarea|form/i.test(t.target.tagName))) continue;\n          "click" === t.type && (s.clickEvent = t);\n        }\n\n        n._completeHide(s);\n      }\n    }\n\n    static getParentFromElement(t) {\n      return n(t) || t.parentNode;\n    }\n\n    static dataApiKeydownHandler(t) {\n      if (/input|textarea/i.test(t.target.tagName) ? t.key === Ke || t.key !== Ve && (t.key !== Ye && t.key !== Xe || t.target.closest(ei)) : !Qe.test(t.key)) return;\n      const e = this.classList.contains(Je);\n      if (!e && t.key === Ve) return;\n      if (t.preventDefault(), t.stopPropagation(), c(this)) return;\n      const i = this.matches(ti) ? this : V.prev(this, ti)[0],\n            n = hi.getOrCreateInstance(i);\n      if (t.key !== Ve) return t.key === Xe || t.key === Ye ? (e || n.show(), void n._selectMenuItem(t)) : void (e && t.key !== Ke || hi.clearMenus());\n      n.hide();\n    }\n\n  }\n\n  j.on(document, Ze, ti, hi.dataApiKeydownHandler), j.on(document, Ze, ei, hi.dataApiKeydownHandler), j.on(document, Ge, hi.clearMenus), j.on(document, "keyup.bs.dropdown.data-api", hi.clearMenus), j.on(document, Ge, ti, function (t) {\n    t.preventDefault(), hi.getOrCreateInstance(this).toggle();\n  }), g(hi);\n  const di = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",\n        ui = ".sticky-top";\n\n  class fi {\n    constructor() {\n      this._element = document.body;\n    }\n\n    getWidth() {\n      const t = document.documentElement.clientWidth;\n      return Math.abs(window.innerWidth - t);\n    }\n\n    hide() {\n      const t = this.getWidth();\n      this._disableOverFlow(), this._setElementAttributes(this._element, "paddingRight", e => e + t), this._setElementAttributes(di, "paddingRight", e => e + t), this._setElementAttributes(ui, "marginRight", e => e - t);\n    }\n\n    _disableOverFlow() {\n      this._saveInitialAttribute(this._element, "overflow"), this._element.style.overflow = "hidden";\n    }\n\n    _setElementAttributes(t, e, i) {\n      const n = this.getWidth();\n\n      this._applyManipulationCallback(t, t => {\n        if (t !== this._element && window.innerWidth > t.clientWidth + n) return;\n\n        this._saveInitialAttribute(t, e);\n\n        const s = window.getComputedStyle(t)[e];\n        t.style[e] = `${i(Number.parseFloat(s))}px`;\n      });\n    }\n\n    reset() {\n      this._resetElementAttributes(this._element, "overflow"), this._resetElementAttributes(this._element, "paddingRight"), this._resetElementAttributes(di, "paddingRight"), this._resetElementAttributes(ui, "marginRight");\n    }\n\n    _saveInitialAttribute(t, e) {\n      const i = t.style[e];\n      i && U.setDataAttribute(t, e, i);\n    }\n\n    _resetElementAttributes(t, e) {\n      this._applyManipulationCallback(t, t => {\n        const i = U.getDataAttribute(t, e);\n        void 0 === i ? t.style.removeProperty(e) : (U.removeDataAttribute(t, e), t.style[e] = i);\n      });\n    }\n\n    _applyManipulationCallback(t, e) {\n      o(t) ? e(t) : V.find(t, this._element).forEach(e);\n    }\n\n    isOverflowing() {\n      return this.getWidth() > 0;\n    }\n\n  }\n\n  const pi = {\n    className: "modal-backdrop",\n    isVisible: !0,\n    isAnimated: !1,\n    rootElement: "body",\n    clickCallback: null\n  },\n        mi = {\n    className: "string",\n    isVisible: "boolean",\n    isAnimated: "boolean",\n    rootElement: "(element|string)",\n    clickCallback: "(function|null)"\n  },\n        gi = "show",\n        _i = "mousedown.bs.backdrop";\n\n  class bi {\n    constructor(t) {\n      this._config = this._getConfig(t), this._isAppended = !1, this._element = null;\n    }\n\n    show(t) {\n      this._config.isVisible ? (this._append(), this._config.isAnimated && u(this._getElement()), this._getElement().classList.add(gi), this._emulateAnimation(() => {\n        _(t);\n      })) : _(t);\n    }\n\n    hide(t) {\n      this._config.isVisible ? (this._getElement().classList.remove(gi), this._emulateAnimation(() => {\n        this.dispose(), _(t);\n      })) : _(t);\n    }\n\n    _getElement() {\n      if (!this._element) {\n        const t = document.createElement("div");\n        t.className = this._config.className, this._config.isAnimated && t.classList.add("fade"), this._element = t;\n      }\n\n      return this._element;\n    }\n\n    _getConfig(t) {\n      return (t = { ...pi,\n        ...("object" == typeof t ? t : {})\n      }).rootElement = r(t.rootElement), a("backdrop", t, mi), t;\n    }\n\n    _append() {\n      this._isAppended || (this._config.rootElement.append(this._getElement()), j.on(this._getElement(), _i, () => {\n        _(this._config.clickCallback);\n      }), this._isAppended = !0);\n    }\n\n    dispose() {\n      this._isAppended && (j.off(this._element, _i), this._element.remove(), this._isAppended = !1);\n    }\n\n    _emulateAnimation(t) {\n      b(t, this._getElement(), this._config.isAnimated);\n    }\n\n  }\n\n  const vi = {\n    trapElement: null,\n    autofocus: !0\n  },\n        yi = {\n    trapElement: "element",\n    autofocus: "boolean"\n  },\n        wi = ".bs.focustrap",\n        Ei = "backward";\n\n  class Ai {\n    constructor(t) {\n      this._config = this._getConfig(t), this._isActive = !1, this._lastTabNavDirection = null;\n    }\n\n    activate() {\n      const {\n        trapElement: t,\n        autofocus: e\n      } = this._config;\n      this._isActive || (e && t.focus(), j.off(document, wi), j.on(document, "focusin.bs.focustrap", t => this._handleFocusin(t)), j.on(document, "keydown.tab.bs.focustrap", t => this._handleKeydown(t)), this._isActive = !0);\n    }\n\n    deactivate() {\n      this._isActive && (this._isActive = !1, j.off(document, wi));\n    }\n\n    _handleFocusin(t) {\n      const {\n        target: e\n      } = t,\n            {\n        trapElement: i\n      } = this._config;\n      if (e === document || e === i || i.contains(e)) return;\n      const n = V.focusableChildren(i);\n      0 === n.length ? i.focus() : this._lastTabNavDirection === Ei ? n[n.length - 1].focus() : n[0].focus();\n    }\n\n    _handleKeydown(t) {\n      "Tab" === t.key && (this._lastTabNavDirection = t.shiftKey ? Ei : "forward");\n    }\n\n    _getConfig(t) {\n      return t = { ...vi,\n        ...("object" == typeof t ? t : {})\n      }, a("focustrap", t, yi), t;\n    }\n\n  }\n\n  const Ti = "modal",\n        Oi = "Escape",\n        Ci = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0\n  },\n        ki = {\n    backdrop: "(boolean|string)",\n    keyboard: "boolean",\n    focus: "boolean"\n  },\n        Li = "hidden.bs.modal",\n        xi = "show.bs.modal",\n        Di = "resize.bs.modal",\n        Si = "click.dismiss.bs.modal",\n        Ni = "keydown.dismiss.bs.modal",\n        Ii = "mousedown.dismiss.bs.modal",\n        Pi = "modal-open",\n        ji = "show",\n        Mi = "modal-static";\n\n  class Hi extends B {\n    constructor(t, e) {\n      super(t), this._config = this._getConfig(e), this._dialog = V.findOne(".modal-dialog", this._element), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollBar = new fi();\n    }\n\n    static get Default() {\n      return Ci;\n    }\n\n    static get NAME() {\n      return Ti;\n    }\n\n    toggle(t) {\n      return this._isShown ? this.hide() : this.show(t);\n    }\n\n    show(t) {\n      this._isShown || this._isTransitioning || j.trigger(this._element, xi, {\n        relatedTarget: t\n      }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.classList.add(Pi), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), j.on(this._dialog, Ii, () => {\n        j.one(this._element, "mouseup.dismiss.bs.modal", t => {\n          t.target === this._element && (this._ignoreBackdropClick = !0);\n        });\n      }), this._showBackdrop(() => this._showElement(t)));\n    }\n\n    hide() {\n      if (!this._isShown || this._isTransitioning) return;\n      if (j.trigger(this._element, "hide.bs.modal").defaultPrevented) return;\n      this._isShown = !1;\n\n      const t = this._isAnimated();\n\n      t && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), this._focustrap.deactivate(), this._element.classList.remove(ji), j.off(this._element, Si), j.off(this._dialog, Ii), this._queueCallback(() => this._hideModal(), this._element, t);\n    }\n\n    dispose() {\n      [window, this._dialog].forEach(t => j.off(t, ".bs.modal")), this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();\n    }\n\n    handleUpdate() {\n      this._adjustDialog();\n    }\n\n    _initializeBackDrop() {\n      return new bi({\n        isVisible: Boolean(this._config.backdrop),\n        isAnimated: this._isAnimated()\n      });\n    }\n\n    _initializeFocusTrap() {\n      return new Ai({\n        trapElement: this._element\n      });\n    }\n\n    _getConfig(t) {\n      return t = { ...Ci,\n        ...U.getDataAttributes(this._element),\n        ...("object" == typeof t ? t : {})\n      }, a(Ti, t, ki), t;\n    }\n\n    _showElement(t) {\n      const e = this._isAnimated(),\n            i = V.findOne(".modal-body", this._dialog);\n\n      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.append(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0, i && (i.scrollTop = 0), e && u(this._element), this._element.classList.add(ji), this._queueCallback(() => {\n        this._config.focus && this._focustrap.activate(), this._isTransitioning = !1, j.trigger(this._element, "shown.bs.modal", {\n          relatedTarget: t\n        });\n      }, this._dialog, e);\n    }\n\n    _setEscapeEvent() {\n      this._isShown ? j.on(this._element, Ni, t => {\n        this._config.keyboard && t.key === Oi ? (t.preventDefault(), this.hide()) : this._config.keyboard || t.key !== Oi || this._triggerBackdropTransition();\n      }) : j.off(this._element, Ni);\n    }\n\n    _setResizeEvent() {\n      this._isShown ? j.on(window, Di, () => this._adjustDialog()) : j.off(window, Di);\n    }\n\n    _hideModal() {\n      this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._backdrop.hide(() => {\n        document.body.classList.remove(Pi), this._resetAdjustments(), this._scrollBar.reset(), j.trigger(this._element, Li);\n      });\n    }\n\n    _showBackdrop(t) {\n      j.on(this._element, Si, t => {\n        this._ignoreBackdropClick ? this._ignoreBackdropClick = !1 : t.target === t.currentTarget && (!0 === this._config.backdrop ? this.hide() : "static" === this._config.backdrop && this._triggerBackdropTransition());\n      }), this._backdrop.show(t);\n    }\n\n    _isAnimated() {\n      return this._element.classList.contains("fade");\n    }\n\n    _triggerBackdropTransition() {\n      if (j.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented) return;\n      const {\n        classList: t,\n        scrollHeight: e,\n        style: i\n      } = this._element,\n            n = e > document.documentElement.clientHeight;\n      !n && "hidden" === i.overflowY || t.contains(Mi) || (n || (i.overflowY = "hidden"), t.add(Mi), this._queueCallback(() => {\n        t.remove(Mi), n || this._queueCallback(() => {\n          i.overflowY = "";\n        }, this._dialog);\n      }, this._dialog), this._element.focus());\n    }\n\n    _adjustDialog() {\n      const t = this._element.scrollHeight > document.documentElement.clientHeight,\n            e = this._scrollBar.getWidth(),\n            i = e > 0;\n\n      (!i && t && !m() || i && !t && m()) && (this._element.style.paddingLeft = `${e}px`), (i && !t && !m() || !i && t && m()) && (this._element.style.paddingRight = `${e}px`);\n    }\n\n    _resetAdjustments() {\n      this._element.style.paddingLeft = "", this._element.style.paddingRight = "";\n    }\n\n    static jQueryInterface(t, e) {\n      return this.each(function () {\n        const i = Hi.getOrCreateInstance(this, t);\n\n        if ("string" == typeof t) {\n          if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);\n          i[t](e);\n        }\n      });\n    }\n\n  }\n\n  j.on(document, "click.bs.modal.data-api", \'[data-bs-toggle="modal"]\', function (t) {\n    const e = n(this);\n    ["A", "AREA"].includes(this.tagName) && t.preventDefault(), j.one(e, xi, t => {\n      t.defaultPrevented || j.one(e, Li, () => {\n        l(this) && this.focus();\n      });\n    });\n    const i = V.findOne(".modal.show");\n    i && Hi.getInstance(i).hide(), Hi.getOrCreateInstance(e).toggle(this);\n  }), R(Hi), g(Hi);\n  const Bi = "offcanvas",\n        Ri = {\n    backdrop: !0,\n    keyboard: !0,\n    scroll: !1\n  },\n        Wi = {\n    backdrop: "boolean",\n    keyboard: "boolean",\n    scroll: "boolean"\n  },\n        $i = "show",\n        zi = ".offcanvas.show",\n        qi = "hidden.bs.offcanvas";\n\n  class Fi extends B {\n    constructor(t, e) {\n      super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners();\n    }\n\n    static get NAME() {\n      return Bi;\n    }\n\n    static get Default() {\n      return Ri;\n    }\n\n    toggle(t) {\n      return this._isShown ? this.hide() : this.show(t);\n    }\n\n    show(t) {\n      this._isShown || j.trigger(this._element, "show.bs.offcanvas", {\n        relatedTarget: t\n      }).defaultPrevented || (this._isShown = !0, this._element.style.visibility = "visible", this._backdrop.show(), this._config.scroll || new fi().hide(), this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.classList.add($i), this._queueCallback(() => {\n        this._config.scroll || this._focustrap.activate(), j.trigger(this._element, "shown.bs.offcanvas", {\n          relatedTarget: t\n        });\n      }, this._element, !0));\n    }\n\n    hide() {\n      this._isShown && (j.trigger(this._element, "hide.bs.offcanvas").defaultPrevented || (this._focustrap.deactivate(), this._element.blur(), this._isShown = !1, this._element.classList.remove($i), this._backdrop.hide(), this._queueCallback(() => {\n        this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._element.style.visibility = "hidden", this._config.scroll || new fi().reset(), j.trigger(this._element, qi);\n      }, this._element, !0)));\n    }\n\n    dispose() {\n      this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();\n    }\n\n    _getConfig(t) {\n      return t = { ...Ri,\n        ...U.getDataAttributes(this._element),\n        ...("object" == typeof t ? t : {})\n      }, a(Bi, t, Wi), t;\n    }\n\n    _initializeBackDrop() {\n      return new bi({\n        className: "offcanvas-backdrop",\n        isVisible: this._config.backdrop,\n        isAnimated: !0,\n        rootElement: this._element.parentNode,\n        clickCallback: () => this.hide()\n      });\n    }\n\n    _initializeFocusTrap() {\n      return new Ai({\n        trapElement: this._element\n      });\n    }\n\n    _addEventListeners() {\n      j.on(this._element, "keydown.dismiss.bs.offcanvas", t => {\n        this._config.keyboard && "Escape" === t.key && this.hide();\n      });\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = Fi.getOrCreateInstance(this, t);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`);\n          e[t](this);\n        }\n      });\n    }\n\n  }\n\n  j.on(document, "click.bs.offcanvas.data-api", \'[data-bs-toggle="offcanvas"]\', function (t) {\n    const e = n(this);\n    if (["A", "AREA"].includes(this.tagName) && t.preventDefault(), c(this)) return;\n    j.one(e, qi, () => {\n      l(this) && this.focus();\n    });\n    const i = V.findOne(zi);\n    i && i !== e && Fi.getInstance(i).hide(), Fi.getOrCreateInstance(e).toggle(this);\n  }), j.on(window, "load.bs.offcanvas.data-api", () => V.find(zi).forEach(t => Fi.getOrCreateInstance(t).show())), R(Fi), g(Fi);\n\n  const Ui = new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]),\n        Vi = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,\n        Ki = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i,\n        Xi = (t, e) => {\n    const i = t.nodeName.toLowerCase();\n    if (e.includes(i)) return !Ui.has(i) || Boolean(Vi.test(t.nodeValue) || Ki.test(t.nodeValue));\n    const n = e.filter(t => t instanceof RegExp);\n\n    for (let t = 0, e = n.length; t < e; t++) if (n[t].test(i)) return !0;\n\n    return !1;\n  };\n\n  function Yi(t, e, i) {\n    if (!t.length) return t;\n    if (i && "function" == typeof i) return i(t);\n    const n = new window.DOMParser().parseFromString(t, "text/html"),\n          s = [].concat(...n.body.querySelectorAll("*"));\n\n    for (let t = 0, i = s.length; t < i; t++) {\n      const i = s[t],\n            n = i.nodeName.toLowerCase();\n\n      if (!Object.keys(e).includes(n)) {\n        i.remove();\n        continue;\n      }\n\n      const o = [].concat(...i.attributes),\n            r = [].concat(e["*"] || [], e[n] || []);\n      o.forEach(t => {\n        Xi(t, r) || i.removeAttribute(t.nodeName);\n      });\n    }\n\n    return n.body.innerHTML;\n  }\n\n  const Qi = "tooltip",\n        Gi = new Set(["sanitize", "allowList", "sanitizeFn"]),\n        Zi = {\n    animation: "boolean",\n    template: "string",\n    title: "(string|element|function)",\n    trigger: "string",\n    delay: "(number|object)",\n    html: "boolean",\n    selector: "(string|boolean)",\n    placement: "(string|function)",\n    offset: "(array|string|function)",\n    container: "(string|element|boolean)",\n    fallbackPlacements: "array",\n    boundary: "(string|element)",\n    customClass: "(string|function)",\n    sanitize: "boolean",\n    sanitizeFn: "(null|function)",\n    allowList: "object",\n    popperConfig: "(null|object|function)"\n  },\n        Ji = {\n    AUTO: "auto",\n    TOP: "top",\n    RIGHT: m() ? "left" : "right",\n    BOTTOM: "bottom",\n    LEFT: m() ? "right" : "left"\n  },\n        tn = {\n    animation: !0,\n    template: \'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>\',\n    trigger: "hover focus",\n    title: "",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: "top",\n    offset: [0, 0],\n    container: !1,\n    fallbackPlacements: ["top", "right", "bottom", "left"],\n    boundary: "clippingParents",\n    customClass: "",\n    sanitize: !0,\n    sanitizeFn: null,\n    allowList: {\n      "*": ["class", "dir", "id", "lang", "role", /^aria-[\\w-]*$/i],\n      a: ["target", "href", "title", "rel"],\n      area: [],\n      b: [],\n      br: [],\n      col: [],\n      code: [],\n      div: [],\n      em: [],\n      hr: [],\n      h1: [],\n      h2: [],\n      h3: [],\n      h4: [],\n      h5: [],\n      h6: [],\n      i: [],\n      img: ["src", "srcset", "alt", "title", "width", "height"],\n      li: [],\n      ol: [],\n      p: [],\n      pre: [],\n      s: [],\n      small: [],\n      span: [],\n      sub: [],\n      sup: [],\n      strong: [],\n      u: [],\n      ul: []\n    },\n    popperConfig: null\n  },\n        en = {\n    HIDE: "hide.bs.tooltip",\n    HIDDEN: "hidden.bs.tooltip",\n    SHOW: "show.bs.tooltip",\n    SHOWN: "shown.bs.tooltip",\n    INSERTED: "inserted.bs.tooltip",\n    CLICK: "click.bs.tooltip",\n    FOCUSIN: "focusin.bs.tooltip",\n    FOCUSOUT: "focusout.bs.tooltip",\n    MOUSEENTER: "mouseenter.bs.tooltip",\n    MOUSELEAVE: "mouseleave.bs.tooltip"\n  },\n        nn = "fade",\n        sn = "show",\n        on = "show",\n        rn = "out",\n        an = ".tooltip-inner",\n        ln = ".modal",\n        cn = "hide.bs.modal",\n        hn = "hover",\n        dn = "focus";\n\n  class un extends B {\n    constructor(t, e) {\n      if (void 0 === Fe) throw new TypeError("Bootstrap\'s tooltips require Popper (https://popper.js.org)");\n      super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();\n    }\n\n    static get Default() {\n      return tn;\n    }\n\n    static get NAME() {\n      return Qi;\n    }\n\n    static get Event() {\n      return en;\n    }\n\n    static get DefaultType() {\n      return Zi;\n    }\n\n    enable() {\n      this._isEnabled = !0;\n    }\n\n    disable() {\n      this._isEnabled = !1;\n    }\n\n    toggleEnabled() {\n      this._isEnabled = !this._isEnabled;\n    }\n\n    toggle(t) {\n      if (this._isEnabled) if (t) {\n        const e = this._initializeOnDelegatedTarget(t);\n\n        e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);\n      } else {\n        if (this.getTipElement().classList.contains(sn)) return void this._leave(null, this);\n\n        this._enter(null, this);\n      }\n    }\n\n    dispose() {\n      clearTimeout(this._timeout), j.off(this._element.closest(ln), cn, this._hideModalHandler), this.tip && this.tip.remove(), this._disposePopper(), super.dispose();\n    }\n\n    show() {\n      if ("none" === this._element.style.display) throw new Error("Please use show on visible elements");\n      if (!this.isWithContent() || !this._isEnabled) return;\n      const t = j.trigger(this._element, this.constructor.Event.SHOW),\n            e = h(this._element),\n            i = null === e ? this._element.ownerDocument.documentElement.contains(this._element) : e.contains(this._element);\n      if (t.defaultPrevented || !i) return;\n      "tooltip" === this.constructor.NAME && this.tip && this.getTitle() !== this.tip.querySelector(an).innerHTML && (this._disposePopper(), this.tip.remove(), this.tip = null);\n\n      const n = this.getTipElement(),\n            s = (t => {\n        do {\n          t += Math.floor(1e6 * Math.random());\n        } while (document.getElementById(t));\n\n        return t;\n      })(this.constructor.NAME);\n\n      n.setAttribute("id", s), this._element.setAttribute("aria-describedby", s), this._config.animation && n.classList.add(nn);\n\n      const o = "function" == typeof this._config.placement ? this._config.placement.call(this, n, this._element) : this._config.placement,\n            r = this._getAttachment(o);\n\n      this._addAttachmentClass(r);\n\n      const {\n        container: a\n      } = this._config;\n      H.set(n, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (a.append(n), j.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = qe(this._element, n, this._getPopperConfig(r)), n.classList.add(sn);\n\n      const l = this._resolvePossibleFunction(this._config.customClass);\n\n      l && n.classList.add(...l.split(" ")), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(t => {\n        j.on(t, "mouseover", d);\n      });\n      const c = this.tip.classList.contains(nn);\n\n      this._queueCallback(() => {\n        const t = this._hoverState;\n        this._hoverState = null, j.trigger(this._element, this.constructor.Event.SHOWN), t === rn && this._leave(null, this);\n      }, this.tip, c);\n    }\n\n    hide() {\n      if (!this._popper) return;\n      const t = this.getTipElement();\n      if (j.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;\n      t.classList.remove(sn), "ontouchstart" in document.documentElement && [].concat(...document.body.children).forEach(t => j.off(t, "mouseover", d)), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1;\n      const e = this.tip.classList.contains(nn);\n      this._queueCallback(() => {\n        this._isWithActiveTrigger() || (this._hoverState !== on && t.remove(), this._cleanTipClass(), this._element.removeAttribute("aria-describedby"), j.trigger(this._element, this.constructor.Event.HIDDEN), this._disposePopper());\n      }, this.tip, e), this._hoverState = "";\n    }\n\n    update() {\n      null !== this._popper && this._popper.update();\n    }\n\n    isWithContent() {\n      return Boolean(this.getTitle());\n    }\n\n    getTipElement() {\n      if (this.tip) return this.tip;\n      const t = document.createElement("div");\n      t.innerHTML = this._config.template;\n      const e = t.children[0];\n      return this.setContent(e), e.classList.remove(nn, sn), this.tip = e, this.tip;\n    }\n\n    setContent(t) {\n      this._sanitizeAndSetContent(t, this.getTitle(), an);\n    }\n\n    _sanitizeAndSetContent(t, e, i) {\n      const n = V.findOne(i, t);\n      e || !n ? this.setElementContent(n, e) : n.remove();\n    }\n\n    setElementContent(t, e) {\n      if (null !== t) return o(e) ? (e = r(e), void (this._config.html ? e.parentNode !== t && (t.innerHTML = "", t.append(e)) : t.textContent = e.textContent)) : void (this._config.html ? (this._config.sanitize && (e = Yi(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);\n    }\n\n    getTitle() {\n      const t = this._element.getAttribute("data-bs-original-title") || this._config.title;\n\n      return this._resolvePossibleFunction(t);\n    }\n\n    updateAttachment(t) {\n      return "right" === t ? "end" : "left" === t ? "start" : t;\n    }\n\n    _initializeOnDelegatedTarget(t, e) {\n      return e || this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig());\n    }\n\n    _getOffset() {\n      const {\n        offset: t\n      } = this._config;\n      return "string" == typeof t ? t.split(",").map(t => Number.parseInt(t, 10)) : "function" == typeof t ? e => t(e, this._element) : t;\n    }\n\n    _resolvePossibleFunction(t) {\n      return "function" == typeof t ? t.call(this._element) : t;\n    }\n\n    _getPopperConfig(t) {\n      const e = {\n        placement: t,\n        modifiers: [{\n          name: "flip",\n          options: {\n            fallbackPlacements: this._config.fallbackPlacements\n          }\n        }, {\n          name: "offset",\n          options: {\n            offset: this._getOffset()\n          }\n        }, {\n          name: "preventOverflow",\n          options: {\n            boundary: this._config.boundary\n          }\n        }, {\n          name: "arrow",\n          options: {\n            element: `.${this.constructor.NAME}-arrow`\n          }\n        }, {\n          name: "onChange",\n          enabled: !0,\n          phase: "afterWrite",\n          fn: t => this._handlePopperPlacementChange(t)\n        }],\n        onFirstUpdate: t => {\n          t.options.placement !== t.placement && this._handlePopperPlacementChange(t);\n        }\n      };\n      return { ...e,\n        ...("function" == typeof this._config.popperConfig ? this._config.popperConfig(e) : this._config.popperConfig)\n      };\n    }\n\n    _addAttachmentClass(t) {\n      this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`);\n    }\n\n    _getAttachment(t) {\n      return Ji[t.toUpperCase()];\n    }\n\n    _setListeners() {\n      this._config.trigger.split(" ").forEach(t => {\n        if ("click" === t) j.on(this._element, this.constructor.Event.CLICK, this._config.selector, t => this.toggle(t));else if ("manual" !== t) {\n          const e = t === hn ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN,\n                i = t === hn ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n          j.on(this._element, e, this._config.selector, t => this._enter(t)), j.on(this._element, i, this._config.selector, t => this._leave(t));\n        }\n      }), this._hideModalHandler = () => {\n        this._element && this.hide();\n      }, j.on(this._element.closest(ln), cn, this._hideModalHandler), this._config.selector ? this._config = { ...this._config,\n        trigger: "manual",\n        selector: ""\n      } : this._fixTitle();\n    }\n\n    _fixTitle() {\n      const t = this._element.getAttribute("title"),\n            e = typeof this._element.getAttribute("data-bs-original-title");\n\n      (t || "string" !== e) && (this._element.setAttribute("data-bs-original-title", t || ""), !t || this._element.getAttribute("aria-label") || this._element.textContent || this._element.setAttribute("aria-label", t), this._element.setAttribute("title", ""));\n    }\n\n    _enter(t, e) {\n      e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger["focusin" === t.type ? dn : hn] = !0), e.getTipElement().classList.contains(sn) || e._hoverState === on ? e._hoverState = on : (clearTimeout(e._timeout), e._hoverState = on, e._config.delay && e._config.delay.show ? e._timeout = setTimeout(() => {\n        e._hoverState === on && e.show();\n      }, e._config.delay.show) : e.show());\n    }\n\n    _leave(t, e) {\n      e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger["focusout" === t.type ? dn : hn] = e._element.contains(t.relatedTarget)), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = rn, e._config.delay && e._config.delay.hide ? e._timeout = setTimeout(() => {\n        e._hoverState === rn && e.hide();\n      }, e._config.delay.hide) : e.hide());\n    }\n\n    _isWithActiveTrigger() {\n      for (const t in this._activeTrigger) if (this._activeTrigger[t]) return !0;\n\n      return !1;\n    }\n\n    _getConfig(t) {\n      const e = U.getDataAttributes(this._element);\n      return Object.keys(e).forEach(t => {\n        Gi.has(t) && delete e[t];\n      }), (t = { ...this.constructor.Default,\n        ...e,\n        ...("object" == typeof t && t ? t : {})\n      }).container = !1 === t.container ? document.body : r(t.container), "number" == typeof t.delay && (t.delay = {\n        show: t.delay,\n        hide: t.delay\n      }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), a(Qi, t, this.constructor.DefaultType), t.sanitize && (t.template = Yi(t.template, t.allowList, t.sanitizeFn)), t;\n    }\n\n    _getDelegateConfig() {\n      const t = {};\n\n      for (const e in this._config) this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);\n\n      return t;\n    }\n\n    _cleanTipClass() {\n      const t = this.getTipElement(),\n            e = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, "g"),\n            i = t.getAttribute("class").match(e);\n      null !== i && i.length > 0 && i.map(t => t.trim()).forEach(e => t.classList.remove(e));\n    }\n\n    _getBasicClassPrefix() {\n      return "bs-tooltip";\n    }\n\n    _handlePopperPlacementChange(t) {\n      const {\n        state: e\n      } = t;\n      e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));\n    }\n\n    _disposePopper() {\n      this._popper && (this._popper.destroy(), this._popper = null);\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = un.getOrCreateInstance(this, t);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);\n          e[t]();\n        }\n      });\n    }\n\n  }\n\n  g(un);\n  const fn = { ...un.Default,\n    placement: "right",\n    offset: [0, 8],\n    trigger: "click",\n    content: "",\n    template: \'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>\'\n  },\n        pn = { ...un.DefaultType,\n    content: "(string|element|function)"\n  },\n        mn = {\n    HIDE: "hide.bs.popover",\n    HIDDEN: "hidden.bs.popover",\n    SHOW: "show.bs.popover",\n    SHOWN: "shown.bs.popover",\n    INSERTED: "inserted.bs.popover",\n    CLICK: "click.bs.popover",\n    FOCUSIN: "focusin.bs.popover",\n    FOCUSOUT: "focusout.bs.popover",\n    MOUSEENTER: "mouseenter.bs.popover",\n    MOUSELEAVE: "mouseleave.bs.popover"\n  };\n\n  class gn extends un {\n    static get Default() {\n      return fn;\n    }\n\n    static get NAME() {\n      return "popover";\n    }\n\n    static get Event() {\n      return mn;\n    }\n\n    static get DefaultType() {\n      return pn;\n    }\n\n    isWithContent() {\n      return this.getTitle() || this._getContent();\n    }\n\n    setContent(t) {\n      this._sanitizeAndSetContent(t, this.getTitle(), ".popover-header"), this._sanitizeAndSetContent(t, this._getContent(), ".popover-body");\n    }\n\n    _getContent() {\n      return this._resolvePossibleFunction(this._config.content);\n    }\n\n    _getBasicClassPrefix() {\n      return "bs-popover";\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = gn.getOrCreateInstance(this, t);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);\n          e[t]();\n        }\n      });\n    }\n\n  }\n\n  g(gn);\n  const _n = "scrollspy",\n        bn = {\n    offset: 10,\n    method: "auto",\n    target: ""\n  },\n        vn = {\n    offset: "number",\n    method: "string",\n    target: "(string|element)"\n  },\n        yn = "active",\n        wn = ".nav-link, .list-group-item, .dropdown-item",\n        En = "position";\n\n  class An extends B {\n    constructor(t, e) {\n      super(t), this._scrollElement = "BODY" === this._element.tagName ? window : this._element, this._config = this._getConfig(e), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, j.on(this._scrollElement, "scroll.bs.scrollspy", () => this._process()), this.refresh(), this._process();\n    }\n\n    static get Default() {\n      return bn;\n    }\n\n    static get NAME() {\n      return _n;\n    }\n\n    refresh() {\n      const t = this._scrollElement === this._scrollElement.window ? "offset" : En,\n            e = "auto" === this._config.method ? t : this._config.method,\n            n = e === En ? this._getScrollTop() : 0;\n      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), V.find(wn, this._config.target).map(t => {\n        const s = i(t),\n              o = s ? V.findOne(s) : null;\n\n        if (o) {\n          const t = o.getBoundingClientRect();\n          if (t.width || t.height) return [U[e](o).top + n, s];\n        }\n\n        return null;\n      }).filter(t => t).sort((t, e) => t[0] - e[0]).forEach(t => {\n        this._offsets.push(t[0]), this._targets.push(t[1]);\n      });\n    }\n\n    dispose() {\n      j.off(this._scrollElement, ".bs.scrollspy"), super.dispose();\n    }\n\n    _getConfig(t) {\n      return (t = { ...bn,\n        ...U.getDataAttributes(this._element),\n        ...("object" == typeof t && t ? t : {})\n      }).target = r(t.target) || document.documentElement, a(_n, t, vn), t;\n    }\n\n    _getScrollTop() {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }\n\n    _getScrollHeight() {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n\n    _getOffsetHeight() {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }\n\n    _process() {\n      const t = this._getScrollTop() + this._config.offset,\n            e = this._getScrollHeight(),\n            i = this._config.offset + e - this._getOffsetHeight();\n\n      if (this._scrollHeight !== e && this.refresh(), t >= i) {\n        const t = this._targets[this._targets.length - 1];\n        this._activeTarget !== t && this._activate(t);\n      } else {\n        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();\n\n        for (let e = this._offsets.length; e--;) this._activeTarget !== this._targets[e] && t >= this._offsets[e] && (void 0 === this._offsets[e + 1] || t < this._offsets[e + 1]) && this._activate(this._targets[e]);\n      }\n    }\n\n    _activate(t) {\n      this._activeTarget = t, this._clear();\n      const e = wn.split(",").map(e => `${e}[data-bs-target="${t}"],${e}[href="${t}"]`),\n            i = V.findOne(e.join(","), this._config.target);\n      i.classList.add(yn), i.classList.contains("dropdown-item") ? V.findOne(".dropdown-toggle", i.closest(".dropdown")).classList.add(yn) : V.parents(i, ".nav, .list-group").forEach(t => {\n        V.prev(t, ".nav-link, .list-group-item").forEach(t => t.classList.add(yn)), V.prev(t, ".nav-item").forEach(t => {\n          V.children(t, ".nav-link").forEach(t => t.classList.add(yn));\n        });\n      }), j.trigger(this._scrollElement, "activate.bs.scrollspy", {\n        relatedTarget: t\n      });\n    }\n\n    _clear() {\n      V.find(wn, this._config.target).filter(t => t.classList.contains(yn)).forEach(t => t.classList.remove(yn));\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = An.getOrCreateInstance(this, t);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);\n          e[t]();\n        }\n      });\n    }\n\n  }\n\n  j.on(window, "load.bs.scrollspy.data-api", () => {\n    V.find(\'[data-bs-spy="scroll"]\').forEach(t => new An(t));\n  }), g(An);\n  const Tn = "active",\n        On = "fade",\n        Cn = "show",\n        kn = ".active",\n        Ln = ":scope > li > .active";\n\n  class xn extends B {\n    static get NAME() {\n      return "tab";\n    }\n\n    show() {\n      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(Tn)) return;\n      let t;\n\n      const e = n(this._element),\n            i = this._element.closest(".nav, .list-group");\n\n      if (i) {\n        const e = "UL" === i.nodeName || "OL" === i.nodeName ? Ln : kn;\n        t = V.find(e, i), t = t[t.length - 1];\n      }\n\n      const s = t ? j.trigger(t, "hide.bs.tab", {\n        relatedTarget: this._element\n      }) : null;\n      if (j.trigger(this._element, "show.bs.tab", {\n        relatedTarget: t\n      }).defaultPrevented || null !== s && s.defaultPrevented) return;\n\n      this._activate(this._element, i);\n\n      const o = () => {\n        j.trigger(t, "hidden.bs.tab", {\n          relatedTarget: this._element\n        }), j.trigger(this._element, "shown.bs.tab", {\n          relatedTarget: t\n        });\n      };\n\n      e ? this._activate(e, e.parentNode, o) : o();\n    }\n\n    _activate(t, e, i) {\n      const n = (!e || "UL" !== e.nodeName && "OL" !== e.nodeName ? V.children(e, kn) : V.find(Ln, e))[0],\n            s = i && n && n.classList.contains(On),\n            o = () => this._transitionComplete(t, n, i);\n\n      n && s ? (n.classList.remove(Cn), this._queueCallback(o, t, !0)) : o();\n    }\n\n    _transitionComplete(t, e, i) {\n      if (e) {\n        e.classList.remove(Tn);\n        const t = V.findOne(":scope > .dropdown-menu .active", e.parentNode);\n        t && t.classList.remove(Tn), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1);\n      }\n\n      t.classList.add(Tn), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), u(t), t.classList.contains(On) && t.classList.add(Cn);\n      let n = t.parentNode;\n\n      if (n && "LI" === n.nodeName && (n = n.parentNode), n && n.classList.contains("dropdown-menu")) {\n        const e = t.closest(".dropdown");\n        e && V.find(".dropdown-toggle", e).forEach(t => t.classList.add(Tn)), t.setAttribute("aria-expanded", !0);\n      }\n\n      i && i();\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = xn.getOrCreateInstance(this);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);\n          e[t]();\n        }\n      });\n    }\n\n  }\n\n  j.on(document, "click.bs.tab.data-api", \'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]\', function (t) {\n    ["A", "AREA"].includes(this.tagName) && t.preventDefault(), c(this) || xn.getOrCreateInstance(this).show();\n  }), g(xn);\n  const Dn = "toast",\n        Sn = "hide",\n        Nn = "show",\n        In = "showing",\n        Pn = {\n    animation: "boolean",\n    autohide: "boolean",\n    delay: "number"\n  },\n        jn = {\n    animation: !0,\n    autohide: !0,\n    delay: 5e3\n  };\n\n  class Mn extends B {\n    constructor(t, e) {\n      super(t), this._config = this._getConfig(e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners();\n    }\n\n    static get DefaultType() {\n      return Pn;\n    }\n\n    static get Default() {\n      return jn;\n    }\n\n    static get NAME() {\n      return Dn;\n    }\n\n    show() {\n      j.trigger(this._element, "show.bs.toast").defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add("fade"), this._element.classList.remove(Sn), u(this._element), this._element.classList.add(Nn), this._element.classList.add(In), this._queueCallback(() => {\n        this._element.classList.remove(In), j.trigger(this._element, "shown.bs.toast"), this._maybeScheduleHide();\n      }, this._element, this._config.animation));\n    }\n\n    hide() {\n      this._element.classList.contains(Nn) && (j.trigger(this._element, "hide.bs.toast").defaultPrevented || (this._element.classList.add(In), this._queueCallback(() => {\n        this._element.classList.add(Sn), this._element.classList.remove(In), this._element.classList.remove(Nn), j.trigger(this._element, "hidden.bs.toast");\n      }, this._element, this._config.animation)));\n    }\n\n    dispose() {\n      this._clearTimeout(), this._element.classList.contains(Nn) && this._element.classList.remove(Nn), super.dispose();\n    }\n\n    _getConfig(t) {\n      return t = { ...jn,\n        ...U.getDataAttributes(this._element),\n        ...("object" == typeof t && t ? t : {})\n      }, a(Dn, t, this.constructor.DefaultType), t;\n    }\n\n    _maybeScheduleHide() {\n      this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(() => {\n        this.hide();\n      }, this._config.delay)));\n    }\n\n    _onInteraction(t, e) {\n      switch (t.type) {\n        case "mouseover":\n        case "mouseout":\n          this._hasMouseInteraction = e;\n          break;\n\n        case "focusin":\n        case "focusout":\n          this._hasKeyboardInteraction = e;\n      }\n\n      if (e) return void this._clearTimeout();\n      const i = t.relatedTarget;\n      this._element === i || this._element.contains(i) || this._maybeScheduleHide();\n    }\n\n    _setListeners() {\n      j.on(this._element, "mouseover.bs.toast", t => this._onInteraction(t, !0)), j.on(this._element, "mouseout.bs.toast", t => this._onInteraction(t, !1)), j.on(this._element, "focusin.bs.toast", t => this._onInteraction(t, !0)), j.on(this._element, "focusout.bs.toast", t => this._onInteraction(t, !1));\n    }\n\n    _clearTimeout() {\n      clearTimeout(this._timeout), this._timeout = null;\n    }\n\n    static jQueryInterface(t) {\n      return this.each(function () {\n        const e = Mn.getOrCreateInstance(this, t);\n\n        if ("string" == typeof t) {\n          if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);\n          e[t](this);\n        }\n      });\n    }\n\n  }\n\n  return R(Mn), g(Mn), {\n    Alert: W,\n    Button: z,\n    Carousel: st,\n    Collapse: pt,\n    Dropdown: hi,\n    Modal: Hi,\n    Offcanvas: Fi,\n    Popover: gn,\n    ScrollSpy: An,\n    Tab: xn,\n    Toast: Mn,\n    Tooltip: un\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvanMvYm9vdHN0cmFwLmJ1bmRsZS5taW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qdXNkb2NzLWJvaWxlcnBsYXRlLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2pzL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzP2RiOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gICogQm9vdHN0cmFwIHY1LjEuMyAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDIxIFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICovXG4hZnVuY3Rpb24gKHQsIGUpIHtcbiAgXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBtb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA9IGUoKSA6IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZSkgOiAodCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzIDogdCB8fCBzZWxmKS5ib290c3RyYXAgPSBlKCk7XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgY29uc3QgdCA9IFwidHJhbnNpdGlvbmVuZFwiLFxuICAgICAgICBlID0gdCA9PiB7XG4gICAgbGV0IGUgPSB0LmdldEF0dHJpYnV0ZShcImRhdGEtYnMtdGFyZ2V0XCIpO1xuXG4gICAgaWYgKCFlIHx8IFwiI1wiID09PSBlKSB7XG4gICAgICBsZXQgaSA9IHQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgIGlmICghaSB8fCAhaS5pbmNsdWRlcyhcIiNcIikgJiYgIWkuc3RhcnRzV2l0aChcIi5cIikpIHJldHVybiBudWxsO1xuICAgICAgaS5pbmNsdWRlcyhcIiNcIikgJiYgIWkuc3RhcnRzV2l0aChcIiNcIikgJiYgKGkgPSBgIyR7aS5zcGxpdChcIiNcIilbMV19YCksIGUgPSBpICYmIFwiI1wiICE9PSBpID8gaS50cmltKCkgOiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBlO1xuICB9LFxuICAgICAgICBpID0gdCA9PiB7XG4gICAgY29uc3QgaSA9IGUodCk7XG4gICAgcmV0dXJuIGkgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpKSA/IGkgOiBudWxsO1xuICB9LFxuICAgICAgICBuID0gdCA9PiB7XG4gICAgY29uc3QgaSA9IGUodCk7XG4gICAgcmV0dXJuIGkgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGkpIDogbnVsbDtcbiAgfSxcbiAgICAgICAgcyA9IGUgPT4ge1xuICAgIGUuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQodCkpO1xuICB9LFxuICAgICAgICBvID0gdCA9PiAhKCF0IHx8IFwib2JqZWN0XCIgIT0gdHlwZW9mIHQpICYmICh2b2lkIDAgIT09IHQuanF1ZXJ5ICYmICh0ID0gdFswXSksIHZvaWQgMCAhPT0gdC5ub2RlVHlwZSksXG4gICAgICAgIHIgPSB0ID0+IG8odCkgPyB0LmpxdWVyeSA/IHRbMF0gOiB0IDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiB0Lmxlbmd0aCA+IDAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpIDogbnVsbCxcbiAgICAgICAgYSA9ICh0LCBlLCBpKSA9PiB7XG4gICAgT2JqZWN0LmtleXMoaSkuZm9yRWFjaChuID0+IHtcbiAgICAgIGNvbnN0IHMgPSBpW25dLFxuICAgICAgICAgICAgciA9IGVbbl0sXG4gICAgICAgICAgICBhID0gciAmJiBvKHIpID8gXCJlbGVtZW50XCIgOiBudWxsID09IChsID0gcikgPyBgJHtsfWAgOiB7fS50b1N0cmluZy5jYWxsKGwpLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGw7XG4gICAgICBpZiAoIW5ldyBSZWdFeHAocykudGVzdChhKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0LnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCIke259XCIgcHJvdmlkZWQgdHlwZSBcIiR7YX1cIiBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7c31cIi5gKTtcbiAgICB9KTtcbiAgfSxcbiAgICAgICAgbCA9IHQgPT4gISghbyh0KSB8fCAwID09PSB0LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKSAmJiBcInZpc2libGVcIiA9PT0gZ2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKFwidmlzaWJpbGl0eVwiKSxcbiAgICAgICAgYyA9IHQgPT4gIXQgfHwgdC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUgfHwgISF0LmNsYXNzTGlzdC5jb250YWlucyhcImRpc2FibGVkXCIpIHx8ICh2b2lkIDAgIT09IHQuZGlzYWJsZWQgPyB0LmRpc2FibGVkIDogdC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSAmJiBcImZhbHNlXCIgIT09IHQuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikpLFxuICAgICAgICBoID0gdCA9PiB7XG4gICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQuZ2V0Um9vdE5vZGUpIHtcbiAgICAgIGNvbnN0IGUgPSB0LmdldFJvb3ROb2RlKCk7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyBlIDogbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyB0IDogdC5wYXJlbnROb2RlID8gaCh0LnBhcmVudE5vZGUpIDogbnVsbDtcbiAgfSxcbiAgICAgICAgZCA9ICgpID0+IHt9LFxuICAgICAgICB1ID0gdCA9PiB7XG4gICAgdC5vZmZzZXRIZWlnaHQ7XG4gIH0sXG4gICAgICAgIGYgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgalF1ZXJ5OiB0XG4gICAgfSA9IHdpbmRvdztcbiAgICByZXR1cm4gdCAmJiAhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWJzLW5vLWpxdWVyeVwiKSA/IHQgOiBudWxsO1xuICB9LFxuICAgICAgICBwID0gW10sXG4gICAgICAgIG0gPSAoKSA9PiBcInJ0bFwiID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGlyLFxuICAgICAgICBnID0gdCA9PiB7XG4gICAgdmFyIGU7XG4gICAgZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGUgPSBmKCk7XG5cbiAgICAgIGlmIChlKSB7XG4gICAgICAgIGNvbnN0IGkgPSB0Lk5BTUUsXG4gICAgICAgICAgICAgIG4gPSBlLmZuW2ldO1xuICAgICAgICBlLmZuW2ldID0gdC5qUXVlcnlJbnRlcmZhY2UsIGUuZm5baV0uQ29uc3RydWN0b3IgPSB0LCBlLmZuW2ldLm5vQ29uZmxpY3QgPSAoKSA9PiAoZS5mbltpXSA9IG4sIHQualF1ZXJ5SW50ZXJmYWNlKTtcbiAgICAgIH1cbiAgICB9LCBcImxvYWRpbmdcIiA9PT0gZG9jdW1lbnQucmVhZHlTdGF0ZSA/IChwLmxlbmd0aCB8fCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgICBwLmZvckVhY2godCA9PiB0KCkpO1xuICAgIH0pLCBwLnB1c2goZSkpIDogZSgpO1xuICB9LFxuICAgICAgICBfID0gdCA9PiB7XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ICYmIHQoKTtcbiAgfSxcbiAgICAgICAgYiA9IChlLCBpLCBuID0gITApID0+IHtcbiAgICBpZiAoIW4pIHJldHVybiB2b2lkIF8oZSk7XG5cbiAgICBjb25zdCBvID0gKHQgPT4ge1xuICAgICAgaWYgKCF0KSByZXR1cm4gMDtcbiAgICAgIGxldCB7XG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogZSxcbiAgICAgICAgdHJhbnNpdGlvbkRlbGF5OiBpXG4gICAgICB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodCk7XG4gICAgICBjb25zdCBuID0gTnVtYmVyLnBhcnNlRmxvYXQoZSksXG4gICAgICAgICAgICBzID0gTnVtYmVyLnBhcnNlRmxvYXQoaSk7XG4gICAgICByZXR1cm4gbiB8fCBzID8gKGUgPSBlLnNwbGl0KFwiLFwiKVswXSwgaSA9IGkuc3BsaXQoXCIsXCIpWzBdLCAxZTMgKiAoTnVtYmVyLnBhcnNlRmxvYXQoZSkgKyBOdW1iZXIucGFyc2VGbG9hdChpKSkpIDogMDtcbiAgICB9KShpKSArIDU7XG5cbiAgICBsZXQgciA9ICExO1xuXG4gICAgY29uc3QgYSA9ICh7XG4gICAgICB0YXJnZXQ6IG5cbiAgICB9KSA9PiB7XG4gICAgICBuID09PSBpICYmIChyID0gITAsIGkucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LCBhKSwgXyhlKSk7XG4gICAgfTtcblxuICAgIGkuYWRkRXZlbnRMaXN0ZW5lcih0LCBhKSwgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByIHx8IHMoaSk7XG4gICAgfSwgbyk7XG4gIH0sXG4gICAgICAgIHYgPSAodCwgZSwgaSwgbikgPT4ge1xuICAgIGxldCBzID0gdC5pbmRleE9mKGUpO1xuICAgIGlmICgtMSA9PT0gcykgcmV0dXJuIHRbIWkgJiYgbiA/IHQubGVuZ3RoIC0gMSA6IDBdO1xuICAgIGNvbnN0IG8gPSB0Lmxlbmd0aDtcbiAgICByZXR1cm4gcyArPSBpID8gMSA6IC0xLCBuICYmIChzID0gKHMgKyBvKSAlIG8pLCB0W01hdGgubWF4KDAsIE1hdGgubWluKHMsIG8gLSAxKSldO1xuICB9LFxuICAgICAgICB5ID0gL1teLl0qKD89XFwuLiopXFwufC4qLyxcbiAgICAgICAgdyA9IC9cXC4uKi8sXG4gICAgICAgIEUgPSAvOjpcXGQrJC8sXG4gICAgICAgIEEgPSB7fTtcblxuICBsZXQgVCA9IDE7XG4gIGNvbnN0IE8gPSB7XG4gICAgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcbiAgICBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJcbiAgfSxcbiAgICAgICAgQyA9IC9eKG1vdXNlZW50ZXJ8bW91c2VsZWF2ZSkvaSxcbiAgICAgICAgayA9IG5ldyBTZXQoW1wiY2xpY2tcIiwgXCJkYmxjbGlja1wiLCBcIm1vdXNldXBcIiwgXCJtb3VzZWRvd25cIiwgXCJjb250ZXh0bWVudVwiLCBcIm1vdXNld2hlZWxcIiwgXCJET01Nb3VzZVNjcm9sbFwiLCBcIm1vdXNlb3ZlclwiLCBcIm1vdXNlb3V0XCIsIFwibW91c2Vtb3ZlXCIsIFwic2VsZWN0c3RhcnRcIiwgXCJzZWxlY3RlbmRcIiwgXCJrZXlkb3duXCIsIFwia2V5cHJlc3NcIiwgXCJrZXl1cFwiLCBcIm9yaWVudGF0aW9uY2hhbmdlXCIsIFwidG91Y2hzdGFydFwiLCBcInRvdWNobW92ZVwiLCBcInRvdWNoZW5kXCIsIFwidG91Y2hjYW5jZWxcIiwgXCJwb2ludGVyZG93blwiLCBcInBvaW50ZXJtb3ZlXCIsIFwicG9pbnRlcnVwXCIsIFwicG9pbnRlcmxlYXZlXCIsIFwicG9pbnRlcmNhbmNlbFwiLCBcImdlc3R1cmVzdGFydFwiLCBcImdlc3R1cmVjaGFuZ2VcIiwgXCJnZXN0dXJlZW5kXCIsIFwiZm9jdXNcIiwgXCJibHVyXCIsIFwiY2hhbmdlXCIsIFwicmVzZXRcIiwgXCJzZWxlY3RcIiwgXCJzdWJtaXRcIiwgXCJmb2N1c2luXCIsIFwiZm9jdXNvdXRcIiwgXCJsb2FkXCIsIFwidW5sb2FkXCIsIFwiYmVmb3JldW5sb2FkXCIsIFwicmVzaXplXCIsIFwibW92ZVwiLCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgXCJyZWFkeXN0YXRlY2hhbmdlXCIsIFwiZXJyb3JcIiwgXCJhYm9ydFwiLCBcInNjcm9sbFwiXSk7XG5cbiAgZnVuY3Rpb24gTCh0LCBlKSB7XG4gICAgcmV0dXJuIGUgJiYgYCR7ZX06OiR7VCsrfWAgfHwgdC51aWRFdmVudCB8fCBUKys7XG4gIH1cblxuICBmdW5jdGlvbiB4KHQpIHtcbiAgICBjb25zdCBlID0gTCh0KTtcbiAgICByZXR1cm4gdC51aWRFdmVudCA9IGUsIEFbZV0gPSBBW2VdIHx8IHt9LCBBW2VdO1xuICB9XG5cbiAgZnVuY3Rpb24gRCh0LCBlLCBpID0gbnVsbCkge1xuICAgIGNvbnN0IG4gPSBPYmplY3Qua2V5cyh0KTtcblxuICAgIGZvciAobGV0IHMgPSAwLCBvID0gbi5sZW5ndGg7IHMgPCBvOyBzKyspIHtcbiAgICAgIGNvbnN0IG8gPSB0W25bc11dO1xuICAgICAgaWYgKG8ub3JpZ2luYWxIYW5kbGVyID09PSBlICYmIG8uZGVsZWdhdGlvblNlbGVjdG9yID09PSBpKSByZXR1cm4gbztcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFModCwgZSwgaSkge1xuICAgIGNvbnN0IG4gPSBcInN0cmluZ1wiID09IHR5cGVvZiBlLFxuICAgICAgICAgIHMgPSBuID8gaSA6IGU7XG4gICAgbGV0IG8gPSBQKHQpO1xuICAgIHJldHVybiBrLmhhcyhvKSB8fCAobyA9IHQpLCBbbiwgcywgb107XG4gIH1cblxuICBmdW5jdGlvbiBOKHQsIGUsIGksIG4sIHMpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSB8fCAhdCkgcmV0dXJuO1xuXG4gICAgaWYgKGkgfHwgKGkgPSBuLCBuID0gbnVsbCksIEMudGVzdChlKSkge1xuICAgICAgY29uc3QgdCA9IHQgPT4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yZWxhdGVkVGFyZ2V0ICE9PSBlLmRlbGVnYXRlVGFyZ2V0ICYmICFlLmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpIHJldHVybiB0LmNhbGwodGhpcywgZSk7XG4gICAgICB9O1xuXG4gICAgICBuID8gbiA9IHQobikgOiBpID0gdChpKTtcbiAgICB9XG5cbiAgICBjb25zdCBbbywgciwgYV0gPSBTKGUsIGksIG4pLFxuICAgICAgICAgIGwgPSB4KHQpLFxuICAgICAgICAgIGMgPSBsW2FdIHx8IChsW2FdID0ge30pLFxuICAgICAgICAgIGggPSBEKGMsIHIsIG8gPyBpIDogbnVsbCk7XG4gICAgaWYgKGgpIHJldHVybiB2b2lkIChoLm9uZU9mZiA9IGgub25lT2ZmICYmIHMpO1xuICAgIGNvbnN0IGQgPSBMKHIsIGUucmVwbGFjZSh5LCBcIlwiKSksXG4gICAgICAgICAgdSA9IG8gPyBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG4ocykge1xuICAgICAgICBjb25zdCBvID0gdC5xdWVyeVNlbGVjdG9yQWxsKGUpO1xuXG4gICAgICAgIGZvciAobGV0IHtcbiAgICAgICAgICB0YXJnZXQ6IHJcbiAgICAgICAgfSA9IHM7IHIgJiYgciAhPT0gdGhpczsgciA9IHIucGFyZW50Tm9kZSkgZm9yIChsZXQgYSA9IG8ubGVuZ3RoOyBhLS07KSBpZiAob1thXSA9PT0gcikgcmV0dXJuIHMuZGVsZWdhdGVUYXJnZXQgPSByLCBuLm9uZU9mZiAmJiBqLm9mZih0LCBzLnR5cGUsIGUsIGkpLCBpLmFwcGx5KHIsIFtzXSk7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0odCwgaSwgbikgOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGkobikge1xuICAgICAgICByZXR1cm4gbi5kZWxlZ2F0ZVRhcmdldCA9IHQsIGkub25lT2ZmICYmIGoub2ZmKHQsIG4udHlwZSwgZSksIGUuYXBwbHkodCwgW25dKTtcbiAgICAgIH07XG4gICAgfSh0LCBpKTtcbiAgICB1LmRlbGVnYXRpb25TZWxlY3RvciA9IG8gPyBpIDogbnVsbCwgdS5vcmlnaW5hbEhhbmRsZXIgPSByLCB1Lm9uZU9mZiA9IHMsIHUudWlkRXZlbnQgPSBkLCBjW2RdID0gdSwgdC5hZGRFdmVudExpc3RlbmVyKGEsIHUsIG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gSSh0LCBlLCBpLCBuLCBzKSB7XG4gICAgY29uc3QgbyA9IEQoZVtpXSwgbiwgcyk7XG4gICAgbyAmJiAodC5yZW1vdmVFdmVudExpc3RlbmVyKGksIG8sIEJvb2xlYW4ocykpLCBkZWxldGUgZVtpXVtvLnVpZEV2ZW50XSk7XG4gIH1cblxuICBmdW5jdGlvbiBQKHQpIHtcbiAgICByZXR1cm4gdCA9IHQucmVwbGFjZSh3LCBcIlwiKSwgT1t0XSB8fCB0O1xuICB9XG5cbiAgY29uc3QgaiA9IHtcbiAgICBvbih0LCBlLCBpLCBuKSB7XG4gICAgICBOKHQsIGUsIGksIG4sICExKTtcbiAgICB9LFxuXG4gICAgb25lKHQsIGUsIGksIG4pIHtcbiAgICAgIE4odCwgZSwgaSwgbiwgITApO1xuICAgIH0sXG5cbiAgICBvZmYodCwgZSwgaSwgbikge1xuICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgfHwgIXQpIHJldHVybjtcbiAgICAgIGNvbnN0IFtzLCBvLCByXSA9IFMoZSwgaSwgbiksXG4gICAgICAgICAgICBhID0gciAhPT0gZSxcbiAgICAgICAgICAgIGwgPSB4KHQpLFxuICAgICAgICAgICAgYyA9IGUuc3RhcnRzV2l0aChcIi5cIik7XG5cbiAgICAgIGlmICh2b2lkIDAgIT09IG8pIHtcbiAgICAgICAgaWYgKCFsIHx8ICFsW3JdKSByZXR1cm47XG4gICAgICAgIHJldHVybiB2b2lkIEkodCwgbCwgciwgbywgcyA/IGkgOiBudWxsKTtcbiAgICAgIH1cblxuICAgICAgYyAmJiBPYmplY3Qua2V5cyhsKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAhZnVuY3Rpb24gKHQsIGUsIGksIG4pIHtcbiAgICAgICAgICBjb25zdCBzID0gZVtpXSB8fCB7fTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhzKS5mb3JFYWNoKG8gPT4ge1xuICAgICAgICAgICAgaWYgKG8uaW5jbHVkZXMobikpIHtcbiAgICAgICAgICAgICAgY29uc3QgbiA9IHNbb107XG4gICAgICAgICAgICAgIEkodCwgZSwgaSwgbi5vcmlnaW5hbEhhbmRsZXIsIG4uZGVsZWdhdGlvblNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSh0LCBsLCBpLCBlLnNsaWNlKDEpKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgaCA9IGxbcl0gfHwge307XG4gICAgICBPYmplY3Qua2V5cyhoKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICBjb25zdCBuID0gaS5yZXBsYWNlKEUsIFwiXCIpO1xuXG4gICAgICAgIGlmICghYSB8fCBlLmluY2x1ZGVzKG4pKSB7XG4gICAgICAgICAgY29uc3QgZSA9IGhbaV07XG4gICAgICAgICAgSSh0LCBsLCByLCBlLm9yaWdpbmFsSGFuZGxlciwgZS5kZWxlZ2F0aW9uU2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgdHJpZ2dlcih0LCBlLCBpKSB7XG4gICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSB8fCAhdCkgcmV0dXJuIG51bGw7XG4gICAgICBjb25zdCBuID0gZigpLFxuICAgICAgICAgICAgcyA9IFAoZSksXG4gICAgICAgICAgICBvID0gZSAhPT0gcyxcbiAgICAgICAgICAgIHIgPSBrLmhhcyhzKTtcbiAgICAgIGxldCBhLFxuICAgICAgICAgIGwgPSAhMCxcbiAgICAgICAgICBjID0gITAsXG4gICAgICAgICAgaCA9ICExLFxuICAgICAgICAgIGQgPSBudWxsO1xuICAgICAgcmV0dXJuIG8gJiYgbiAmJiAoYSA9IG4uRXZlbnQoZSwgaSksIG4odCkudHJpZ2dlcihhKSwgbCA9ICFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCksIGMgPSAhYS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpLCBoID0gYS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSksIHIgPyAoZCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiSFRNTEV2ZW50c1wiKSwgZC5pbml0RXZlbnQocywgbCwgITApKSA6IGQgPSBuZXcgQ3VzdG9tRXZlbnQoZSwge1xuICAgICAgICBidWJibGVzOiBsLFxuICAgICAgICBjYW5jZWxhYmxlOiAhMFxuICAgICAgfSksIHZvaWQgMCAhPT0gaSAmJiBPYmplY3Qua2V5cyhpKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZCwgdCwge1xuICAgICAgICAgIGdldDogKCkgPT4gaVt0XVxuICAgICAgICB9KTtcbiAgICAgIH0pLCBoICYmIGQucHJldmVudERlZmF1bHQoKSwgYyAmJiB0LmRpc3BhdGNoRXZlbnQoZCksIGQuZGVmYXVsdFByZXZlbnRlZCAmJiB2b2lkIDAgIT09IGEgJiYgYS5wcmV2ZW50RGVmYXVsdCgpLCBkO1xuICAgIH1cblxuICB9LFxuICAgICAgICBNID0gbmV3IE1hcCgpLFxuICAgICAgICBIID0ge1xuICAgIHNldCh0LCBlLCBpKSB7XG4gICAgICBNLmhhcyh0KSB8fCBNLnNldCh0LCBuZXcgTWFwKCkpO1xuICAgICAgY29uc3QgbiA9IE0uZ2V0KHQpO1xuICAgICAgbi5oYXMoZSkgfHwgMCA9PT0gbi5zaXplID8gbi5zZXQoZSwgaSkgOiBjb25zb2xlLmVycm9yKGBCb290c3RyYXAgZG9lc24ndCBhbGxvdyBtb3JlIHRoYW4gb25lIGluc3RhbmNlIHBlciBlbGVtZW50LiBCb3VuZCBpbnN0YW5jZTogJHtBcnJheS5mcm9tKG4ua2V5cygpKVswXX0uYCk7XG4gICAgfSxcblxuICAgIGdldDogKHQsIGUpID0+IE0uaGFzKHQpICYmIE0uZ2V0KHQpLmdldChlKSB8fCBudWxsLFxuXG4gICAgcmVtb3ZlKHQsIGUpIHtcbiAgICAgIGlmICghTS5oYXModCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGkgPSBNLmdldCh0KTtcbiAgICAgIGkuZGVsZXRlKGUpLCAwID09PSBpLnNpemUgJiYgTS5kZWxldGUodCk7XG4gICAgfVxuXG4gIH07XG5cbiAgY2xhc3MgQiB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgKHQgPSByKHQpKSAmJiAodGhpcy5fZWxlbWVudCA9IHQsIEguc2V0KHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpKTtcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgSC5yZW1vdmUodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSksIGoub2ZmKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRVZFTlRfS0VZKSwgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgdGhpc1t0XSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfcXVldWVDYWxsYmFjayh0LCBlLCBpID0gITApIHtcbiAgICAgIGIodCwgZSwgaSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEluc3RhbmNlKHQpIHtcbiAgICAgIHJldHVybiBILmdldChyKHQpLCB0aGlzLkRBVEFfS0VZKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0T3JDcmVhdGVJbnN0YW5jZSh0LCBlID0ge30pIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEluc3RhbmNlKHQpIHx8IG5ldyB0aGlzKHQsIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgPyBlIDogbnVsbCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgICAgcmV0dXJuIFwiNS4xLjNcIjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIGltcGxlbWVudCB0aGUgc3RhdGljIG1ldGhvZCBcIk5BTUVcIiwgZm9yIGVhY2ggY29tcG9uZW50IScpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgREFUQV9LRVkoKSB7XG4gICAgICByZXR1cm4gYGJzLiR7dGhpcy5OQU1FfWA7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBFVkVOVF9LRVkoKSB7XG4gICAgICByZXR1cm4gYC4ke3RoaXMuREFUQV9LRVl9YDtcbiAgICB9XG5cbiAgfVxuXG4gIGNvbnN0IFIgPSAodCwgZSA9IFwiaGlkZVwiKSA9PiB7XG4gICAgY29uc3QgaSA9IGBjbGljay5kaXNtaXNzJHt0LkVWRU5UX0tFWX1gLFxuICAgICAgICAgIHMgPSB0Lk5BTUU7XG4gICAgai5vbihkb2N1bWVudCwgaSwgYFtkYXRhLWJzLWRpc21pc3M9XCIke3N9XCJdYCwgZnVuY3Rpb24gKGkpIHtcbiAgICAgIGlmIChbXCJBXCIsIFwiQVJFQVwiXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpICYmIGkucHJldmVudERlZmF1bHQoKSwgYyh0aGlzKSkgcmV0dXJuO1xuICAgICAgY29uc3QgbyA9IG4odGhpcykgfHwgdGhpcy5jbG9zZXN0KGAuJHtzfWApO1xuICAgICAgdC5nZXRPckNyZWF0ZUluc3RhbmNlKG8pW2VdKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgY2xhc3MgVyBleHRlbmRzIEIge1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICAgIHJldHVybiBcImFsZXJ0XCI7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICBpZiAoai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwiY2xvc2UuYnMuYWxlcnRcIikuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpO1xuXG4gICAgICBjb25zdCB0ID0gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpO1xuXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHRoaXMuX2Rlc3Ryb3lFbGVtZW50KCksIHRoaXMuX2VsZW1lbnQsIHQpO1xuICAgIH1cblxuICAgIF9kZXN0cm95RWxlbWVudCgpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCksIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcImNsb3NlZC5icy5hbGVydFwiKSwgdGhpcy5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGpRdWVyeUludGVyZmFjZSh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZSA9IFcuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKTtcblxuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGVbdF0gfHwgdC5zdGFydHNXaXRoKFwiX1wiKSB8fCBcImNvbnN0cnVjdG9yXCIgPT09IHQpIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO1xuICAgICAgICAgIGVbdF0odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgUihXLCBcImNsb3NlXCIpLCBnKFcpO1xuICBjb25zdCAkID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvblwiXSc7XG5cbiAgY2xhc3MgeiBleHRlbmRzIEIge1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICAgIHJldHVybiBcImJ1dHRvblwiO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1wcmVzc2VkXCIsIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGpRdWVyeUludGVyZmFjZSh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZSA9IHouZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKTtcbiAgICAgICAgXCJ0b2dnbGVcIiA9PT0gdCAmJiBlW3RdKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHEodCkge1xuICAgIHJldHVybiBcInRydWVcIiA9PT0gdCB8fCBcImZhbHNlXCIgIT09IHQgJiYgKHQgPT09IE51bWJlcih0KS50b1N0cmluZygpID8gTnVtYmVyKHQpIDogXCJcIiA9PT0gdCB8fCBcIm51bGxcIiA9PT0gdCA/IG51bGwgOiB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEYodCkge1xuICAgIHJldHVybiB0LnJlcGxhY2UoL1tBLVpdL2csIHQgPT4gYC0ke3QudG9Mb3dlckNhc2UoKX1gKTtcbiAgfVxuXG4gIGoub24oZG9jdW1lbnQsIFwiY2xpY2suYnMuYnV0dG9uLmRhdGEtYXBpXCIsICQsIHQgPT4ge1xuICAgIHQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBlID0gdC50YXJnZXQuY2xvc2VzdCgkKTtcbiAgICB6LmdldE9yQ3JlYXRlSW5zdGFuY2UoZSkudG9nZ2xlKCk7XG4gIH0pLCBnKHopO1xuICBjb25zdCBVID0ge1xuICAgIHNldERhdGFBdHRyaWJ1dGUodCwgZSwgaSkge1xuICAgICAgdC5zZXRBdHRyaWJ1dGUoYGRhdGEtYnMtJHtGKGUpfWAsIGkpO1xuICAgIH0sXG5cbiAgICByZW1vdmVEYXRhQXR0cmlidXRlKHQsIGUpIHtcbiAgICAgIHQucmVtb3ZlQXR0cmlidXRlKGBkYXRhLWJzLSR7RihlKX1gKTtcbiAgICB9LFxuXG4gICAgZ2V0RGF0YUF0dHJpYnV0ZXModCkge1xuICAgICAgaWYgKCF0KSByZXR1cm4ge307XG4gICAgICBjb25zdCBlID0ge307XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModC5kYXRhc2V0KS5maWx0ZXIodCA9PiB0LnN0YXJ0c1dpdGgoXCJic1wiKSkuZm9yRWFjaChpID0+IHtcbiAgICAgICAgbGV0IG4gPSBpLnJlcGxhY2UoL15icy8sIFwiXCIpO1xuICAgICAgICBuID0gbi5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIG4uc2xpY2UoMSwgbi5sZW5ndGgpLCBlW25dID0gcSh0LmRhdGFzZXRbaV0pO1xuICAgICAgfSksIGU7XG4gICAgfSxcblxuICAgIGdldERhdGFBdHRyaWJ1dGU6ICh0LCBlKSA9PiBxKHQuZ2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7RihlKX1gKSksXG5cbiAgICBvZmZzZXQodCkge1xuICAgICAgY29uc3QgZSA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IGUudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgICBsZWZ0OiBlLmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXRcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHBvc2l0aW9uOiB0ID0+ICh7XG4gICAgICB0b3A6IHQub2Zmc2V0VG9wLFxuICAgICAgbGVmdDogdC5vZmZzZXRMZWZ0XG4gICAgfSlcbiAgfSxcbiAgICAgICAgViA9IHtcbiAgICBmaW5kOiAodCwgZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgPT4gW10uY29uY2F0KC4uLkVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbChlLCB0KSksXG4gICAgZmluZE9uZTogKHQsIGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpID0+IEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IuY2FsbChlLCB0KSxcbiAgICBjaGlsZHJlbjogKHQsIGUpID0+IFtdLmNvbmNhdCguLi50LmNoaWxkcmVuKS5maWx0ZXIodCA9PiB0Lm1hdGNoZXMoZSkpLFxuXG4gICAgcGFyZW50cyh0LCBlKSB7XG4gICAgICBjb25zdCBpID0gW107XG4gICAgICBsZXQgbiA9IHQucGFyZW50Tm9kZTtcblxuICAgICAgZm9yICg7IG4gJiYgbi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgMyAhPT0gbi5ub2RlVHlwZTspIG4ubWF0Y2hlcyhlKSAmJiBpLnB1c2gobiksIG4gPSBuLnBhcmVudE5vZGU7XG5cbiAgICAgIHJldHVybiBpO1xuICAgIH0sXG5cbiAgICBwcmV2KHQsIGUpIHtcbiAgICAgIGxldCBpID0gdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gICAgICBmb3IgKDsgaTspIHtcbiAgICAgICAgaWYgKGkubWF0Y2hlcyhlKSkgcmV0dXJuIFtpXTtcbiAgICAgICAgaSA9IGkucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG5cbiAgICBuZXh0KHQsIGUpIHtcbiAgICAgIGxldCBpID0gdC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgIGZvciAoOyBpOykge1xuICAgICAgICBpZiAoaS5tYXRjaGVzKGUpKSByZXR1cm4gW2ldO1xuICAgICAgICBpID0gaS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuXG4gICAgZm9jdXNhYmxlQ2hpbGRyZW4odCkge1xuICAgICAgY29uc3QgZSA9IFtcImFcIiwgXCJidXR0b25cIiwgXCJpbnB1dFwiLCBcInRleHRhcmVhXCIsIFwic2VsZWN0XCIsIFwiZGV0YWlsc1wiLCBcIlt0YWJpbmRleF1cIiwgJ1tjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdJ10ubWFwKHQgPT4gYCR7dH06bm90KFt0YWJpbmRleF49XCItXCJdKWApLmpvaW4oXCIsIFwiKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQoZSwgdCkuZmlsdGVyKHQgPT4gIWModCkgJiYgbCh0KSk7XG4gICAgfVxuXG4gIH0sXG4gICAgICAgIEsgPSBcImNhcm91c2VsXCIsXG4gICAgICAgIFggPSB7XG4gICAgaW50ZXJ2YWw6IDVlMyxcbiAgICBrZXlib2FyZDogITAsXG4gICAgc2xpZGU6ICExLFxuICAgIHBhdXNlOiBcImhvdmVyXCIsXG4gICAgd3JhcDogITAsXG4gICAgdG91Y2g6ICEwXG4gIH0sXG4gICAgICAgIFkgPSB7XG4gICAgaW50ZXJ2YWw6IFwiKG51bWJlcnxib29sZWFuKVwiLFxuICAgIGtleWJvYXJkOiBcImJvb2xlYW5cIixcbiAgICBzbGlkZTogXCIoYm9vbGVhbnxzdHJpbmcpXCIsXG4gICAgcGF1c2U6IFwiKHN0cmluZ3xib29sZWFuKVwiLFxuICAgIHdyYXA6IFwiYm9vbGVhblwiLFxuICAgIHRvdWNoOiBcImJvb2xlYW5cIlxuICB9LFxuICAgICAgICBRID0gXCJuZXh0XCIsXG4gICAgICAgIEcgPSBcInByZXZcIixcbiAgICAgICAgWiA9IFwibGVmdFwiLFxuICAgICAgICBKID0gXCJyaWdodFwiLFxuICAgICAgICB0dCA9IHtcbiAgICBBcnJvd0xlZnQ6IEosXG4gICAgQXJyb3dSaWdodDogWlxuICB9LFxuICAgICAgICBldCA9IFwic2xpZC5icy5jYXJvdXNlbFwiLFxuICAgICAgICBpdCA9IFwiYWN0aXZlXCIsXG4gICAgICAgIG50ID0gXCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIjtcblxuICBjbGFzcyBzdCBleHRlbmRzIEIge1xuICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcbiAgICAgIHN1cGVyKHQpLCB0aGlzLl9pdGVtcyA9IG51bGwsIHRoaXMuX2ludGVydmFsID0gbnVsbCwgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGwsIHRoaXMuX2lzUGF1c2VkID0gITEsIHRoaXMuX2lzU2xpZGluZyA9ICExLCB0aGlzLnRvdWNoVGltZW91dCA9IG51bGwsIHRoaXMudG91Y2hTdGFydFggPSAwLCB0aGlzLnRvdWNoRGVsdGFYID0gMCwgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGUpLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IFYuZmluZE9uZShcIi5jYXJvdXNlbC1pbmRpY2F0b3JzXCIsIHRoaXMuX2VsZW1lbnQpLCB0aGlzLl90b3VjaFN1cHBvcnRlZCA9IFwib250b3VjaHN0YXJ0XCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAsIHRoaXMuX3BvaW50ZXJFdmVudCA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCksIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgICAgcmV0dXJuIFg7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgICAgcmV0dXJuIEs7XG4gICAgfVxuXG4gICAgbmV4dCgpIHtcbiAgICAgIHRoaXMuX3NsaWRlKFEpO1xuICAgIH1cblxuICAgIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAgICFkb2N1bWVudC5oaWRkZW4gJiYgbCh0aGlzLl9lbGVtZW50KSAmJiB0aGlzLm5leHQoKTtcbiAgICB9XG5cbiAgICBwcmV2KCkge1xuICAgICAgdGhpcy5fc2xpZGUoRyk7XG4gICAgfVxuXG4gICAgcGF1c2UodCkge1xuICAgICAgdCB8fCAodGhpcy5faXNQYXVzZWQgPSAhMCksIFYuZmluZE9uZShcIi5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXZcIiwgdGhpcy5fZWxlbWVudCkgJiYgKHModGhpcy5fZWxlbWVudCksIHRoaXMuY3ljbGUoITApKSwgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICB9XG5cbiAgICBjeWNsZSh0KSB7XG4gICAgICB0IHx8ICh0aGlzLl9pc1BhdXNlZCA9ICExKSwgdGhpcy5faW50ZXJ2YWwgJiYgKGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpLCB0aGlzLl9pbnRlcnZhbCA9IG51bGwpLCB0aGlzLl9jb25maWcgJiYgdGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCAmJiAodGhpcy5fdXBkYXRlSW50ZXJ2YWwoKSwgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCkpO1xuICAgIH1cblxuICAgIHRvKHQpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBWLmZpbmRPbmUobnQsIHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICBjb25zdCBlID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2FjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICBpZiAodCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgdCA8IDApIHJldHVybjtcbiAgICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHJldHVybiB2b2lkIGoub25lKHRoaXMuX2VsZW1lbnQsIGV0LCAoKSA9PiB0aGlzLnRvKHQpKTtcbiAgICAgIGlmIChlID09PSB0KSByZXR1cm4gdGhpcy5wYXVzZSgpLCB2b2lkIHRoaXMuY3ljbGUoKTtcbiAgICAgIGNvbnN0IGkgPSB0ID4gZSA/IFEgOiBHO1xuXG4gICAgICB0aGlzLl9zbGlkZShpLCB0aGlzLl9pdGVtc1t0XSk7XG4gICAgfVxuXG4gICAgX2dldENvbmZpZyh0KSB7XG4gICAgICByZXR1cm4gdCA9IHsgLi4uWCxcbiAgICAgICAgLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgICAgLi4uKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgPyB0IDoge30pXG4gICAgICB9LCBhKEssIHQsIFkpLCB0O1xuICAgIH1cblxuICAgIF9oYW5kbGVTd2lwZSgpIHtcbiAgICAgIGNvbnN0IHQgPSBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtcbiAgICAgIGlmICh0IDw9IDQwKSByZXR1cm47XG4gICAgICBjb25zdCBlID0gdCAvIHRoaXMudG91Y2hEZWx0YVg7XG4gICAgICB0aGlzLnRvdWNoRGVsdGFYID0gMCwgZSAmJiB0aGlzLl9zbGlkZShlID4gMCA/IEogOiBaKTtcbiAgICB9XG5cbiAgICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgai5vbih0aGlzLl9lbGVtZW50LCBcImtleWRvd24uYnMuY2Fyb3VzZWxcIiwgdCA9PiB0aGlzLl9rZXlkb3duKHQpKSwgXCJob3ZlclwiID09PSB0aGlzLl9jb25maWcucGF1c2UgJiYgKGoub24odGhpcy5fZWxlbWVudCwgXCJtb3VzZWVudGVyLmJzLmNhcm91c2VsXCIsIHQgPT4gdGhpcy5wYXVzZSh0KSksIGoub24odGhpcy5fZWxlbWVudCwgXCJtb3VzZWxlYXZlLmJzLmNhcm91c2VsXCIsIHQgPT4gdGhpcy5jeWNsZSh0KSkpLCB0aGlzLl9jb25maWcudG91Y2ggJiYgdGhpcy5fdG91Y2hTdXBwb3J0ZWQgJiYgdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIF9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgY29uc3QgdCA9IHQgPT4gdGhpcy5fcG9pbnRlckV2ZW50ICYmIChcInBlblwiID09PSB0LnBvaW50ZXJUeXBlIHx8IFwidG91Y2hcIiA9PT0gdC5wb2ludGVyVHlwZSksXG4gICAgICAgICAgICBlID0gZSA9PiB7XG4gICAgICAgIHQoZSkgPyB0aGlzLnRvdWNoU3RhcnRYID0gZS5jbGllbnRYIDogdGhpcy5fcG9pbnRlckV2ZW50IHx8ICh0aGlzLnRvdWNoU3RhcnRYID0gZS50b3VjaGVzWzBdLmNsaWVudFgpO1xuICAgICAgfSxcbiAgICAgICAgICAgIGkgPSB0ID0+IHtcbiAgICAgICAgdGhpcy50b3VjaERlbHRhWCA9IHQudG91Y2hlcyAmJiB0LnRvdWNoZXMubGVuZ3RoID4gMSA/IDAgOiB0LnRvdWNoZXNbMF0uY2xpZW50WCAtIHRoaXMudG91Y2hTdGFydFg7XG4gICAgICB9LFxuICAgICAgICAgICAgbiA9IGUgPT4ge1xuICAgICAgICB0KGUpICYmICh0aGlzLnRvdWNoRGVsdGFYID0gZS5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WCksIHRoaXMuX2hhbmRsZVN3aXBlKCksIFwiaG92ZXJcIiA9PT0gdGhpcy5fY29uZmlnLnBhdXNlICYmICh0aGlzLnBhdXNlKCksIHRoaXMudG91Y2hUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoVGltZW91dCksIHRoaXMudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dCh0ID0+IHRoaXMuY3ljbGUodCksIDUwMCArIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCkpO1xuICAgICAgfTtcblxuICAgICAgVi5maW5kKFwiLmNhcm91c2VsLWl0ZW0gaW1nXCIsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2godCA9PiB7XG4gICAgICAgIGoub24odCwgXCJkcmFnc3RhcnQuYnMuY2Fyb3VzZWxcIiwgdCA9PiB0LnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgfSksIHRoaXMuX3BvaW50ZXJFdmVudCA/IChqLm9uKHRoaXMuX2VsZW1lbnQsIFwicG9pbnRlcmRvd24uYnMuY2Fyb3VzZWxcIiwgdCA9PiBlKHQpKSwgai5vbih0aGlzLl9lbGVtZW50LCBcInBvaW50ZXJ1cC5icy5jYXJvdXNlbFwiLCB0ID0+IG4odCkpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwb2ludGVyLWV2ZW50XCIpKSA6IChqLm9uKHRoaXMuX2VsZW1lbnQsIFwidG91Y2hzdGFydC5icy5jYXJvdXNlbFwiLCB0ID0+IGUodCkpLCBqLm9uKHRoaXMuX2VsZW1lbnQsIFwidG91Y2htb3ZlLmJzLmNhcm91c2VsXCIsIHQgPT4gaSh0KSksIGoub24odGhpcy5fZWxlbWVudCwgXCJ0b3VjaGVuZC5icy5jYXJvdXNlbFwiLCB0ID0+IG4odCkpKTtcbiAgICB9XG5cbiAgICBfa2V5ZG93bih0KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdCh0LnRhcmdldC50YWdOYW1lKSkgcmV0dXJuO1xuICAgICAgY29uc3QgZSA9IHR0W3Qua2V5XTtcbiAgICAgIGUgJiYgKHQucHJldmVudERlZmF1bHQoKSwgdGhpcy5fc2xpZGUoZSkpO1xuICAgIH1cblxuICAgIF9nZXRJdGVtSW5kZXgodCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zID0gdCAmJiB0LnBhcmVudE5vZGUgPyBWLmZpbmQoXCIuY2Fyb3VzZWwtaXRlbVwiLCB0LnBhcmVudE5vZGUpIDogW10sIHRoaXMuX2l0ZW1zLmluZGV4T2YodCk7XG4gICAgfVxuXG4gICAgX2dldEl0ZW1CeU9yZGVyKHQsIGUpIHtcbiAgICAgIGNvbnN0IGkgPSB0ID09PSBRO1xuICAgICAgcmV0dXJuIHYodGhpcy5faXRlbXMsIGUsIGksIHRoaXMuX2NvbmZpZy53cmFwKTtcbiAgICB9XG5cbiAgICBfdHJpZ2dlclNsaWRlRXZlbnQodCwgZSkge1xuICAgICAgY29uc3QgaSA9IHRoaXMuX2dldEl0ZW1JbmRleCh0KSxcbiAgICAgICAgICAgIG4gPSB0aGlzLl9nZXRJdGVtSW5kZXgoVi5maW5kT25lKG50LCB0aGlzLl9lbGVtZW50KSk7XG5cbiAgICAgIHJldHVybiBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgXCJzbGlkZS5icy5jYXJvdXNlbFwiLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHQsXG4gICAgICAgIGRpcmVjdGlvbjogZSxcbiAgICAgICAgZnJvbTogbixcbiAgICAgICAgdG86IGlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KHQpIHtcbiAgICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgICBjb25zdCBlID0gVi5maW5kT25lKFwiLmFjdGl2ZVwiLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCk7XG4gICAgICAgIGUuY2xhc3NMaXN0LnJlbW92ZShpdCksIGUucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIpO1xuICAgICAgICBjb25zdCBpID0gVi5maW5kKFwiW2RhdGEtYnMtdGFyZ2V0XVwiLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCk7XG5cbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBpLmxlbmd0aDsgZSsrKSBpZiAoTnVtYmVyLnBhcnNlSW50KGlbZV0uZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1zbGlkZS10b1wiKSwgMTApID09PSB0aGlzLl9nZXRJdGVtSW5kZXgodCkpIHtcbiAgICAgICAgICBpW2VdLmNsYXNzTGlzdC5hZGQoaXQpLCBpW2VdLnNldEF0dHJpYnV0ZShcImFyaWEtY3VycmVudFwiLCBcInRydWVcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdXBkYXRlSW50ZXJ2YWwoKSB7XG4gICAgICBjb25zdCB0ID0gdGhpcy5fYWN0aXZlRWxlbWVudCB8fCBWLmZpbmRPbmUobnQsIHRoaXMuX2VsZW1lbnQpO1xuICAgICAgaWYgKCF0KSByZXR1cm47XG4gICAgICBjb25zdCBlID0gTnVtYmVyLnBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1pbnRlcnZhbFwiKSwgMTApO1xuICAgICAgZSA/ICh0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWwsIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IGUpIDogdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgX3NsaWRlKHQsIGUpIHtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLl9kaXJlY3Rpb25Ub09yZGVyKHQpLFxuICAgICAgICAgICAgbiA9IFYuZmluZE9uZShudCwgdGhpcy5fZWxlbWVudCksXG4gICAgICAgICAgICBzID0gdGhpcy5fZ2V0SXRlbUluZGV4KG4pLFxuICAgICAgICAgICAgbyA9IGUgfHwgdGhpcy5fZ2V0SXRlbUJ5T3JkZXIoaSwgbiksXG4gICAgICAgICAgICByID0gdGhpcy5fZ2V0SXRlbUluZGV4KG8pLFxuICAgICAgICAgICAgYSA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpLFxuICAgICAgICAgICAgbCA9IGkgPT09IFEsXG4gICAgICAgICAgICBjID0gbCA/IFwiY2Fyb3VzZWwtaXRlbS1zdGFydFwiIDogXCJjYXJvdXNlbC1pdGVtLWVuZFwiLFxuICAgICAgICAgICAgaCA9IGwgPyBcImNhcm91c2VsLWl0ZW0tbmV4dFwiIDogXCJjYXJvdXNlbC1pdGVtLXByZXZcIixcbiAgICAgICAgICAgIGQgPSB0aGlzLl9vcmRlclRvRGlyZWN0aW9uKGkpO1xuXG4gICAgICBpZiAobyAmJiBvLmNsYXNzTGlzdC5jb250YWlucyhpdCkpIHJldHVybiB2b2lkICh0aGlzLl9pc1NsaWRpbmcgPSAhMSk7XG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSByZXR1cm47XG4gICAgICBpZiAodGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobywgZCkuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgaWYgKCFuIHx8ICFvKSByZXR1cm47XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSAhMCwgYSAmJiB0aGlzLnBhdXNlKCksIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobyksIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBvO1xuXG4gICAgICBjb25zdCBmID0gKCkgPT4ge1xuICAgICAgICBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgZXQsIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBvLFxuICAgICAgICAgIGRpcmVjdGlvbjogZCxcbiAgICAgICAgICBmcm9tOiBzLFxuICAgICAgICAgIHRvOiByXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2xpZGVcIikpIHtcbiAgICAgICAgby5jbGFzc0xpc3QuYWRkKGgpLCB1KG8pLCBuLmNsYXNzTGlzdC5hZGQoYyksIG8uY2xhc3NMaXN0LmFkZChjKTtcblxuICAgICAgICBjb25zdCB0ID0gKCkgPT4ge1xuICAgICAgICAgIG8uY2xhc3NMaXN0LnJlbW92ZShjLCBoKSwgby5jbGFzc0xpc3QuYWRkKGl0KSwgbi5jbGFzc0xpc3QucmVtb3ZlKGl0LCBoLCBjKSwgdGhpcy5faXNTbGlkaW5nID0gITEsIHNldFRpbWVvdXQoZiwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayh0LCBuLCAhMCk7XG4gICAgICB9IGVsc2Ugbi5jbGFzc0xpc3QucmVtb3ZlKGl0KSwgby5jbGFzc0xpc3QuYWRkKGl0KSwgdGhpcy5faXNTbGlkaW5nID0gITEsIGYoKTtcblxuICAgICAgYSAmJiB0aGlzLmN5Y2xlKCk7XG4gICAgfVxuXG4gICAgX2RpcmVjdGlvblRvT3JkZXIodCkge1xuICAgICAgcmV0dXJuIFtKLCBaXS5pbmNsdWRlcyh0KSA/IG0oKSA/IHQgPT09IFogPyBHIDogUSA6IHQgPT09IFogPyBRIDogRyA6IHQ7XG4gICAgfVxuXG4gICAgX29yZGVyVG9EaXJlY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFtRLCBHXS5pbmNsdWRlcyh0KSA/IG0oKSA/IHQgPT09IEcgPyBaIDogSiA6IHQgPT09IEcgPyBKIDogWiA6IHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGNhcm91c2VsSW50ZXJmYWNlKHQsIGUpIHtcbiAgICAgIGNvbnN0IGkgPSBzdC5nZXRPckNyZWF0ZUluc3RhbmNlKHQsIGUpO1xuICAgICAgbGV0IHtcbiAgICAgICAgX2NvbmZpZzogblxuICAgICAgfSA9IGk7XG4gICAgICBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIChuID0geyAuLi5uLFxuICAgICAgICAuLi5lXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHMgPSBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gZSA6IG4uc2xpZGU7XG4gICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgZSkgaS50byhlKTtlbHNlIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBzKSB7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IGlbc10pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7c31cImApO1xuICAgICAgICBpW3NdKCk7XG4gICAgICB9IGVsc2Ugbi5pbnRlcnZhbCAmJiBuLnJpZGUgJiYgKGkucGF1c2UoKSwgaS5jeWNsZSgpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBzdC5jYXJvdXNlbEludGVyZmFjZSh0aGlzLCB0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBkYXRhQXBpQ2xpY2tIYW5kbGVyKHQpIHtcbiAgICAgIGNvbnN0IGUgPSBuKHRoaXMpO1xuICAgICAgaWYgKCFlIHx8ICFlLmNsYXNzTGlzdC5jb250YWlucyhcImNhcm91c2VsXCIpKSByZXR1cm47XG4gICAgICBjb25zdCBpID0geyAuLi5VLmdldERhdGFBdHRyaWJ1dGVzKGUpLFxuICAgICAgICAuLi5VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMpXG4gICAgICB9LFxuICAgICAgICAgICAgcyA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1zbGlkZS10b1wiKTtcbiAgICAgIHMgJiYgKGkuaW50ZXJ2YWwgPSAhMSksIHN0LmNhcm91c2VsSW50ZXJmYWNlKGUsIGkpLCBzICYmIHN0LmdldEluc3RhbmNlKGUpLnRvKHMpLCB0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gIH1cblxuICBqLm9uKGRvY3VtZW50LCBcImNsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpXCIsIFwiW2RhdGEtYnMtc2xpZGVdLCBbZGF0YS1icy1zbGlkZS10b11cIiwgc3QuZGF0YUFwaUNsaWNrSGFuZGxlciksIGoub24od2luZG93LCBcImxvYWQuYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHQgPSBWLmZpbmQoJ1tkYXRhLWJzLXJpZGU9XCJjYXJvdXNlbFwiXScpO1xuXG4gICAgZm9yIChsZXQgZSA9IDAsIGkgPSB0Lmxlbmd0aDsgZSA8IGk7IGUrKykgc3QuY2Fyb3VzZWxJbnRlcmZhY2UodFtlXSwgc3QuZ2V0SW5zdGFuY2UodFtlXSkpO1xuICB9KSwgZyhzdCk7XG4gIGNvbnN0IG90ID0gXCJjb2xsYXBzZVwiLFxuICAgICAgICBydCA9IHtcbiAgICB0b2dnbGU6ICEwLFxuICAgIHBhcmVudDogbnVsbFxuICB9LFxuICAgICAgICBhdCA9IHtcbiAgICB0b2dnbGU6IFwiYm9vbGVhblwiLFxuICAgIHBhcmVudDogXCIobnVsbHxlbGVtZW50KVwiXG4gIH0sXG4gICAgICAgIGx0ID0gXCJzaG93XCIsXG4gICAgICAgIGN0ID0gXCJjb2xsYXBzZVwiLFxuICAgICAgICBodCA9IFwiY29sbGFwc2luZ1wiLFxuICAgICAgICBkdCA9IFwiY29sbGFwc2VkXCIsXG4gICAgICAgIHV0ID0gXCI6c2NvcGUgLmNvbGxhcHNlIC5jb2xsYXBzZVwiLFxuICAgICAgICBmdCA9ICdbZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiXSc7XG5cbiAgY2xhc3MgcHQgZXh0ZW5kcyBCIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICBzdXBlcih0KSwgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gITEsIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhlKSwgdGhpcy5fdHJpZ2dlckFycmF5ID0gW107XG4gICAgICBjb25zdCBuID0gVi5maW5kKGZ0KTtcblxuICAgICAgZm9yIChsZXQgdCA9IDAsIGUgPSBuLmxlbmd0aDsgdCA8IGU7IHQrKykge1xuICAgICAgICBjb25zdCBlID0gblt0XSxcbiAgICAgICAgICAgICAgcyA9IGkoZSksXG4gICAgICAgICAgICAgIG8gPSBWLmZpbmQocykuZmlsdGVyKHQgPT4gdCA9PT0gdGhpcy5fZWxlbWVudCk7XG4gICAgICAgIG51bGwgIT09IHMgJiYgby5sZW5ndGggJiYgKHRoaXMuX3NlbGVjdG9yID0gcywgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZSkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0aWFsaXplQ2hpbGRyZW4oKSwgdGhpcy5fY29uZmlnLnBhcmVudCB8fCB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fdHJpZ2dlckFycmF5LCB0aGlzLl9pc1Nob3duKCkpLCB0aGlzLl9jb25maWcudG9nZ2xlICYmIHRoaXMudG9nZ2xlKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgICAgcmV0dXJuIHJ0O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICAgIHJldHVybiBvdDtcbiAgICB9XG5cbiAgICB0b2dnbGUoKSB7XG4gICAgICB0aGlzLl9pc1Nob3duKCkgPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdygpO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8IHRoaXMuX2lzU2hvd24oKSkgcmV0dXJuO1xuICAgICAgbGV0IHQsXG4gICAgICAgICAgZSA9IFtdO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgICBjb25zdCB0ID0gVi5maW5kKHV0LCB0aGlzLl9jb25maWcucGFyZW50KTtcbiAgICAgICAgZSA9IFYuZmluZChcIi5jb2xsYXBzZS5zaG93LCAuY29sbGFwc2UuY29sbGFwc2luZ1wiLCB0aGlzLl9jb25maWcucGFyZW50KS5maWx0ZXIoZSA9PiAhdC5pbmNsdWRlcyhlKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGkgPSBWLmZpbmRPbmUodGhpcy5fc2VsZWN0b3IpO1xuXG4gICAgICBpZiAoZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbiA9IGUuZmluZCh0ID0+IGkgIT09IHQpO1xuICAgICAgICBpZiAodCA9IG4gPyBwdC5nZXRJbnN0YW5jZShuKSA6IG51bGwsIHQgJiYgdC5faXNUcmFuc2l0aW9uaW5nKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgXCJzaG93LmJzLmNvbGxhcHNlXCIpLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICAgIGUuZm9yRWFjaChlID0+IHtcbiAgICAgICAgaSAhPT0gZSAmJiBwdC5nZXRPckNyZWF0ZUluc3RhbmNlKGUsIHtcbiAgICAgICAgICB0b2dnbGU6ICExXG4gICAgICAgIH0pLmhpZGUoKSwgdCB8fCBILnNldChlLCBcImJzLmNvbGxhcHNlXCIsIG51bGwpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG4gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGN0KSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGh0KSwgdGhpcy5fZWxlbWVudC5zdHlsZVtuXSA9IDAsIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl90cmlnZ2VyQXJyYXksICEwKSwgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gITA7XG4gICAgICBjb25zdCBzID0gYHNjcm9sbCR7blswXS50b1VwcGVyQ2FzZSgpICsgbi5zbGljZSgxKX1gO1xuICAgICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9ICExLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoaHQpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoY3QsIGx0KSwgdGhpcy5fZWxlbWVudC5zdHlsZVtuXSA9IFwiXCIsIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcInNob3duLmJzLmNvbGxhcHNlXCIpO1xuICAgICAgfSwgdGhpcy5fZWxlbWVudCwgITApLCB0aGlzLl9lbGVtZW50LnN0eWxlW25dID0gYCR7dGhpcy5fZWxlbWVudFtzXX1weGA7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgIXRoaXMuX2lzU2hvd24oKSkgcmV0dXJuO1xuICAgICAgaWYgKGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcImhpZGUuYnMuY29sbGFwc2VcIikuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuXG4gICAgICBjb25zdCB0ID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbdF0gPSBgJHt0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RdfXB4YCwgdSh0aGlzLl9lbGVtZW50KSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGh0KSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGN0LCBsdCk7XG4gICAgICBjb25zdCBlID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtcblxuICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBlOyB0KyspIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuX3RyaWdnZXJBcnJheVt0XSxcbiAgICAgICAgICAgICAgaSA9IG4oZSk7XG4gICAgICAgIGkgJiYgIXRoaXMuX2lzU2hvd24oaSkgJiYgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFtlXSwgITEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSAhMCwgdGhpcy5fZWxlbWVudC5zdHlsZVt0XSA9IFwiXCIsIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSAhMSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGh0KSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGN0KSwgai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwiaGlkZGVuLmJzLmNvbGxhcHNlXCIpO1xuICAgICAgfSwgdGhpcy5fZWxlbWVudCwgITApO1xuICAgIH1cblxuICAgIF9pc1Nob3duKHQgPSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICByZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMobHQpO1xuICAgIH1cblxuICAgIF9nZXRDb25maWcodCkge1xuICAgICAgcmV0dXJuICh0ID0geyAuLi5ydCxcbiAgICAgICAgLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgICAgLi4udFxuICAgICAgfSkudG9nZ2xlID0gQm9vbGVhbih0LnRvZ2dsZSksIHQucGFyZW50ID0gcih0LnBhcmVudCksIGEob3QsIHQsIGF0KSwgdDtcbiAgICB9XG5cbiAgICBfZ2V0RGltZW5zaW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY29sbGFwc2UtaG9yaXpvbnRhbFwiKSA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCI7XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemVDaGlsZHJlbigpIHtcbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkgcmV0dXJuO1xuICAgICAgY29uc3QgdCA9IFYuZmluZCh1dCwgdGhpcy5fY29uZmlnLnBhcmVudCk7XG4gICAgICBWLmZpbmQoZnQsIHRoaXMuX2NvbmZpZy5wYXJlbnQpLmZpbHRlcihlID0+ICF0LmluY2x1ZGVzKGUpKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBjb25zdCBlID0gbih0KTtcbiAgICAgICAgZSAmJiB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoW3RdLCB0aGlzLl9pc1Nob3duKGUpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModCwgZSkge1xuICAgICAgdC5sZW5ndGggJiYgdC5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBlID8gdC5jbGFzc0xpc3QucmVtb3ZlKGR0KSA6IHQuY2xhc3NMaXN0LmFkZChkdCksIHQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB7fTtcbiAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiAvc2hvd3xoaWRlLy50ZXN0KHQpICYmIChlLnRvZ2dsZSA9ICExKTtcbiAgICAgICAgY29uc3QgaSA9IHB0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgZSk7XG5cbiAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHtcbiAgICAgICAgICBpZiAodm9pZCAwID09PSBpW3RdKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke3R9XCJgKTtcbiAgICAgICAgICBpW3RdKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgai5vbihkb2N1bWVudCwgXCJjbGljay5icy5jb2xsYXBzZS5kYXRhLWFwaVwiLCBmdCwgZnVuY3Rpb24gKHQpIHtcbiAgICAoXCJBXCIgPT09IHQudGFyZ2V0LnRhZ05hbWUgfHwgdC5kZWxlZ2F0ZVRhcmdldCAmJiBcIkFcIiA9PT0gdC5kZWxlZ2F0ZVRhcmdldC50YWdOYW1lKSAmJiB0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZSA9IGkodGhpcyk7XG4gICAgVi5maW5kKGUpLmZvckVhY2godCA9PiB7XG4gICAgICBwdC5nZXRPckNyZWF0ZUluc3RhbmNlKHQsIHtcbiAgICAgICAgdG9nZ2xlOiAhMVxuICAgICAgfSkudG9nZ2xlKCk7XG4gICAgfSk7XG4gIH0pLCBnKHB0KTtcbiAgdmFyIG10ID0gXCJ0b3BcIixcbiAgICAgIGd0ID0gXCJib3R0b21cIixcbiAgICAgIF90ID0gXCJyaWdodFwiLFxuICAgICAgYnQgPSBcImxlZnRcIixcbiAgICAgIHZ0ID0gXCJhdXRvXCIsXG4gICAgICB5dCA9IFttdCwgZ3QsIF90LCBidF0sXG4gICAgICB3dCA9IFwic3RhcnRcIixcbiAgICAgIEV0ID0gXCJlbmRcIixcbiAgICAgIEF0ID0gXCJjbGlwcGluZ1BhcmVudHNcIixcbiAgICAgIFR0ID0gXCJ2aWV3cG9ydFwiLFxuICAgICAgT3QgPSBcInBvcHBlclwiLFxuICAgICAgQ3QgPSBcInJlZmVyZW5jZVwiLFxuICAgICAga3QgPSB5dC5yZWR1Y2UoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICByZXR1cm4gdC5jb25jYXQoW2UgKyBcIi1cIiArIHd0LCBlICsgXCItXCIgKyBFdF0pO1xuICB9LCBbXSksXG4gICAgICBMdCA9IFtdLmNvbmNhdCh5dCwgW3Z0XSkucmVkdWNlKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgcmV0dXJuIHQuY29uY2F0KFtlLCBlICsgXCItXCIgKyB3dCwgZSArIFwiLVwiICsgRXRdKTtcbiAgfSwgW10pLFxuICAgICAgeHQgPSBcImJlZm9yZVJlYWRcIixcbiAgICAgIER0ID0gXCJyZWFkXCIsXG4gICAgICBTdCA9IFwiYWZ0ZXJSZWFkXCIsXG4gICAgICBOdCA9IFwiYmVmb3JlTWFpblwiLFxuICAgICAgSXQgPSBcIm1haW5cIixcbiAgICAgIFB0ID0gXCJhZnRlck1haW5cIixcbiAgICAgIGp0ID0gXCJiZWZvcmVXcml0ZVwiLFxuICAgICAgTXQgPSBcIndyaXRlXCIsXG4gICAgICBIdCA9IFwiYWZ0ZXJXcml0ZVwiLFxuICAgICAgQnQgPSBbeHQsIER0LCBTdCwgTnQsIEl0LCBQdCwganQsIE10LCBIdF07XG5cbiAgZnVuY3Rpb24gUnQodCkge1xuICAgIHJldHVybiB0ID8gKHQubm9kZU5hbWUgfHwgXCJcIikudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBXdCh0KSB7XG4gICAgaWYgKG51bGwgPT0gdCkgcmV0dXJuIHdpbmRvdztcblxuICAgIGlmIChcIltvYmplY3QgV2luZG93XVwiICE9PSB0LnRvU3RyaW5nKCkpIHtcbiAgICAgIHZhciBlID0gdC5vd25lckRvY3VtZW50O1xuICAgICAgcmV0dXJuIGUgJiYgZS5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICBmdW5jdGlvbiAkdCh0KSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBXdCh0KS5FbGVtZW50IHx8IHQgaW5zdGFuY2VvZiBFbGVtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24genQodCkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgV3QodCkuSFRNTEVsZW1lbnQgfHwgdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gcXQodCkge1xuICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTaGFkb3dSb290ICYmICh0IGluc3RhbmNlb2YgV3QodCkuU2hhZG93Um9vdCB8fCB0IGluc3RhbmNlb2YgU2hhZG93Um9vdCk7XG4gIH1cblxuICBjb25zdCBGdCA9IHtcbiAgICBuYW1lOiBcImFwcGx5U3R5bGVzXCIsXG4gICAgZW5hYmxlZDogITAsXG4gICAgcGhhc2U6IFwid3JpdGVcIixcbiAgICBmbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBlID0gdC5zdGF0ZTtcbiAgICAgIE9iamVjdC5rZXlzKGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGkgPSBlLnN0eWxlc1t0XSB8fCB7fSxcbiAgICAgICAgICAgIG4gPSBlLmF0dHJpYnV0ZXNbdF0gfHwge30sXG4gICAgICAgICAgICBzID0gZS5lbGVtZW50c1t0XTtcbiAgICAgICAgenQocykgJiYgUnQocykgJiYgKE9iamVjdC5hc3NpZ24ocy5zdHlsZSwgaSksIE9iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IG5bdF07XG4gICAgICAgICAgITEgPT09IGUgPyBzLnJlbW92ZUF0dHJpYnV0ZSh0KSA6IHMuc2V0QXR0cmlidXRlKHQsICEwID09PSBlID8gXCJcIiA6IGUpO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGVmZmVjdDogZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBlID0gdC5zdGF0ZSxcbiAgICAgICAgICBpID0ge1xuICAgICAgICBwb3BwZXI6IHtcbiAgICAgICAgICBwb3NpdGlvbjogZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgICAgIGxlZnQ6IFwiMFwiLFxuICAgICAgICAgIHRvcDogXCIwXCIsXG4gICAgICAgICAgbWFyZ2luOiBcIjBcIlxuICAgICAgICB9LFxuICAgICAgICBhcnJvdzoge1xuICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgcmVmZXJlbmNlOiB7fVxuICAgICAgfTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpLnBvcHBlciksIGUuc3R5bGVzID0gaSwgZS5lbGVtZW50cy5hcnJvdyAmJiBPYmplY3QuYXNzaWduKGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGkuYXJyb3cpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgbiA9IGUuZWxlbWVudHNbdF0sXG4gICAgICAgICAgICAgIHMgPSBlLmF0dHJpYnV0ZXNbdF0gfHwge30sXG4gICAgICAgICAgICAgIG8gPSBPYmplY3Qua2V5cyhlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eSh0KSA/IGUuc3R5bGVzW3RdIDogaVt0XSkucmVkdWNlKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdFtlXSA9IFwiXCIsIHQ7XG4gICAgICAgICAgfSwge30pO1xuICAgICAgICAgIHp0KG4pICYmIFJ0KG4pICYmIChPYmplY3QuYXNzaWduKG4uc3R5bGUsIG8pLCBPYmplY3Qua2V5cyhzKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBuLnJlbW92ZUF0dHJpYnV0ZSh0KTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHJlcXVpcmVzOiBbXCJjb21wdXRlU3R5bGVzXCJdXG4gIH07XG5cbiAgZnVuY3Rpb24gVXQodCkge1xuICAgIHJldHVybiB0LnNwbGl0KFwiLVwiKVswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFZ0KHQsIGUpIHtcbiAgICB2YXIgaSA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBpLndpZHRoIC8gMSxcbiAgICAgIGhlaWdodDogaS5oZWlnaHQgLyAxLFxuICAgICAgdG9wOiBpLnRvcCAvIDEsXG4gICAgICByaWdodDogaS5yaWdodCAvIDEsXG4gICAgICBib3R0b206IGkuYm90dG9tIC8gMSxcbiAgICAgIGxlZnQ6IGkubGVmdCAvIDEsXG4gICAgICB4OiBpLmxlZnQgLyAxLFxuICAgICAgeTogaS50b3AgLyAxXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEt0KHQpIHtcbiAgICB2YXIgZSA9IFZ0KHQpLFxuICAgICAgICBpID0gdC5vZmZzZXRXaWR0aCxcbiAgICAgICAgbiA9IHQub2Zmc2V0SGVpZ2h0O1xuICAgIHJldHVybiBNYXRoLmFicyhlLndpZHRoIC0gaSkgPD0gMSAmJiAoaSA9IGUud2lkdGgpLCBNYXRoLmFicyhlLmhlaWdodCAtIG4pIDw9IDEgJiYgKG4gPSBlLmhlaWdodCksIHtcbiAgICAgIHg6IHQub2Zmc2V0TGVmdCxcbiAgICAgIHk6IHQub2Zmc2V0VG9wLFxuICAgICAgd2lkdGg6IGksXG4gICAgICBoZWlnaHQ6IG5cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gWHQodCwgZSkge1xuICAgIHZhciBpID0gZS5nZXRSb290Tm9kZSAmJiBlLmdldFJvb3ROb2RlKCk7XG4gICAgaWYgKHQuY29udGFpbnMoZSkpIHJldHVybiAhMDtcblxuICAgIGlmIChpICYmIHF0KGkpKSB7XG4gICAgICB2YXIgbiA9IGU7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJiYgdC5pc1NhbWVOb2RlKG4pKSByZXR1cm4gITA7XG4gICAgICAgIG4gPSBuLnBhcmVudE5vZGUgfHwgbi5ob3N0O1xuICAgICAgfSB3aGlsZSAobik7XG4gICAgfVxuXG4gICAgcmV0dXJuICExO1xuICB9XG5cbiAgZnVuY3Rpb24gWXQodCkge1xuICAgIHJldHVybiBXdCh0KS5nZXRDb21wdXRlZFN0eWxlKHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gUXQodCkge1xuICAgIHJldHVybiBbXCJ0YWJsZVwiLCBcInRkXCIsIFwidGhcIl0uaW5kZXhPZihSdCh0KSkgPj0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEd0KHQpIHtcbiAgICByZXR1cm4gKCgkdCh0KSA/IHQub3duZXJEb2N1bWVudCA6IHQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gWnQodCkge1xuICAgIHJldHVybiBcImh0bWxcIiA9PT0gUnQodCkgPyB0IDogdC5hc3NpZ25lZFNsb3QgfHwgdC5wYXJlbnROb2RlIHx8IChxdCh0KSA/IHQuaG9zdCA6IG51bGwpIHx8IEd0KHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gSnQodCkge1xuICAgIHJldHVybiB6dCh0KSAmJiBcImZpeGVkXCIgIT09IFl0KHQpLnBvc2l0aW9uID8gdC5vZmZzZXRQYXJlbnQgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gdGUodCkge1xuICAgIGZvciAodmFyIGUgPSBXdCh0KSwgaSA9IEp0KHQpOyBpICYmIFF0KGkpICYmIFwic3RhdGljXCIgPT09IFl0KGkpLnBvc2l0aW9uOykgaSA9IEp0KGkpO1xuXG4gICAgcmV0dXJuIGkgJiYgKFwiaHRtbFwiID09PSBSdChpKSB8fCBcImJvZHlcIiA9PT0gUnQoaSkgJiYgXCJzdGF0aWNcIiA9PT0gWXQoaSkucG9zaXRpb24pID8gZSA6IGkgfHwgZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBlID0gLTEgIT09IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiZmlyZWZveFwiKTtcbiAgICAgIGlmICgtMSAhPT0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiVHJpZGVudFwiKSAmJiB6dCh0KSAmJiBcImZpeGVkXCIgPT09IFl0KHQpLnBvc2l0aW9uKSByZXR1cm4gbnVsbDtcblxuICAgICAgZm9yICh2YXIgaSA9IFp0KHQpOyB6dChpKSAmJiBbXCJodG1sXCIsIFwiYm9keVwiXS5pbmRleE9mKFJ0KGkpKSA8IDA7KSB7XG4gICAgICAgIHZhciBuID0gWXQoaSk7XG4gICAgICAgIGlmIChcIm5vbmVcIiAhPT0gbi50cmFuc2Zvcm0gfHwgXCJub25lXCIgIT09IG4ucGVyc3BlY3RpdmUgfHwgXCJwYWludFwiID09PSBuLmNvbnRhaW4gfHwgLTEgIT09IFtcInRyYW5zZm9ybVwiLCBcInBlcnNwZWN0aXZlXCJdLmluZGV4T2Yobi53aWxsQ2hhbmdlKSB8fCBlICYmIFwiZmlsdGVyXCIgPT09IG4ud2lsbENoYW5nZSB8fCBlICYmIG4uZmlsdGVyICYmIFwibm9uZVwiICE9PSBuLmZpbHRlcikgcmV0dXJuIGk7XG4gICAgICAgIGkgPSBpLnBhcmVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0odCkgfHwgZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVlKHQpIHtcbiAgICByZXR1cm4gW1widG9wXCIsIFwiYm90dG9tXCJdLmluZGV4T2YodCkgPj0gMCA/IFwieFwiIDogXCJ5XCI7XG4gIH1cblxuICB2YXIgaWUgPSBNYXRoLm1heCxcbiAgICAgIG5lID0gTWF0aC5taW4sXG4gICAgICBzZSA9IE1hdGgucm91bmQ7XG5cbiAgZnVuY3Rpb24gb2UodCwgZSwgaSkge1xuICAgIHJldHVybiBpZSh0LCBuZShlLCBpKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZSh0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH0sIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWUodCwgZSkge1xuICAgIHJldHVybiBlLnJlZHVjZShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgcmV0dXJuIGVbaV0gPSB0LCBlO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGNvbnN0IGxlID0ge1xuICAgIG5hbWU6IFwiYXJyb3dcIixcbiAgICBlbmFibGVkOiAhMCxcbiAgICBwaGFzZTogXCJtYWluXCIsXG4gICAgZm46IGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSxcbiAgICAgICAgICBpID0gdC5zdGF0ZSxcbiAgICAgICAgICBuID0gdC5uYW1lLFxuICAgICAgICAgIHMgPSB0Lm9wdGlvbnMsXG4gICAgICAgICAgbyA9IGkuZWxlbWVudHMuYXJyb3csXG4gICAgICAgICAgciA9IGkubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgICAgIGEgPSBVdChpLnBsYWNlbWVudCksXG4gICAgICAgICAgbCA9IGVlKGEpLFxuICAgICAgICAgIGMgPSBbYnQsIF90XS5pbmRleE9mKGEpID49IDAgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiO1xuXG4gICAgICBpZiAobyAmJiByKSB7XG4gICAgICAgIHZhciBoID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gcmUoXCJudW1iZXJcIiAhPSB0eXBlb2YgKHQgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgPyB0KE9iamVjdC5hc3NpZ24oe30sIGUucmVjdHMsIHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogZS5wbGFjZW1lbnRcbiAgICAgICAgICB9KSkgOiB0KSA/IHQgOiBhZSh0LCB5dCkpO1xuICAgICAgICB9KHMucGFkZGluZywgaSksXG4gICAgICAgICAgICBkID0gS3QobyksXG4gICAgICAgICAgICB1ID0gXCJ5XCIgPT09IGwgPyBtdCA6IGJ0LFxuICAgICAgICAgICAgZiA9IFwieVwiID09PSBsID8gZ3QgOiBfdCxcbiAgICAgICAgICAgIHAgPSBpLnJlY3RzLnJlZmVyZW5jZVtjXSArIGkucmVjdHMucmVmZXJlbmNlW2xdIC0gcltsXSAtIGkucmVjdHMucG9wcGVyW2NdLFxuICAgICAgICAgICAgbSA9IHJbbF0gLSBpLnJlY3RzLnJlZmVyZW5jZVtsXSxcbiAgICAgICAgICAgIGcgPSB0ZShvKSxcbiAgICAgICAgICAgIF8gPSBnID8gXCJ5XCIgPT09IGwgPyBnLmNsaWVudEhlaWdodCB8fCAwIDogZy5jbGllbnRXaWR0aCB8fCAwIDogMCxcbiAgICAgICAgICAgIGIgPSBwIC8gMiAtIG0gLyAyLFxuICAgICAgICAgICAgdiA9IGhbdV0sXG4gICAgICAgICAgICB5ID0gXyAtIGRbY10gLSBoW2ZdLFxuICAgICAgICAgICAgdyA9IF8gLyAyIC0gZFtjXSAvIDIgKyBiLFxuICAgICAgICAgICAgRSA9IG9lKHYsIHcsIHkpLFxuICAgICAgICAgICAgQSA9IGw7XG5cbiAgICAgICAgaS5tb2RpZmllcnNEYXRhW25dID0gKChlID0ge30pW0FdID0gRSwgZS5jZW50ZXJPZmZzZXQgPSBFIC0gdywgZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBlZmZlY3Q6IGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSA9IHQuc3RhdGUsXG4gICAgICAgICAgaSA9IHQub3B0aW9ucy5lbGVtZW50LFxuICAgICAgICAgIG4gPSB2b2lkIDAgPT09IGkgPyBcIltkYXRhLXBvcHBlci1hcnJvd11cIiA6IGk7XG4gICAgICBudWxsICE9IG4gJiYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIG4gfHwgKG4gPSBlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKG4pKSkgJiYgWHQoZS5lbGVtZW50cy5wb3BwZXIsIG4pICYmIChlLmVsZW1lbnRzLmFycm93ID0gbik7XG4gICAgfSxcbiAgICByZXF1aXJlczogW1wicG9wcGVyT2Zmc2V0c1wiXSxcbiAgICByZXF1aXJlc0lmRXhpc3RzOiBbXCJwcmV2ZW50T3ZlcmZsb3dcIl1cbiAgfTtcblxuICBmdW5jdGlvbiBjZSh0KSB7XG4gICAgcmV0dXJuIHQuc3BsaXQoXCItXCIpWzFdO1xuICB9XG5cbiAgdmFyIGhlID0ge1xuICAgIHRvcDogXCJhdXRvXCIsXG4gICAgcmlnaHQ6IFwiYXV0b1wiLFxuICAgIGJvdHRvbTogXCJhdXRvXCIsXG4gICAgbGVmdDogXCJhdXRvXCJcbiAgfTtcblxuICBmdW5jdGlvbiBkZSh0KSB7XG4gICAgdmFyIGUsXG4gICAgICAgIGkgPSB0LnBvcHBlcixcbiAgICAgICAgbiA9IHQucG9wcGVyUmVjdCxcbiAgICAgICAgcyA9IHQucGxhY2VtZW50LFxuICAgICAgICBvID0gdC52YXJpYXRpb24sXG4gICAgICAgIHIgPSB0Lm9mZnNldHMsXG4gICAgICAgIGEgPSB0LnBvc2l0aW9uLFxuICAgICAgICBsID0gdC5ncHVBY2NlbGVyYXRpb24sXG4gICAgICAgIGMgPSB0LmFkYXB0aXZlLFxuICAgICAgICBoID0gdC5yb3VuZE9mZnNldHMsXG4gICAgICAgIGQgPSAhMCA9PT0gaCA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSA9IHQueCxcbiAgICAgICAgICBpID0gdC55LFxuICAgICAgICAgIG4gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogc2Uoc2UoZSAqIG4pIC8gbikgfHwgMCxcbiAgICAgICAgeTogc2Uoc2UoaSAqIG4pIC8gbikgfHwgMFxuICAgICAgfTtcbiAgICB9KHIpIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBoID8gaChyKSA6IHIsXG4gICAgICAgIHUgPSBkLngsXG4gICAgICAgIGYgPSB2b2lkIDAgPT09IHUgPyAwIDogdSxcbiAgICAgICAgcCA9IGQueSxcbiAgICAgICAgbSA9IHZvaWQgMCA9PT0gcCA/IDAgOiBwLFxuICAgICAgICBnID0gci5oYXNPd25Qcm9wZXJ0eShcInhcIiksXG4gICAgICAgIF8gPSByLmhhc093blByb3BlcnR5KFwieVwiKSxcbiAgICAgICAgYiA9IGJ0LFxuICAgICAgICB2ID0gbXQsXG4gICAgICAgIHkgPSB3aW5kb3c7XG5cbiAgICBpZiAoYykge1xuICAgICAgdmFyIHcgPSB0ZShpKSxcbiAgICAgICAgICBFID0gXCJjbGllbnRIZWlnaHRcIixcbiAgICAgICAgICBBID0gXCJjbGllbnRXaWR0aFwiO1xuICAgICAgdyA9PT0gV3QoaSkgJiYgXCJzdGF0aWNcIiAhPT0gWXQodyA9IEd0KGkpKS5wb3NpdGlvbiAmJiBcImFic29sdXRlXCIgPT09IGEgJiYgKEUgPSBcInNjcm9sbEhlaWdodFwiLCBBID0gXCJzY3JvbGxXaWR0aFwiKSwgdyA9IHcsIHMgIT09IG10ICYmIChzICE9PSBidCAmJiBzICE9PSBfdCB8fCBvICE9PSBFdCkgfHwgKHYgPSBndCwgbSAtPSB3W0VdIC0gbi5oZWlnaHQsIG0gKj0gbCA/IDEgOiAtMSksIHMgIT09IGJ0ICYmIChzICE9PSBtdCAmJiBzICE9PSBndCB8fCBvICE9PSBFdCkgfHwgKGIgPSBfdCwgZiAtPSB3W0FdIC0gbi53aWR0aCwgZiAqPSBsID8gMSA6IC0xKTtcbiAgICB9XG5cbiAgICB2YXIgVCxcbiAgICAgICAgTyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgcG9zaXRpb246IGFcbiAgICB9LCBjICYmIGhlKTtcbiAgICByZXR1cm4gbCA/IE9iamVjdC5hc3NpZ24oe30sIE8sICgoVCA9IHt9KVt2XSA9IF8gPyBcIjBcIiA6IFwiXCIsIFRbYl0gPSBnID8gXCIwXCIgOiBcIlwiLCBULnRyYW5zZm9ybSA9ICh5LmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgZiArIFwicHgsIFwiICsgbSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgZiArIFwicHgsIFwiICsgbSArIFwicHgsIDApXCIsIFQpKSA6IE9iamVjdC5hc3NpZ24oe30sIE8sICgoZSA9IHt9KVt2XSA9IF8gPyBtICsgXCJweFwiIDogXCJcIiwgZVtiXSA9IGcgPyBmICsgXCJweFwiIDogXCJcIiwgZS50cmFuc2Zvcm0gPSBcIlwiLCBlKSk7XG4gIH1cblxuICBjb25zdCB1ZSA9IHtcbiAgICBuYW1lOiBcImNvbXB1dGVTdHlsZXNcIixcbiAgICBlbmFibGVkOiAhMCxcbiAgICBwaGFzZTogXCJiZWZvcmVXcml0ZVwiLFxuICAgIGZuOiBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGUgPSB0LnN0YXRlLFxuICAgICAgICAgIGkgPSB0Lm9wdGlvbnMsXG4gICAgICAgICAgbiA9IGkuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgICAgIHMgPSB2b2lkIDAgPT09IG4gfHwgbixcbiAgICAgICAgICBvID0gaS5hZGFwdGl2ZSxcbiAgICAgICAgICByID0gdm9pZCAwID09PSBvIHx8IG8sXG4gICAgICAgICAgYSA9IGkucm91bmRPZmZzZXRzLFxuICAgICAgICAgIGwgPSB2b2lkIDAgPT09IGEgfHwgYSxcbiAgICAgICAgICBjID0ge1xuICAgICAgICBwbGFjZW1lbnQ6IFV0KGUucGxhY2VtZW50KSxcbiAgICAgICAgdmFyaWF0aW9uOiBjZShlLnBsYWNlbWVudCksXG4gICAgICAgIHBvcHBlcjogZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgICAgIHBvcHBlclJlY3Q6IGUucmVjdHMucG9wcGVyLFxuICAgICAgICBncHVBY2NlbGVyYXRpb246IHNcbiAgICAgIH07XG4gICAgICBudWxsICE9IGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICYmIChlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBlLnN0eWxlcy5wb3BwZXIsIGRlKE9iamVjdC5hc3NpZ24oe30sIGMsIHtcbiAgICAgICAgb2Zmc2V0czogZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICAgIHBvc2l0aW9uOiBlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICAgIGFkYXB0aXZlOiByLFxuICAgICAgICByb3VuZE9mZnNldHM6IGxcbiAgICAgIH0pKSkpLCBudWxsICE9IGUubW9kaWZpZXJzRGF0YS5hcnJvdyAmJiAoZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBlLnN0eWxlcy5hcnJvdywgZGUoT2JqZWN0LmFzc2lnbih7fSwgYywge1xuICAgICAgICBvZmZzZXRzOiBlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIGFkYXB0aXZlOiAhMSxcbiAgICAgICAgcm91bmRPZmZzZXRzOiBsXG4gICAgICB9KSkpKSwgZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAgICAgXCJkYXRhLXBvcHBlci1wbGFjZW1lbnRcIjogZS5wbGFjZW1lbnRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGF0YToge31cbiAgfTtcbiAgdmFyIGZlID0ge1xuICAgIHBhc3NpdmU6ICEwXG4gIH07XG4gIGNvbnN0IHBlID0ge1xuICAgIG5hbWU6IFwiZXZlbnRMaXN0ZW5lcnNcIixcbiAgICBlbmFibGVkOiAhMCxcbiAgICBwaGFzZTogXCJ3cml0ZVwiLFxuICAgIGZuOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBlZmZlY3Q6IGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSA9IHQuc3RhdGUsXG4gICAgICAgICAgaSA9IHQuaW5zdGFuY2UsXG4gICAgICAgICAgbiA9IHQub3B0aW9ucyxcbiAgICAgICAgICBzID0gbi5zY3JvbGwsXG4gICAgICAgICAgbyA9IHZvaWQgMCA9PT0gcyB8fCBzLFxuICAgICAgICAgIHIgPSBuLnJlc2l6ZSxcbiAgICAgICAgICBhID0gdm9pZCAwID09PSByIHx8IHIsXG4gICAgICAgICAgbCA9IFd0KGUuZWxlbWVudHMucG9wcGVyKSxcbiAgICAgICAgICBjID0gW10uY29uY2F0KGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuICAgICAgcmV0dXJuIG8gJiYgYy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBpLnVwZGF0ZSwgZmUpO1xuICAgICAgfSksIGEgJiYgbC5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGkudXBkYXRlLCBmZSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbyAmJiBjLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgaS51cGRhdGUsIGZlKTtcbiAgICAgICAgfSksIGEgJiYgbC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGkudXBkYXRlLCBmZSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgZGF0YToge31cbiAgfTtcbiAgdmFyIG1lID0ge1xuICAgIGxlZnQ6IFwicmlnaHRcIixcbiAgICByaWdodDogXCJsZWZ0XCIsXG4gICAgYm90dG9tOiBcInRvcFwiLFxuICAgIHRvcDogXCJib3R0b21cIlxuICB9O1xuXG4gIGZ1bmN0aW9uIGdlKHQpIHtcbiAgICByZXR1cm4gdC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBtZVt0XTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfZSA9IHtcbiAgICBzdGFydDogXCJlbmRcIixcbiAgICBlbmQ6IFwic3RhcnRcIlxuICB9O1xuXG4gIGZ1bmN0aW9uIGJlKHQpIHtcbiAgICByZXR1cm4gdC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBfZVt0XTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZlKHQpIHtcbiAgICB2YXIgZSA9IFd0KHQpO1xuICAgIHJldHVybiB7XG4gICAgICBzY3JvbGxMZWZ0OiBlLnBhZ2VYT2Zmc2V0LFxuICAgICAgc2Nyb2xsVG9wOiBlLnBhZ2VZT2Zmc2V0XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHllKHQpIHtcbiAgICByZXR1cm4gVnQoR3QodCkpLmxlZnQgKyB2ZSh0KS5zY3JvbGxMZWZ0O1xuICB9XG5cbiAgZnVuY3Rpb24gd2UodCkge1xuICAgIHZhciBlID0gWXQodCksXG4gICAgICAgIGkgPSBlLm92ZXJmbG93LFxuICAgICAgICBuID0gZS5vdmVyZmxvd1gsXG4gICAgICAgIHMgPSBlLm92ZXJmbG93WTtcbiAgICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KGkgKyBzICsgbik7XG4gIH1cblxuICBmdW5jdGlvbiBFZSh0KSB7XG4gICAgcmV0dXJuIFtcImh0bWxcIiwgXCJib2R5XCIsIFwiI2RvY3VtZW50XCJdLmluZGV4T2YoUnQodCkpID49IDAgPyB0Lm93bmVyRG9jdW1lbnQuYm9keSA6IHp0KHQpICYmIHdlKHQpID8gdCA6IEVlKFp0KHQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFlKHQsIGUpIHtcbiAgICB2YXIgaTtcbiAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBbXSk7XG4gICAgdmFyIG4gPSBFZSh0KSxcbiAgICAgICAgcyA9IG4gPT09IChudWxsID09IChpID0gdC5vd25lckRvY3VtZW50KSA/IHZvaWQgMCA6IGkuYm9keSksXG4gICAgICAgIG8gPSBXdChuKSxcbiAgICAgICAgciA9IHMgPyBbb10uY29uY2F0KG8udmlzdWFsVmlld3BvcnQgfHwgW10sIHdlKG4pID8gbiA6IFtdKSA6IG4sXG4gICAgICAgIGEgPSBlLmNvbmNhdChyKTtcbiAgICByZXR1cm4gcyA/IGEgOiBhLmNvbmNhdChBZShadChyKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gVGUodCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0LCB7XG4gICAgICBsZWZ0OiB0LngsXG4gICAgICB0b3A6IHQueSxcbiAgICAgIHJpZ2h0OiB0LnggKyB0LndpZHRoLFxuICAgICAgYm90dG9tOiB0LnkgKyB0LmhlaWdodFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gT2UodCwgZSkge1xuICAgIHJldHVybiBlID09PSBUdCA/IFRlKGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSA9IFd0KHQpLFxuICAgICAgICAgIGkgPSBHdCh0KSxcbiAgICAgICAgICBuID0gZS52aXN1YWxWaWV3cG9ydCxcbiAgICAgICAgICBzID0gaS5jbGllbnRXaWR0aCxcbiAgICAgICAgICBvID0gaS5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgciA9IDAsXG4gICAgICAgICAgYSA9IDA7XG4gICAgICByZXR1cm4gbiAmJiAocyA9IG4ud2lkdGgsIG8gPSBuLmhlaWdodCwgL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAociA9IG4ub2Zmc2V0TGVmdCwgYSA9IG4ub2Zmc2V0VG9wKSksIHtcbiAgICAgICAgd2lkdGg6IHMsXG4gICAgICAgIGhlaWdodDogbyxcbiAgICAgICAgeDogciArIHllKHQpLFxuICAgICAgICB5OiBhXG4gICAgICB9O1xuICAgIH0odCkpIDogenQoZSkgPyBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGUgPSBWdCh0KTtcbiAgICAgIHJldHVybiBlLnRvcCA9IGUudG9wICsgdC5jbGllbnRUb3AsIGUubGVmdCA9IGUubGVmdCArIHQuY2xpZW50TGVmdCwgZS5ib3R0b20gPSBlLnRvcCArIHQuY2xpZW50SGVpZ2h0LCBlLnJpZ2h0ID0gZS5sZWZ0ICsgdC5jbGllbnRXaWR0aCwgZS53aWR0aCA9IHQuY2xpZW50V2lkdGgsIGUuaGVpZ2h0ID0gdC5jbGllbnRIZWlnaHQsIGUueCA9IGUubGVmdCwgZS55ID0gZS50b3AsIGU7XG4gICAgfShlKSA6IFRlKGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSxcbiAgICAgICAgICBpID0gR3QodCksXG4gICAgICAgICAgbiA9IHZlKHQpLFxuICAgICAgICAgIHMgPSBudWxsID09IChlID0gdC5vd25lckRvY3VtZW50KSA/IHZvaWQgMCA6IGUuYm9keSxcbiAgICAgICAgICBvID0gaWUoaS5zY3JvbGxXaWR0aCwgaS5jbGllbnRXaWR0aCwgcyA/IHMuc2Nyb2xsV2lkdGggOiAwLCBzID8gcy5jbGllbnRXaWR0aCA6IDApLFxuICAgICAgICAgIHIgPSBpZShpLnNjcm9sbEhlaWdodCwgaS5jbGllbnRIZWlnaHQsIHMgPyBzLnNjcm9sbEhlaWdodCA6IDAsIHMgPyBzLmNsaWVudEhlaWdodCA6IDApLFxuICAgICAgICAgIGEgPSAtbi5zY3JvbGxMZWZ0ICsgeWUodCksXG4gICAgICAgICAgbCA9IC1uLnNjcm9sbFRvcDtcbiAgICAgIHJldHVybiBcInJ0bFwiID09PSBZdChzIHx8IGkpLmRpcmVjdGlvbiAmJiAoYSArPSBpZShpLmNsaWVudFdpZHRoLCBzID8gcy5jbGllbnRXaWR0aCA6IDApIC0gbyksIHtcbiAgICAgICAgd2lkdGg6IG8sXG4gICAgICAgIGhlaWdodDogcixcbiAgICAgICAgeDogYSxcbiAgICAgICAgeTogbFxuICAgICAgfTtcbiAgICB9KEd0KHQpKSk7XG4gIH1cblxuICBmdW5jdGlvbiBDZSh0KSB7XG4gICAgdmFyIGUsXG4gICAgICAgIGkgPSB0LnJlZmVyZW5jZSxcbiAgICAgICAgbiA9IHQuZWxlbWVudCxcbiAgICAgICAgcyA9IHQucGxhY2VtZW50LFxuICAgICAgICBvID0gcyA/IFV0KHMpIDogbnVsbCxcbiAgICAgICAgciA9IHMgPyBjZShzKSA6IG51bGwsXG4gICAgICAgIGEgPSBpLnggKyBpLndpZHRoIC8gMiAtIG4ud2lkdGggLyAyLFxuICAgICAgICBsID0gaS55ICsgaS5oZWlnaHQgLyAyIC0gbi5oZWlnaHQgLyAyO1xuXG4gICAgc3dpdGNoIChvKSB7XG4gICAgICBjYXNlIG10OlxuICAgICAgICBlID0ge1xuICAgICAgICAgIHg6IGEsXG4gICAgICAgICAgeTogaS55IC0gbi5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZ3Q6XG4gICAgICAgIGUgPSB7XG4gICAgICAgICAgeDogYSxcbiAgICAgICAgICB5OiBpLnkgKyBpLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBfdDpcbiAgICAgICAgZSA9IHtcbiAgICAgICAgICB4OiBpLnggKyBpLndpZHRoLFxuICAgICAgICAgIHk6IGxcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgYnQ6XG4gICAgICAgIGUgPSB7XG4gICAgICAgICAgeDogaS54IC0gbi53aWR0aCxcbiAgICAgICAgICB5OiBsXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlID0ge1xuICAgICAgICAgIHg6IGkueCxcbiAgICAgICAgICB5OiBpLnlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IG8gPyBlZShvKSA6IG51bGw7XG5cbiAgICBpZiAobnVsbCAhPSBjKSB7XG4gICAgICB2YXIgaCA9IFwieVwiID09PSBjID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIjtcblxuICAgICAgc3dpdGNoIChyKSB7XG4gICAgICAgIGNhc2Ugd3Q6XG4gICAgICAgICAgZVtjXSA9IGVbY10gLSAoaVtoXSAvIDIgLSBuW2hdIC8gMik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBFdDpcbiAgICAgICAgICBlW2NdID0gZVtjXSArIChpW2hdIC8gMiAtIG5baF0gLyAyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGtlKHQsIGUpIHtcbiAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB7fSk7XG5cbiAgICB2YXIgaSA9IGUsXG4gICAgICAgIG4gPSBpLnBsYWNlbWVudCxcbiAgICAgICAgcyA9IHZvaWQgMCA9PT0gbiA/IHQucGxhY2VtZW50IDogbixcbiAgICAgICAgbyA9IGkuYm91bmRhcnksXG4gICAgICAgIHIgPSB2b2lkIDAgPT09IG8gPyBBdCA6IG8sXG4gICAgICAgIGEgPSBpLnJvb3RCb3VuZGFyeSxcbiAgICAgICAgbCA9IHZvaWQgMCA9PT0gYSA/IFR0IDogYSxcbiAgICAgICAgYyA9IGkuZWxlbWVudENvbnRleHQsXG4gICAgICAgIGggPSB2b2lkIDAgPT09IGMgPyBPdCA6IGMsXG4gICAgICAgIGQgPSBpLmFsdEJvdW5kYXJ5LFxuICAgICAgICB1ID0gdm9pZCAwICE9PSBkICYmIGQsXG4gICAgICAgIGYgPSBpLnBhZGRpbmcsXG4gICAgICAgIHAgPSB2b2lkIDAgPT09IGYgPyAwIDogZixcbiAgICAgICAgbSA9IHJlKFwibnVtYmVyXCIgIT0gdHlwZW9mIHAgPyBwIDogYWUocCwgeXQpKSxcbiAgICAgICAgZyA9IGggPT09IE90ID8gQ3QgOiBPdCxcbiAgICAgICAgXyA9IHQucmVjdHMucG9wcGVyLFxuICAgICAgICBiID0gdC5lbGVtZW50c1t1ID8gZyA6IGhdLFxuICAgICAgICB2ID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgIHZhciBuID0gXCJjbGlwcGluZ1BhcmVudHNcIiA9PT0gZSA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBlID0gQWUoWnQodCkpLFxuICAgICAgICAgICAgaSA9IFtcImFic29sdXRlXCIsIFwiZml4ZWRcIl0uaW5kZXhPZihZdCh0KS5wb3NpdGlvbikgPj0gMCAmJiB6dCh0KSA/IHRlKHQpIDogdDtcbiAgICAgICAgcmV0dXJuICR0KGkpID8gZS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gJHQodCkgJiYgWHQodCwgaSkgJiYgXCJib2R5XCIgIT09IFJ0KHQpO1xuICAgICAgICB9KSA6IFtdO1xuICAgICAgfSh0KSA6IFtdLmNvbmNhdChlKSxcbiAgICAgICAgICBzID0gW10uY29uY2F0KG4sIFtpXSksXG4gICAgICAgICAgbyA9IHNbMF0sXG4gICAgICAgICAgciA9IHMucmVkdWNlKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgIHZhciBuID0gT2UodCwgaSk7XG4gICAgICAgIHJldHVybiBlLnRvcCA9IGllKG4udG9wLCBlLnRvcCksIGUucmlnaHQgPSBuZShuLnJpZ2h0LCBlLnJpZ2h0KSwgZS5ib3R0b20gPSBuZShuLmJvdHRvbSwgZS5ib3R0b20pLCBlLmxlZnQgPSBpZShuLmxlZnQsIGUubGVmdCksIGU7XG4gICAgICB9LCBPZSh0LCBvKSk7XG4gICAgICByZXR1cm4gci53aWR0aCA9IHIucmlnaHQgLSByLmxlZnQsIHIuaGVpZ2h0ID0gci5ib3R0b20gLSByLnRvcCwgci54ID0gci5sZWZ0LCByLnkgPSByLnRvcCwgcjtcbiAgICB9KCR0KGIpID8gYiA6IGIuY29udGV4dEVsZW1lbnQgfHwgR3QodC5lbGVtZW50cy5wb3BwZXIpLCByLCBsKSxcbiAgICAgICAgeSA9IFZ0KHQuZWxlbWVudHMucmVmZXJlbmNlKSxcbiAgICAgICAgdyA9IENlKHtcbiAgICAgIHJlZmVyZW5jZTogeSxcbiAgICAgIGVsZW1lbnQ6IF8sXG4gICAgICBzdHJhdGVneTogXCJhYnNvbHV0ZVwiLFxuICAgICAgcGxhY2VtZW50OiBzXG4gICAgfSksXG4gICAgICAgIEUgPSBUZShPYmplY3QuYXNzaWduKHt9LCBfLCB3KSksXG4gICAgICAgIEEgPSBoID09PSBPdCA/IEUgOiB5LFxuICAgICAgICBUID0ge1xuICAgICAgdG9wOiB2LnRvcCAtIEEudG9wICsgbS50b3AsXG4gICAgICBib3R0b206IEEuYm90dG9tIC0gdi5ib3R0b20gKyBtLmJvdHRvbSxcbiAgICAgIGxlZnQ6IHYubGVmdCAtIEEubGVmdCArIG0ubGVmdCxcbiAgICAgIHJpZ2h0OiBBLnJpZ2h0IC0gdi5yaWdodCArIG0ucmlnaHRcbiAgICB9LFxuICAgICAgICBPID0gdC5tb2RpZmllcnNEYXRhLm9mZnNldDtcblxuICAgIGlmIChoID09PSBPdCAmJiBPKSB7XG4gICAgICB2YXIgQyA9IE9bc107XG4gICAgICBPYmplY3Qua2V5cyhUKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBlID0gW190LCBndF0uaW5kZXhPZih0KSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgICAgaSA9IFttdCwgZ3RdLmluZGV4T2YodCkgPj0gMCA/IFwieVwiIDogXCJ4XCI7XG4gICAgICAgIFRbdF0gKz0gQ1tpXSAqIGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIExlKHQsIGUpIHtcbiAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB7fSk7XG4gICAgdmFyIGkgPSBlLFxuICAgICAgICBuID0gaS5wbGFjZW1lbnQsXG4gICAgICAgIHMgPSBpLmJvdW5kYXJ5LFxuICAgICAgICBvID0gaS5yb290Qm91bmRhcnksXG4gICAgICAgIHIgPSBpLnBhZGRpbmcsXG4gICAgICAgIGEgPSBpLmZsaXBWYXJpYXRpb25zLFxuICAgICAgICBsID0gaS5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICAgIGMgPSB2b2lkIDAgPT09IGwgPyBMdCA6IGwsXG4gICAgICAgIGggPSBjZShuKSxcbiAgICAgICAgZCA9IGggPyBhID8ga3QgOiBrdC5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBjZSh0KSA9PT0gaDtcbiAgICB9KSA6IHl0LFxuICAgICAgICB1ID0gZC5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBjLmluZGV4T2YodCkgPj0gMDtcbiAgICB9KTtcbiAgICAwID09PSB1Lmxlbmd0aCAmJiAodSA9IGQpO1xuICAgIHZhciBmID0gdS5yZWR1Y2UoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHJldHVybiBlW2ldID0ga2UodCwge1xuICAgICAgICBwbGFjZW1lbnQ6IGksXG4gICAgICAgIGJvdW5kYXJ5OiBzLFxuICAgICAgICByb290Qm91bmRhcnk6IG8sXG4gICAgICAgIHBhZGRpbmc6IHJcbiAgICAgIH0pW1V0KGkpXSwgZTtcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGYpLnNvcnQoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIHJldHVybiBmW3RdIC0gZltlXTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHhlID0ge1xuICAgIG5hbWU6IFwiZmxpcFwiLFxuICAgIGVuYWJsZWQ6ICEwLFxuICAgIHBoYXNlOiBcIm1haW5cIixcbiAgICBmbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBlID0gdC5zdGF0ZSxcbiAgICAgICAgICBpID0gdC5vcHRpb25zLFxuICAgICAgICAgIG4gPSB0Lm5hbWU7XG5cbiAgICAgIGlmICghZS5tb2RpZmllcnNEYXRhW25dLl9za2lwKSB7XG4gICAgICAgIGZvciAodmFyIHMgPSBpLm1haW5BeGlzLCBvID0gdm9pZCAwID09PSBzIHx8IHMsIHIgPSBpLmFsdEF4aXMsIGEgPSB2b2lkIDAgPT09IHIgfHwgciwgbCA9IGkuZmFsbGJhY2tQbGFjZW1lbnRzLCBjID0gaS5wYWRkaW5nLCBoID0gaS5ib3VuZGFyeSwgZCA9IGkucm9vdEJvdW5kYXJ5LCB1ID0gaS5hbHRCb3VuZGFyeSwgZiA9IGkuZmxpcFZhcmlhdGlvbnMsIHAgPSB2b2lkIDAgPT09IGYgfHwgZiwgbSA9IGkuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLCBnID0gZS5vcHRpb25zLnBsYWNlbWVudCwgXyA9IFV0KGcpLCBiID0gbCB8fCAoXyAhPT0gZyAmJiBwID8gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBpZiAoVXQodCkgPT09IHZ0KSByZXR1cm4gW107XG4gICAgICAgICAgdmFyIGUgPSBnZSh0KTtcbiAgICAgICAgICByZXR1cm4gW2JlKHQpLCBlLCBiZShlKV07XG4gICAgICAgIH0oZykgOiBbZ2UoZyldKSwgdiA9IFtnXS5jb25jYXQoYikucmVkdWNlKGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHQuY29uY2F0KFV0KGkpID09PSB2dCA/IExlKGUsIHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogaSxcbiAgICAgICAgICAgIGJvdW5kYXJ5OiBoLFxuICAgICAgICAgICAgcm9vdEJvdW5kYXJ5OiBkLFxuICAgICAgICAgICAgcGFkZGluZzogYyxcbiAgICAgICAgICAgIGZsaXBWYXJpYXRpb25zOiBwLFxuICAgICAgICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBtXG4gICAgICAgICAgfSkgOiBpKTtcbiAgICAgICAgfSwgW10pLCB5ID0gZS5yZWN0cy5yZWZlcmVuY2UsIHcgPSBlLnJlY3RzLnBvcHBlciwgRSA9IG5ldyBNYXAoKSwgQSA9ICEwLCBUID0gdlswXSwgTyA9IDA7IE8gPCB2Lmxlbmd0aDsgTysrKSB7XG4gICAgICAgICAgdmFyIEMgPSB2W09dLFxuICAgICAgICAgICAgICBrID0gVXQoQyksXG4gICAgICAgICAgICAgIEwgPSBjZShDKSA9PT0gd3QsXG4gICAgICAgICAgICAgIHggPSBbbXQsIGd0XS5pbmRleE9mKGspID49IDAsXG4gICAgICAgICAgICAgIEQgPSB4ID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIixcbiAgICAgICAgICAgICAgUyA9IGtlKGUsIHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogQyxcbiAgICAgICAgICAgIGJvdW5kYXJ5OiBoLFxuICAgICAgICAgICAgcm9vdEJvdW5kYXJ5OiBkLFxuICAgICAgICAgICAgYWx0Qm91bmRhcnk6IHUsXG4gICAgICAgICAgICBwYWRkaW5nOiBjXG4gICAgICAgICAgfSksXG4gICAgICAgICAgICAgIE4gPSB4ID8gTCA/IF90IDogYnQgOiBMID8gZ3QgOiBtdDtcbiAgICAgICAgICB5W0RdID4gd1tEXSAmJiAoTiA9IGdlKE4pKTtcbiAgICAgICAgICB2YXIgSSA9IGdlKE4pLFxuICAgICAgICAgICAgICBQID0gW107XG5cbiAgICAgICAgICBpZiAobyAmJiBQLnB1c2goU1trXSA8PSAwKSwgYSAmJiBQLnB1c2goU1tOXSA8PSAwLCBTW0ldIDw9IDApLCBQLmV2ZXJ5KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgVCA9IEMsIEEgPSAhMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEUuc2V0KEMsIFApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEEpIGZvciAodmFyIGogPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gdi5maW5kKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IEUuZ2V0KGUpO1xuICAgICAgICAgICAgaWYgKGkpIHJldHVybiBpLnNsaWNlKDAsIHQpLmV2ZXJ5KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGUpIHJldHVybiBUID0gZSwgXCJicmVha1wiO1xuICAgICAgICB9LCBNID0gcCA/IDMgOiAxOyBNID4gMCAmJiBcImJyZWFrXCIgIT09IGooTSk7IE0tLSk7XG4gICAgICAgIGUucGxhY2VtZW50ICE9PSBUICYmIChlLm1vZGlmaWVyc0RhdGFbbl0uX3NraXAgPSAhMCwgZS5wbGFjZW1lbnQgPSBULCBlLnJlc2V0ID0gITApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVxdWlyZXNJZkV4aXN0czogW1wib2Zmc2V0XCJdLFxuICAgIGRhdGE6IHtcbiAgICAgIF9za2lwOiAhMVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBEZSh0LCBlLCBpKSB7XG4gICAgcmV0dXJuIHZvaWQgMCA9PT0gaSAmJiAoaSA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfSksIHtcbiAgICAgIHRvcDogdC50b3AgLSBlLmhlaWdodCAtIGkueSxcbiAgICAgIHJpZ2h0OiB0LnJpZ2h0IC0gZS53aWR0aCArIGkueCxcbiAgICAgIGJvdHRvbTogdC5ib3R0b20gLSBlLmhlaWdodCArIGkueSxcbiAgICAgIGxlZnQ6IHQubGVmdCAtIGUud2lkdGggLSBpLnhcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gU2UodCkge1xuICAgIHJldHVybiBbbXQsIF90LCBndCwgYnRdLnNvbWUoZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiB0W2VdID49IDA7XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBOZSA9IHtcbiAgICBuYW1lOiBcImhpZGVcIixcbiAgICBlbmFibGVkOiAhMCxcbiAgICBwaGFzZTogXCJtYWluXCIsXG4gICAgcmVxdWlyZXNJZkV4aXN0czogW1wicHJldmVudE92ZXJmbG93XCJdLFxuICAgIGZuOiBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGUgPSB0LnN0YXRlLFxuICAgICAgICAgIGkgPSB0Lm5hbWUsXG4gICAgICAgICAgbiA9IGUucmVjdHMucmVmZXJlbmNlLFxuICAgICAgICAgIHMgPSBlLnJlY3RzLnBvcHBlcixcbiAgICAgICAgICBvID0gZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdyxcbiAgICAgICAgICByID0ga2UoZSwge1xuICAgICAgICBlbGVtZW50Q29udGV4dDogXCJyZWZlcmVuY2VcIlxuICAgICAgfSksXG4gICAgICAgICAgYSA9IGtlKGUsIHtcbiAgICAgICAgYWx0Qm91bmRhcnk6ICEwXG4gICAgICB9KSxcbiAgICAgICAgICBsID0gRGUociwgbiksXG4gICAgICAgICAgYyA9IERlKGEsIHMsIG8pLFxuICAgICAgICAgIGggPSBTZShsKSxcbiAgICAgICAgICBkID0gU2UoYyk7XG4gICAgICBlLm1vZGlmaWVyc0RhdGFbaV0gPSB7XG4gICAgICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogbCxcbiAgICAgICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogYyxcbiAgICAgICAgaXNSZWZlcmVuY2VIaWRkZW46IGgsXG4gICAgICAgIGhhc1BvcHBlckVzY2FwZWQ6IGRcbiAgICAgIH0sIGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgICAgIFwiZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlblwiOiBoLFxuICAgICAgICBcImRhdGEtcG9wcGVyLWVzY2FwZWRcIjogZFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAgICAgICBJZSA9IHtcbiAgICBuYW1lOiBcIm9mZnNldFwiLFxuICAgIGVuYWJsZWQ6ICEwLFxuICAgIHBoYXNlOiBcIm1haW5cIixcbiAgICByZXF1aXJlczogW1wicG9wcGVyT2Zmc2V0c1wiXSxcbiAgICBmbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBlID0gdC5zdGF0ZSxcbiAgICAgICAgICBpID0gdC5vcHRpb25zLFxuICAgICAgICAgIG4gPSB0Lm5hbWUsXG4gICAgICAgICAgcyA9IGkub2Zmc2V0LFxuICAgICAgICAgIG8gPSB2b2lkIDAgPT09IHMgPyBbMCwgMF0gOiBzLFxuICAgICAgICAgIHIgPSBMdC5yZWR1Y2UoZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgcmV0dXJuIHRbaV0gPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gVXQodCksXG4gICAgICAgICAgICAgIHMgPSBbYnQsIG10XS5pbmRleE9mKG4pID49IDAgPyAtMSA6IDEsXG4gICAgICAgICAgICAgIG8gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGkgPyBpKE9iamVjdC5hc3NpZ24oe30sIGUsIHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogdFxuICAgICAgICAgIH0pKSA6IGksXG4gICAgICAgICAgICAgIHIgPSBvWzBdLFxuICAgICAgICAgICAgICBhID0gb1sxXTtcbiAgICAgICAgICByZXR1cm4gciA9IHIgfHwgMCwgYSA9IChhIHx8IDApICogcywgW2J0LCBfdF0uaW5kZXhPZihuKSA+PSAwID8ge1xuICAgICAgICAgICAgeDogYSxcbiAgICAgICAgICAgIHk6IHJcbiAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgeDogcixcbiAgICAgICAgICAgIHk6IGFcbiAgICAgICAgICB9O1xuICAgICAgICB9KGksIGUucmVjdHMsIG8pLCB0O1xuICAgICAgfSwge30pLFxuICAgICAgICAgIGEgPSByW2UucGxhY2VtZW50XSxcbiAgICAgICAgICBsID0gYS54LFxuICAgICAgICAgIGMgPSBhLnk7XG4gICAgICBudWxsICE9IGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICYmIChlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IGwsIGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0gYyksIGUubW9kaWZpZXJzRGF0YVtuXSA9IHI7XG4gICAgfVxuICB9LFxuICAgICAgICBQZSA9IHtcbiAgICBuYW1lOiBcInBvcHBlck9mZnNldHNcIixcbiAgICBlbmFibGVkOiAhMCxcbiAgICBwaGFzZTogXCJyZWFkXCIsXG4gICAgZm46IGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSA9IHQuc3RhdGUsXG4gICAgICAgICAgaSA9IHQubmFtZTtcbiAgICAgIGUubW9kaWZpZXJzRGF0YVtpXSA9IENlKHtcbiAgICAgICAgcmVmZXJlbmNlOiBlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICAgICAgZWxlbWVudDogZS5yZWN0cy5wb3BwZXIsXG4gICAgICAgIHN0cmF0ZWd5OiBcImFic29sdXRlXCIsXG4gICAgICAgIHBsYWNlbWVudDogZS5wbGFjZW1lbnRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGF0YToge31cbiAgfSxcbiAgICAgICAgamUgPSB7XG4gICAgbmFtZTogXCJwcmV2ZW50T3ZlcmZsb3dcIixcbiAgICBlbmFibGVkOiAhMCxcbiAgICBwaGFzZTogXCJtYWluXCIsXG4gICAgZm46IGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSA9IHQuc3RhdGUsXG4gICAgICAgICAgaSA9IHQub3B0aW9ucyxcbiAgICAgICAgICBuID0gdC5uYW1lLFxuICAgICAgICAgIHMgPSBpLm1haW5BeGlzLFxuICAgICAgICAgIG8gPSB2b2lkIDAgPT09IHMgfHwgcyxcbiAgICAgICAgICByID0gaS5hbHRBeGlzLFxuICAgICAgICAgIGEgPSB2b2lkIDAgIT09IHIgJiYgcixcbiAgICAgICAgICBsID0gaS5ib3VuZGFyeSxcbiAgICAgICAgICBjID0gaS5yb290Qm91bmRhcnksXG4gICAgICAgICAgaCA9IGkuYWx0Qm91bmRhcnksXG4gICAgICAgICAgZCA9IGkucGFkZGluZyxcbiAgICAgICAgICB1ID0gaS50ZXRoZXIsXG4gICAgICAgICAgZiA9IHZvaWQgMCA9PT0gdSB8fCB1LFxuICAgICAgICAgIHAgPSBpLnRldGhlck9mZnNldCxcbiAgICAgICAgICBtID0gdm9pZCAwID09PSBwID8gMCA6IHAsXG4gICAgICAgICAgZyA9IGtlKGUsIHtcbiAgICAgICAgYm91bmRhcnk6IGwsXG4gICAgICAgIHJvb3RCb3VuZGFyeTogYyxcbiAgICAgICAgcGFkZGluZzogZCxcbiAgICAgICAgYWx0Qm91bmRhcnk6IGhcbiAgICAgIH0pLFxuICAgICAgICAgIF8gPSBVdChlLnBsYWNlbWVudCksXG4gICAgICAgICAgYiA9IGNlKGUucGxhY2VtZW50KSxcbiAgICAgICAgICB2ID0gIWIsXG4gICAgICAgICAgeSA9IGVlKF8pLFxuICAgICAgICAgIHcgPSBcInhcIiA9PT0geSA/IFwieVwiIDogXCJ4XCIsXG4gICAgICAgICAgRSA9IGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgICAgIEEgPSBlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICAgICAgICBUID0gZS5yZWN0cy5wb3BwZXIsXG4gICAgICAgICAgTyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbSA/IG0oT2JqZWN0LmFzc2lnbih7fSwgZS5yZWN0cywge1xuICAgICAgICBwbGFjZW1lbnQ6IGUucGxhY2VtZW50XG4gICAgICB9KSkgOiBtLFxuICAgICAgICAgIEMgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICAgIH07XG5cbiAgICAgIGlmIChFKSB7XG4gICAgICAgIGlmIChvIHx8IGEpIHtcbiAgICAgICAgICB2YXIgayA9IFwieVwiID09PSB5ID8gbXQgOiBidCxcbiAgICAgICAgICAgICAgTCA9IFwieVwiID09PSB5ID8gZ3QgOiBfdCxcbiAgICAgICAgICAgICAgeCA9IFwieVwiID09PSB5ID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIixcbiAgICAgICAgICAgICAgRCA9IEVbeV0sXG4gICAgICAgICAgICAgIFMgPSBFW3ldICsgZ1trXSxcbiAgICAgICAgICAgICAgTiA9IEVbeV0gLSBnW0xdLFxuICAgICAgICAgICAgICBJID0gZiA/IC1UW3hdIC8gMiA6IDAsXG4gICAgICAgICAgICAgIFAgPSBiID09PSB3dCA/IEFbeF0gOiBUW3hdLFxuICAgICAgICAgICAgICBqID0gYiA9PT0gd3QgPyAtVFt4XSA6IC1BW3hdLFxuICAgICAgICAgICAgICBNID0gZS5lbGVtZW50cy5hcnJvdyxcbiAgICAgICAgICAgICAgSCA9IGYgJiYgTSA/IEt0KE0pIDoge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgICBCID0gZS5tb2RpZmllcnNEYXRhW1wiYXJyb3cjcGVyc2lzdGVudFwiXSA/IGUubW9kaWZpZXJzRGF0YVtcImFycm93I3BlcnNpc3RlbnRcIl0ucGFkZGluZyA6IHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgbGVmdDogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFIgPSBCW2tdLFxuICAgICAgICAgICAgICBXID0gQltMXSxcbiAgICAgICAgICAgICAgJCA9IG9lKDAsIEFbeF0sIEhbeF0pLFxuICAgICAgICAgICAgICB6ID0gdiA/IEFbeF0gLyAyIC0gSSAtICQgLSBSIC0gTyA6IFAgLSAkIC0gUiAtIE8sXG4gICAgICAgICAgICAgIHEgPSB2ID8gLUFbeF0gLyAyICsgSSArICQgKyBXICsgTyA6IGogKyAkICsgVyArIE8sXG4gICAgICAgICAgICAgIEYgPSBlLmVsZW1lbnRzLmFycm93ICYmIHRlKGUuZWxlbWVudHMuYXJyb3cpLFxuICAgICAgICAgICAgICBVID0gRiA/IFwieVwiID09PSB5ID8gRi5jbGllbnRUb3AgfHwgMCA6IEYuY2xpZW50TGVmdCB8fCAwIDogMCxcbiAgICAgICAgICAgICAgViA9IGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W2UucGxhY2VtZW50XVt5XSA6IDAsXG4gICAgICAgICAgICAgIEsgPSBFW3ldICsgeiAtIFYgLSBVLFxuICAgICAgICAgICAgICBYID0gRVt5XSArIHEgLSBWO1xuXG4gICAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgIHZhciBZID0gb2UoZiA/IG5lKFMsIEspIDogUywgRCwgZiA/IGllKE4sIFgpIDogTik7XG4gICAgICAgICAgICBFW3ldID0gWSwgQ1t5XSA9IFkgLSBEO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICB2YXIgUSA9IFwieFwiID09PSB5ID8gbXQgOiBidCxcbiAgICAgICAgICAgICAgICBHID0gXCJ4XCIgPT09IHkgPyBndCA6IF90LFxuICAgICAgICAgICAgICAgIFogPSBFW3ddLFxuICAgICAgICAgICAgICAgIEogPSBaICsgZ1tRXSxcbiAgICAgICAgICAgICAgICB0dCA9IFogLSBnW0ddLFxuICAgICAgICAgICAgICAgIGV0ID0gb2UoZiA/IG5lKEosIEspIDogSiwgWiwgZiA/IGllKHR0LCBYKSA6IHR0KTtcbiAgICAgICAgICAgIEVbd10gPSBldCwgQ1t3XSA9IGV0IC0gWjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBlLm1vZGlmaWVyc0RhdGFbbl0gPSBDO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVxdWlyZXNJZkV4aXN0czogW1wib2Zmc2V0XCJdXG4gIH07XG5cbiAgZnVuY3Rpb24gTWUodCwgZSwgaSkge1xuICAgIHZvaWQgMCA9PT0gaSAmJiAoaSA9ICExKTtcbiAgICB2YXIgbiA9IHp0KGUpO1xuICAgIHp0KGUpICYmIGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgZSA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBlLndpZHRoLCB0Lm9mZnNldFdpZHRoLCBlLmhlaWdodCwgdC5vZmZzZXRIZWlnaHQ7XG4gICAgfShlKTtcbiAgICB2YXIgcyxcbiAgICAgICAgbyxcbiAgICAgICAgciA9IEd0KGUpLFxuICAgICAgICBhID0gVnQodCksXG4gICAgICAgIGwgPSB7XG4gICAgICBzY3JvbGxMZWZ0OiAwLFxuICAgICAgc2Nyb2xsVG9wOiAwXG4gICAgfSxcbiAgICAgICAgYyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgICByZXR1cm4gKG4gfHwgIW4gJiYgIWkpICYmICgoXCJib2R5XCIgIT09IFJ0KGUpIHx8IHdlKHIpKSAmJiAobCA9IChzID0gZSkgIT09IFd0KHMpICYmIHp0KHMpID8ge1xuICAgICAgc2Nyb2xsTGVmdDogKG8gPSBzKS5zY3JvbGxMZWZ0LFxuICAgICAgc2Nyb2xsVG9wOiBvLnNjcm9sbFRvcFxuICAgIH0gOiB2ZShzKSksIHp0KGUpID8gKChjID0gVnQoZSkpLnggKz0gZS5jbGllbnRMZWZ0LCBjLnkgKz0gZS5jbGllbnRUb3ApIDogciAmJiAoYy54ID0geWUocikpKSwge1xuICAgICAgeDogYS5sZWZ0ICsgbC5zY3JvbGxMZWZ0IC0gYy54LFxuICAgICAgeTogYS50b3AgKyBsLnNjcm9sbFRvcCAtIGMueSxcbiAgICAgIHdpZHRoOiBhLndpZHRoLFxuICAgICAgaGVpZ2h0OiBhLmhlaWdodFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBIZSh0KSB7XG4gICAgdmFyIGUgPSBuZXcgTWFwKCksXG4gICAgICAgIGkgPSBuZXcgU2V0KCksXG4gICAgICAgIG4gPSBbXTtcblxuICAgIGZ1bmN0aW9uIHModCkge1xuICAgICAgaS5hZGQodC5uYW1lKSwgW10uY29uY2F0KHQucmVxdWlyZXMgfHwgW10sIHQucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICBpZiAoIWkuaGFzKHQpKSB7XG4gICAgICAgICAgdmFyIG4gPSBlLmdldCh0KTtcbiAgICAgICAgICBuICYmIHMobik7XG4gICAgICAgIH1cbiAgICAgIH0pLCBuLnB1c2godCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgZS5zZXQodC5uYW1lLCB0KTtcbiAgICB9KSwgdC5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICBpLmhhcyh0Lm5hbWUpIHx8IHModCk7XG4gICAgfSksIG47XG4gIH1cblxuICB2YXIgQmUgPSB7XG4gICAgcGxhY2VtZW50OiBcImJvdHRvbVwiLFxuICAgIG1vZGlmaWVyczogW10sXG4gICAgc3RyYXRlZ3k6IFwiYWJzb2x1dGVcIlxuICB9O1xuXG4gIGZ1bmN0aW9uIFJlKCkge1xuICAgIGZvciAodmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoLCBlID0gbmV3IEFycmF5KHQpLCBpID0gMDsgaSA8IHQ7IGkrKykgZVtpXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIHJldHVybiAhZS5zb21lKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gISh0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gV2UodCkge1xuICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9IHt9KTtcbiAgICB2YXIgZSA9IHQsXG4gICAgICAgIGkgPSBlLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICAgIG4gPSB2b2lkIDAgPT09IGkgPyBbXSA6IGksXG4gICAgICAgIHMgPSBlLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICBvID0gdm9pZCAwID09PSBzID8gQmUgOiBzO1xuICAgIHJldHVybiBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgdm9pZCAwID09PSBpICYmIChpID0gbyk7XG4gICAgICB2YXIgcyxcbiAgICAgICAgICByLFxuICAgICAgICAgIGEgPSB7XG4gICAgICAgIHBsYWNlbWVudDogXCJib3R0b21cIixcbiAgICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIEJlLCBvKSxcbiAgICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgcmVmZXJlbmNlOiB0LFxuICAgICAgICAgIHBvcHBlcjogZVxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgc3R5bGVzOiB7fVxuICAgICAgfSxcbiAgICAgICAgICBsID0gW10sXG4gICAgICAgICAgYyA9ICExLFxuICAgICAgICAgIGggPSB7XG4gICAgICAgIHN0YXRlOiBhLFxuICAgICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHZhciBzID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBpID8gaShhLm9wdGlvbnMpIDogaTtcbiAgICAgICAgICBkKCksIGEub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG8sIGEub3B0aW9ucywgcyksIGEuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICAgIHJlZmVyZW5jZTogJHQodCkgPyBBZSh0KSA6IHQuY29udGV4dEVsZW1lbnQgPyBBZSh0LmNvbnRleHRFbGVtZW50KSA6IFtdLFxuICAgICAgICAgICAgcG9wcGVyOiBBZShlKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgcixcbiAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgdSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IEhlKHQpO1xuICAgICAgICAgICAgcmV0dXJuIEJ0LnJlZHVjZShmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gdC5jb25jYXQoZS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5waGFzZSA9PT0gaTtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgIH0oKHIgPSBbXS5jb25jYXQobiwgYS5vcHRpb25zLm1vZGlmaWVycyksIGMgPSByLnJlZHVjZShmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgdmFyIGkgPSB0W2UubmFtZV07XG4gICAgICAgICAgICByZXR1cm4gdFtlLm5hbWVdID0gaSA/IE9iamVjdC5hc3NpZ24oe30sIGksIGUsIHtcbiAgICAgICAgICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgaS5vcHRpb25zLCBlLm9wdGlvbnMpLFxuICAgICAgICAgICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBpLmRhdGEsIGUuZGF0YSlcbiAgICAgICAgICAgIH0pIDogZSwgdDtcbiAgICAgICAgICB9LCB7fSksIE9iamVjdC5rZXlzKGMpLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIGNbdF07XG4gICAgICAgICAgfSkpKTtcblxuICAgICAgICAgIHJldHVybiBhLm9yZGVyZWRNb2RpZmllcnMgPSB1LmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIHQuZW5hYmxlZDtcbiAgICAgICAgICB9KSwgYS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5uYW1lLFxuICAgICAgICAgICAgICAgIGkgPSB0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgbiA9IHZvaWQgMCA9PT0gaSA/IHt9IDogaSxcbiAgICAgICAgICAgICAgICBzID0gdC5lZmZlY3Q7XG5cbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHMpIHtcbiAgICAgICAgICAgICAgdmFyIG8gPSBzKHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogYSxcbiAgICAgICAgICAgICAgICBuYW1lOiBlLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBoLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG5cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGwucHVzaChvIHx8IGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgaC51cGRhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWMpIHtcbiAgICAgICAgICAgIHZhciB0ID0gYS5lbGVtZW50cyxcbiAgICAgICAgICAgICAgICBlID0gdC5yZWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgaSA9IHQucG9wcGVyO1xuXG4gICAgICAgICAgICBpZiAoUmUoZSwgaSkpIHtcbiAgICAgICAgICAgICAgYS5yZWN0cyA9IHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2U6IE1lKGUsIHRlKGkpLCBcImZpeGVkXCIgPT09IGEub3B0aW9ucy5zdHJhdGVneSksXG4gICAgICAgICAgICAgICAgcG9wcGVyOiBLdChpKVxuICAgICAgICAgICAgICB9LCBhLnJlc2V0ID0gITEsIGEucGxhY2VtZW50ID0gYS5vcHRpb25zLnBsYWNlbWVudCwgYS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5tb2RpZmllcnNEYXRhW3QubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCB0LmRhdGEpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGEub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IG4rKykgaWYgKCEwICE9PSBhLnJlc2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBhLm9yZGVyZWRNb2RpZmllcnNbbl0sXG4gICAgICAgICAgICAgICAgICAgIG8gPSBzLmZuLFxuICAgICAgICAgICAgICAgICAgICByID0gcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBsID0gdm9pZCAwID09PSByID8ge30gOiByLFxuICAgICAgICAgICAgICAgICAgICBkID0gcy5uYW1lO1xuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbyAmJiAoYSA9IG8oe1xuICAgICAgICAgICAgICAgICAgc3RhdGU6IGEsXG4gICAgICAgICAgICAgICAgICBvcHRpb25zOiBsLFxuICAgICAgICAgICAgICAgICAgbmFtZTogZCxcbiAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBoXG4gICAgICAgICAgICAgICAgfSkgfHwgYSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBhLnJlc2V0ID0gITEsIG4gPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZTogKHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBoLmZvcmNlVXBkYXRlKCksIHQoYSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gciB8fCAociA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgciA9IHZvaWQgMCwgdChzKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkpLCByO1xuICAgICAgICB9KSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQoKSwgYyA9ICEwO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKCFSZSh0LCBlKSkgcmV0dXJuIGg7XG5cbiAgICAgIGZ1bmN0aW9uIGQoKSB7XG4gICAgICAgIGwuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0KCk7XG4gICAgICAgIH0pLCBsID0gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoLnNldE9wdGlvbnMoaSkudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgICAhYyAmJiBpLm9uRmlyc3RVcGRhdGUgJiYgaS5vbkZpcnN0VXBkYXRlKHQpO1xuICAgICAgfSksIGg7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkZSA9IFdlKCksXG4gICAgICB6ZSA9IFdlKHtcbiAgICBkZWZhdWx0TW9kaWZpZXJzOiBbcGUsIFBlLCB1ZSwgRnRdXG4gIH0pLFxuICAgICAgcWUgPSBXZSh7XG4gICAgZGVmYXVsdE1vZGlmaWVyczogW3BlLCBQZSwgdWUsIEZ0LCBJZSwgeGUsIGplLCBsZSwgTmVdXG4gIH0pO1xuICBjb25zdCBGZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBwb3BwZXJHZW5lcmF0b3I6IFdlLFxuICAgIGRldGVjdE92ZXJmbG93OiBrZSxcbiAgICBjcmVhdGVQb3BwZXJCYXNlOiAkZSxcbiAgICBjcmVhdGVQb3BwZXI6IHFlLFxuICAgIGNyZWF0ZVBvcHBlckxpdGU6IHplLFxuICAgIHRvcDogbXQsXG4gICAgYm90dG9tOiBndCxcbiAgICByaWdodDogX3QsXG4gICAgbGVmdDogYnQsXG4gICAgYXV0bzogdnQsXG4gICAgYmFzZVBsYWNlbWVudHM6IHl0LFxuICAgIHN0YXJ0OiB3dCxcbiAgICBlbmQ6IEV0LFxuICAgIGNsaXBwaW5nUGFyZW50czogQXQsXG4gICAgdmlld3BvcnQ6IFR0LFxuICAgIHBvcHBlcjogT3QsXG4gICAgcmVmZXJlbmNlOiBDdCxcbiAgICB2YXJpYXRpb25QbGFjZW1lbnRzOiBrdCxcbiAgICBwbGFjZW1lbnRzOiBMdCxcbiAgICBiZWZvcmVSZWFkOiB4dCxcbiAgICByZWFkOiBEdCxcbiAgICBhZnRlclJlYWQ6IFN0LFxuICAgIGJlZm9yZU1haW46IE50LFxuICAgIG1haW46IEl0LFxuICAgIGFmdGVyTWFpbjogUHQsXG4gICAgYmVmb3JlV3JpdGU6IGp0LFxuICAgIHdyaXRlOiBNdCxcbiAgICBhZnRlcldyaXRlOiBIdCxcbiAgICBtb2RpZmllclBoYXNlczogQnQsXG4gICAgYXBwbHlTdHlsZXM6IEZ0LFxuICAgIGFycm93OiBsZSxcbiAgICBjb21wdXRlU3R5bGVzOiB1ZSxcbiAgICBldmVudExpc3RlbmVyczogcGUsXG4gICAgZmxpcDogeGUsXG4gICAgaGlkZTogTmUsXG4gICAgb2Zmc2V0OiBJZSxcbiAgICBwb3BwZXJPZmZzZXRzOiBQZSxcbiAgICBwcmV2ZW50T3ZlcmZsb3c6IGplXG4gIH0pLFxuICAgICAgICBVZSA9IFwiZHJvcGRvd25cIixcbiAgICAgICAgVmUgPSBcIkVzY2FwZVwiLFxuICAgICAgICBLZSA9IFwiU3BhY2VcIixcbiAgICAgICAgWGUgPSBcIkFycm93VXBcIixcbiAgICAgICAgWWUgPSBcIkFycm93RG93blwiLFxuICAgICAgICBRZSA9IG5ldyBSZWdFeHAoXCJBcnJvd1VwfEFycm93RG93bnxFc2NhcGVcIiksXG4gICAgICAgIEdlID0gXCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiLFxuICAgICAgICBaZSA9IFwia2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaVwiLFxuICAgICAgICBKZSA9IFwic2hvd1wiLFxuICAgICAgICB0aSA9ICdbZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gICAgICAgIGVpID0gXCIuZHJvcGRvd24tbWVudVwiLFxuICAgICAgICBpaSA9IG0oKSA/IFwidG9wLWVuZFwiIDogXCJ0b3Atc3RhcnRcIixcbiAgICAgICAgbmkgPSBtKCkgPyBcInRvcC1zdGFydFwiIDogXCJ0b3AtZW5kXCIsXG4gICAgICAgIHNpID0gbSgpID8gXCJib3R0b20tZW5kXCIgOiBcImJvdHRvbS1zdGFydFwiLFxuICAgICAgICBvaSA9IG0oKSA/IFwiYm90dG9tLXN0YXJ0XCIgOiBcImJvdHRvbS1lbmRcIixcbiAgICAgICAgcmkgPSBtKCkgPyBcImxlZnQtc3RhcnRcIiA6IFwicmlnaHQtc3RhcnRcIixcbiAgICAgICAgYWkgPSBtKCkgPyBcInJpZ2h0LXN0YXJ0XCIgOiBcImxlZnQtc3RhcnRcIixcbiAgICAgICAgbGkgPSB7XG4gICAgb2Zmc2V0OiBbMCwgMl0sXG4gICAgYm91bmRhcnk6IFwiY2xpcHBpbmdQYXJlbnRzXCIsXG4gICAgcmVmZXJlbmNlOiBcInRvZ2dsZVwiLFxuICAgIGRpc3BsYXk6IFwiZHluYW1pY1wiLFxuICAgIHBvcHBlckNvbmZpZzogbnVsbCxcbiAgICBhdXRvQ2xvc2U6ICEwXG4gIH0sXG4gICAgICAgIGNpID0ge1xuICAgIG9mZnNldDogXCIoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKVwiLFxuICAgIGJvdW5kYXJ5OiBcIihzdHJpbmd8ZWxlbWVudClcIixcbiAgICByZWZlcmVuY2U6IFwiKHN0cmluZ3xlbGVtZW50fG9iamVjdClcIixcbiAgICBkaXNwbGF5OiBcInN0cmluZ1wiLFxuICAgIHBvcHBlckNvbmZpZzogXCIobnVsbHxvYmplY3R8ZnVuY3Rpb24pXCIsXG4gICAgYXV0b0Nsb3NlOiBcIihib29sZWFufHN0cmluZylcIlxuICB9O1xuXG4gIGNsYXNzIGhpIGV4dGVuZHMgQiB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgc3VwZXIodCksIHRoaXMuX3BvcHBlciA9IG51bGwsIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhlKSwgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KCksIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgICAgcmV0dXJuIGxpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgICByZXR1cm4gY2k7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgICAgcmV0dXJuIFVlO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duKCkgPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdygpO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICBpZiAoYyh0aGlzLl9lbGVtZW50KSB8fCB0aGlzLl9pc1Nob3duKHRoaXMuX21lbnUpKSByZXR1cm47XG4gICAgICBjb25zdCB0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgaWYgKGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcInNob3cuYnMuZHJvcGRvd25cIiwgdCkuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgZSA9IGhpLmdldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgdGhpcy5faW5OYXZiYXIgPyBVLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgXCJwb3BwZXJcIiwgXCJub25lXCIpIDogdGhpcy5fY3JlYXRlUG9wcGVyKGUpLCBcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhZS5jbG9zZXN0KFwiLm5hdmJhci1uYXZcIikgJiYgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2godCA9PiBqLm9uKHQsIFwibW91c2VvdmVyXCIsIGQpKSwgdGhpcy5fZWxlbWVudC5mb2N1cygpLCB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgITApLCB0aGlzLl9tZW51LmNsYXNzTGlzdC5hZGQoSmUpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoSmUpLCBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgXCJzaG93bi5icy5kcm9wZG93blwiLCB0KTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgaWYgKGModGhpcy5fZWxlbWVudCkgfHwgIXRoaXMuX2lzU2hvd24odGhpcy5fbWVudSkpIHJldHVybjtcbiAgICAgIGNvbnN0IHQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2NvbXBsZXRlSGlkZSh0KTtcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgdGhpcy5fcG9wcGVyICYmIHRoaXMuX3BvcHBlci5kZXN0cm95KCksIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpLCB0aGlzLl9wb3BwZXIgJiYgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIF9jb21wbGV0ZUhpZGUodCkge1xuICAgICAgai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwiaGlkZS5icy5kcm9wZG93blwiLCB0KS5kZWZhdWx0UHJldmVudGVkIHx8IChcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikuZm9yRWFjaCh0ID0+IGoub2ZmKHQsIFwibW91c2VvdmVyXCIsIGQpKSwgdGhpcy5fcG9wcGVyICYmIHRoaXMuX3BvcHBlci5kZXN0cm95KCksIHRoaXMuX21lbnUuY2xhc3NMaXN0LnJlbW92ZShKZSksIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShKZSksIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBcImZhbHNlXCIpLCBVLnJlbW92ZURhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgXCJwb3BwZXJcIiksIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcImhpZGRlbi5icy5kcm9wZG93blwiLCB0KSk7XG4gICAgfVxuXG4gICAgX2dldENvbmZpZyh0KSB7XG4gICAgICBpZiAodCA9IHsgLi4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LFxuICAgICAgICAuLi5VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgICAuLi50XG4gICAgICB9LCBhKFVlLCB0LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSwgXCJvYmplY3RcIiA9PSB0eXBlb2YgdC5yZWZlcmVuY2UgJiYgIW8odC5yZWZlcmVuY2UpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdC5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB0aHJvdyBuZXcgVHlwZUVycm9yKGAke1VlLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLmApO1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVBvcHBlcih0KSB7XG4gICAgICBpZiAodm9pZCAwID09PSBGZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJvb3RzdHJhcCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKVwiKTtcbiAgICAgIGxldCBlID0gdGhpcy5fZWxlbWVudDtcbiAgICAgIFwicGFyZW50XCIgPT09IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPyBlID0gdCA6IG8odGhpcy5fY29uZmlnLnJlZmVyZW5jZSkgPyBlID0gcih0aGlzLl9jb25maWcucmVmZXJlbmNlKSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgJiYgKGUgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlKTtcblxuICAgICAgY29uc3QgaSA9IHRoaXMuX2dldFBvcHBlckNvbmZpZygpLFxuICAgICAgICAgICAgbiA9IGkubW9kaWZpZXJzLmZpbmQodCA9PiBcImFwcGx5U3R5bGVzXCIgPT09IHQubmFtZSAmJiAhMSA9PT0gdC5lbmFibGVkKTtcblxuICAgICAgdGhpcy5fcG9wcGVyID0gcWUoZSwgdGhpcy5fbWVudSwgaSksIG4gJiYgVS5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsIFwicG9wcGVyXCIsIFwic3RhdGljXCIpO1xuICAgIH1cblxuICAgIF9pc1Nob3duKHQgPSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICByZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoSmUpO1xuICAgIH1cblxuICAgIF9nZXRNZW51RWxlbWVudCgpIHtcbiAgICAgIHJldHVybiBWLm5leHQodGhpcy5fZWxlbWVudCwgZWkpWzBdO1xuICAgIH1cblxuICAgIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgICBjb25zdCB0ID0gdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcGVuZFwiKSkgcmV0dXJuIHJpO1xuICAgICAgaWYgKHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcHN0YXJ0XCIpKSByZXR1cm4gYWk7XG4gICAgICBjb25zdCBlID0gXCJlbmRcIiA9PT0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl9tZW51KS5nZXRQcm9wZXJ0eVZhbHVlKFwiLS1icy1wb3NpdGlvblwiKS50cmltKCk7XG4gICAgICByZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wdXBcIikgPyBlID8gbmkgOiBpaSA6IGUgPyBvaSA6IHNpO1xuICAgIH1cblxuICAgIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgICByZXR1cm4gbnVsbCAhPT0gdGhpcy5fZWxlbWVudC5jbG9zZXN0KFwiLm5hdmJhclwiKTtcbiAgICB9XG5cbiAgICBfZ2V0T2Zmc2V0KCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBvZmZzZXQ6IHRcbiAgICAgIH0gPSB0aGlzLl9jb25maWc7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IHQuc3BsaXQoXCIsXCIpLm1hcCh0ID0+IE51bWJlci5wYXJzZUludCh0LCAxMCkpIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ID8gZSA9PiB0KGUsIHRoaXMuX2VsZW1lbnQpIDogdDtcbiAgICB9XG5cbiAgICBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgICAgY29uc3QgdCA9IHtcbiAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcbiAgICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICAgIG5hbWU6IFwicHJldmVudE92ZXJmbG93XCIsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5hbWU6IFwib2Zmc2V0XCIsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH07XG4gICAgICByZXR1cm4gXCJzdGF0aWNcIiA9PT0gdGhpcy5fY29uZmlnLmRpc3BsYXkgJiYgKHQubW9kaWZpZXJzID0gW3tcbiAgICAgICAgbmFtZTogXCJhcHBseVN0eWxlc1wiLFxuICAgICAgICBlbmFibGVkOiAhMVxuICAgICAgfV0pLCB7IC4uLnQsXG4gICAgICAgIC4uLihcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgPyB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKHQpIDogdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZylcbiAgICAgIH07XG4gICAgfVxuXG4gICAgX3NlbGVjdE1lbnVJdGVtKHtcbiAgICAgIGtleTogdCxcbiAgICAgIHRhcmdldDogZVxuICAgIH0pIHtcbiAgICAgIGNvbnN0IGkgPSBWLmZpbmQoXCIuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKVwiLCB0aGlzLl9tZW51KS5maWx0ZXIobCk7XG4gICAgICBpLmxlbmd0aCAmJiB2KGksIGUsIHQgPT09IFllLCAhaS5pbmNsdWRlcyhlKSkuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gaGkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTtcblxuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGVbdF0pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO1xuICAgICAgICAgIGVbdF0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNsZWFyTWVudXModCkge1xuICAgICAgaWYgKHQgJiYgKDIgPT09IHQuYnV0dG9uIHx8IFwia2V5dXBcIiA9PT0gdC50eXBlICYmIFwiVGFiXCIgIT09IHQua2V5KSkgcmV0dXJuO1xuICAgICAgY29uc3QgZSA9IFYuZmluZCh0aSk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBuID0gZS5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgY29uc3QgbiA9IGhpLmdldEluc3RhbmNlKGVbaV0pO1xuICAgICAgICBpZiAoIW4gfHwgITEgPT09IG4uX2NvbmZpZy5hdXRvQ2xvc2UpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIW4uX2lzU2hvd24oKSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IHMgPSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogbi5fZWxlbWVudFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgY29uc3QgZSA9IHQuY29tcG9zZWRQYXRoKCksXG4gICAgICAgICAgICAgICAgaSA9IGUuaW5jbHVkZXMobi5fbWVudSk7XG4gICAgICAgICAgaWYgKGUuaW5jbHVkZXMobi5fZWxlbWVudCkgfHwgXCJpbnNpZGVcIiA9PT0gbi5fY29uZmlnLmF1dG9DbG9zZSAmJiAhaSB8fCBcIm91dHNpZGVcIiA9PT0gbi5fY29uZmlnLmF1dG9DbG9zZSAmJiBpKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAobi5fbWVudS5jb250YWlucyh0LnRhcmdldCkgJiYgKFwia2V5dXBcIiA9PT0gdC50eXBlICYmIFwiVGFiXCIgPT09IHQua2V5IHx8IC9pbnB1dHxzZWxlY3R8b3B0aW9ufHRleHRhcmVhfGZvcm0vaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpKSkgY29udGludWU7XG4gICAgICAgICAgXCJjbGlja1wiID09PSB0LnR5cGUgJiYgKHMuY2xpY2tFdmVudCA9IHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbi5fY29tcGxldGVIaWRlKHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQYXJlbnRGcm9tRWxlbWVudCh0KSB7XG4gICAgICByZXR1cm4gbih0KSB8fCB0LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgc3RhdGljIGRhdGFBcGlLZXlkb3duSGFuZGxlcih0KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdCh0LnRhcmdldC50YWdOYW1lKSA/IHQua2V5ID09PSBLZSB8fCB0LmtleSAhPT0gVmUgJiYgKHQua2V5ICE9PSBZZSAmJiB0LmtleSAhPT0gWGUgfHwgdC50YXJnZXQuY2xvc2VzdChlaSkpIDogIVFlLnRlc3QodC5rZXkpKSByZXR1cm47XG4gICAgICBjb25zdCBlID0gdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoSmUpO1xuICAgICAgaWYgKCFlICYmIHQua2V5ID09PSBWZSkgcmV0dXJuO1xuICAgICAgaWYgKHQucHJldmVudERlZmF1bHQoKSwgdC5zdG9wUHJvcGFnYXRpb24oKSwgYyh0aGlzKSkgcmV0dXJuO1xuICAgICAgY29uc3QgaSA9IHRoaXMubWF0Y2hlcyh0aSkgPyB0aGlzIDogVi5wcmV2KHRoaXMsIHRpKVswXSxcbiAgICAgICAgICAgIG4gPSBoaS5nZXRPckNyZWF0ZUluc3RhbmNlKGkpO1xuICAgICAgaWYgKHQua2V5ICE9PSBWZSkgcmV0dXJuIHQua2V5ID09PSBYZSB8fCB0LmtleSA9PT0gWWUgPyAoZSB8fCBuLnNob3coKSwgdm9pZCBuLl9zZWxlY3RNZW51SXRlbSh0KSkgOiB2b2lkIChlICYmIHQua2V5ICE9PSBLZSB8fCBoaS5jbGVhck1lbnVzKCkpO1xuICAgICAgbi5oaWRlKCk7XG4gICAgfVxuXG4gIH1cblxuICBqLm9uKGRvY3VtZW50LCBaZSwgdGksIGhpLmRhdGFBcGlLZXlkb3duSGFuZGxlciksIGoub24oZG9jdW1lbnQsIFplLCBlaSwgaGkuZGF0YUFwaUtleWRvd25IYW5kbGVyKSwgai5vbihkb2N1bWVudCwgR2UsIGhpLmNsZWFyTWVudXMpLCBqLm9uKGRvY3VtZW50LCBcImtleXVwLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsIGhpLmNsZWFyTWVudXMpLCBqLm9uKGRvY3VtZW50LCBHZSwgdGksIGZ1bmN0aW9uICh0KSB7XG4gICAgdC5wcmV2ZW50RGVmYXVsdCgpLCBoaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnRvZ2dsZSgpO1xuICB9KSwgZyhoaSk7XG4gIGNvbnN0IGRpID0gXCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCIsXG4gICAgICAgIHVpID0gXCIuc3RpY2t5LXRvcFwiO1xuXG4gIGNsYXNzIGZpIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xuICAgIH1cblxuICAgIGdldFdpZHRoKCkge1xuICAgICAgY29uc3QgdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgIHJldHVybiBNYXRoLmFicyh3aW5kb3cuaW5uZXJXaWR0aCAtIHQpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICBjb25zdCB0ID0gdGhpcy5nZXRXaWR0aCgpO1xuICAgICAgdGhpcy5fZGlzYWJsZU92ZXJGbG93KCksIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsIFwicGFkZGluZ1JpZ2h0XCIsIGUgPT4gZSArIHQpLCB0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyhkaSwgXCJwYWRkaW5nUmlnaHRcIiwgZSA9PiBlICsgdCksIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHVpLCBcIm1hcmdpblJpZ2h0XCIsIGUgPT4gZSAtIHQpO1xuICAgIH1cblxuICAgIF9kaXNhYmxlT3ZlckZsb3coKSB7XG4gICAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSh0aGlzLl9lbGVtZW50LCBcIm92ZXJmbG93XCIpLCB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICB9XG5cbiAgICBfc2V0RWxlbWVudEF0dHJpYnV0ZXModCwgZSwgaSkge1xuICAgICAgY29uc3QgbiA9IHRoaXMuZ2V0V2lkdGgoKTtcblxuICAgICAgdGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayh0LCB0ID0+IHtcbiAgICAgICAgaWYgKHQgIT09IHRoaXMuX2VsZW1lbnQgJiYgd2luZG93LmlubmVyV2lkdGggPiB0LmNsaWVudFdpZHRoICsgbikgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKHQsIGUpO1xuXG4gICAgICAgIGNvbnN0IHMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KVtlXTtcbiAgICAgICAgdC5zdHlsZVtlXSA9IGAke2koTnVtYmVyLnBhcnNlRmxvYXQocykpfXB4YDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LCBcIm92ZXJmbG93XCIpLCB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsIFwicGFkZGluZ1JpZ2h0XCIpLCB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKGRpLCBcInBhZGRpbmdSaWdodFwiKSwgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh1aSwgXCJtYXJnaW5SaWdodFwiKTtcbiAgICB9XG5cbiAgICBfc2F2ZUluaXRpYWxBdHRyaWJ1dGUodCwgZSkge1xuICAgICAgY29uc3QgaSA9IHQuc3R5bGVbZV07XG4gICAgICBpICYmIFUuc2V0RGF0YUF0dHJpYnV0ZSh0LCBlLCBpKTtcbiAgICB9XG5cbiAgICBfcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0LCBlKSB7XG4gICAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHQsIHQgPT4ge1xuICAgICAgICBjb25zdCBpID0gVS5nZXREYXRhQXR0cmlidXRlKHQsIGUpO1xuICAgICAgICB2b2lkIDAgPT09IGkgPyB0LnN0eWxlLnJlbW92ZVByb3BlcnR5KGUpIDogKFUucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0LCBlKSwgdC5zdHlsZVtlXSA9IGkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2sodCwgZSkge1xuICAgICAgbyh0KSA/IGUodCkgOiBWLmZpbmQodCwgdGhpcy5fZWxlbWVudCkuZm9yRWFjaChlKTtcbiAgICB9XG5cbiAgICBpc092ZXJmbG93aW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0V2lkdGgoKSA+IDA7XG4gICAgfVxuXG4gIH1cblxuICBjb25zdCBwaSA9IHtcbiAgICBjbGFzc05hbWU6IFwibW9kYWwtYmFja2Ryb3BcIixcbiAgICBpc1Zpc2libGU6ICEwLFxuICAgIGlzQW5pbWF0ZWQ6ICExLFxuICAgIHJvb3RFbGVtZW50OiBcImJvZHlcIixcbiAgICBjbGlja0NhbGxiYWNrOiBudWxsXG4gIH0sXG4gICAgICAgIG1pID0ge1xuICAgIGNsYXNzTmFtZTogXCJzdHJpbmdcIixcbiAgICBpc1Zpc2libGU6IFwiYm9vbGVhblwiLFxuICAgIGlzQW5pbWF0ZWQ6IFwiYm9vbGVhblwiLFxuICAgIHJvb3RFbGVtZW50OiBcIihlbGVtZW50fHN0cmluZylcIixcbiAgICBjbGlja0NhbGxiYWNrOiBcIihmdW5jdGlvbnxudWxsKVwiXG4gIH0sXG4gICAgICAgIGdpID0gXCJzaG93XCIsXG4gICAgICAgIF9pID0gXCJtb3VzZWRvd24uYnMuYmFja2Ryb3BcIjtcblxuICBjbGFzcyBiaSB7XG4gICAgY29uc3RydWN0b3IodCkge1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKHQpLCB0aGlzLl9pc0FwcGVuZGVkID0gITEsIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH1cblxuICAgIHNob3codCkge1xuICAgICAgdGhpcy5fY29uZmlnLmlzVmlzaWJsZSA/ICh0aGlzLl9hcHBlbmQoKSwgdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQgJiYgdSh0aGlzLl9nZXRFbGVtZW50KCkpLCB0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChnaSksIHRoaXMuX2VtdWxhdGVBbmltYXRpb24oKCkgPT4ge1xuICAgICAgICBfKHQpO1xuICAgICAgfSkpIDogXyh0KTtcbiAgICB9XG5cbiAgICBoaWRlKHQpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5pc1Zpc2libGUgPyAodGhpcy5fZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoZ2kpLCB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwb3NlKCksIF8odCk7XG4gICAgICB9KSkgOiBfKHQpO1xuICAgIH1cblxuICAgIF9nZXRFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0LmNsYXNzTmFtZSA9IHRoaXMuX2NvbmZpZy5jbGFzc05hbWUsIHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkICYmIHQuY2xhc3NMaXN0LmFkZChcImZhZGVcIiksIHRoaXMuX2VsZW1lbnQgPSB0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG5cbiAgICBfZ2V0Q29uZmlnKHQpIHtcbiAgICAgIHJldHVybiAodCA9IHsgLi4ucGksXG4gICAgICAgIC4uLihcIm9iamVjdFwiID09IHR5cGVvZiB0ID8gdCA6IHt9KVxuICAgICAgfSkucm9vdEVsZW1lbnQgPSByKHQucm9vdEVsZW1lbnQpLCBhKFwiYmFja2Ryb3BcIiwgdCwgbWkpLCB0O1xuICAgIH1cblxuICAgIF9hcHBlbmQoKSB7XG4gICAgICB0aGlzLl9pc0FwcGVuZGVkIHx8ICh0aGlzLl9jb25maWcucm9vdEVsZW1lbnQuYXBwZW5kKHRoaXMuX2dldEVsZW1lbnQoKSksIGoub24odGhpcy5fZ2V0RWxlbWVudCgpLCBfaSwgKCkgPT4ge1xuICAgICAgICBfKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKTtcbiAgICAgIH0pLCB0aGlzLl9pc0FwcGVuZGVkID0gITApO1xuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICB0aGlzLl9pc0FwcGVuZGVkICYmIChqLm9mZih0aGlzLl9lbGVtZW50LCBfaSksIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCksIHRoaXMuX2lzQXBwZW5kZWQgPSAhMSk7XG4gICAgfVxuXG4gICAgX2VtdWxhdGVBbmltYXRpb24odCkge1xuICAgICAgYih0LCB0aGlzLl9nZXRFbGVtZW50KCksIHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKTtcbiAgICB9XG5cbiAgfVxuXG4gIGNvbnN0IHZpID0ge1xuICAgIHRyYXBFbGVtZW50OiBudWxsLFxuICAgIGF1dG9mb2N1czogITBcbiAgfSxcbiAgICAgICAgeWkgPSB7XG4gICAgdHJhcEVsZW1lbnQ6IFwiZWxlbWVudFwiLFxuICAgIGF1dG9mb2N1czogXCJib29sZWFuXCJcbiAgfSxcbiAgICAgICAgd2kgPSBcIi5icy5mb2N1c3RyYXBcIixcbiAgICAgICAgRWkgPSBcImJhY2t3YXJkXCI7XG5cbiAgY2xhc3MgQWkge1xuICAgIGNvbnN0cnVjdG9yKHQpIHtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyh0KSwgdGhpcy5faXNBY3RpdmUgPSAhMSwgdGhpcy5fbGFzdFRhYk5hdkRpcmVjdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRyYXBFbGVtZW50OiB0LFxuICAgICAgICBhdXRvZm9jdXM6IGVcbiAgICAgIH0gPSB0aGlzLl9jb25maWc7XG4gICAgICB0aGlzLl9pc0FjdGl2ZSB8fCAoZSAmJiB0LmZvY3VzKCksIGoub2ZmKGRvY3VtZW50LCB3aSksIGoub24oZG9jdW1lbnQsIFwiZm9jdXNpbi5icy5mb2N1c3RyYXBcIiwgdCA9PiB0aGlzLl9oYW5kbGVGb2N1c2luKHQpKSwgai5vbihkb2N1bWVudCwgXCJrZXlkb3duLnRhYi5icy5mb2N1c3RyYXBcIiwgdCA9PiB0aGlzLl9oYW5kbGVLZXlkb3duKHQpKSwgdGhpcy5faXNBY3RpdmUgPSAhMCk7XG4gICAgfVxuXG4gICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgIHRoaXMuX2lzQWN0aXZlICYmICh0aGlzLl9pc0FjdGl2ZSA9ICExLCBqLm9mZihkb2N1bWVudCwgd2kpKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlRm9jdXNpbih0KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRhcmdldDogZVxuICAgICAgfSA9IHQsXG4gICAgICAgICAgICB7XG4gICAgICAgIHRyYXBFbGVtZW50OiBpXG4gICAgICB9ID0gdGhpcy5fY29uZmlnO1xuICAgICAgaWYgKGUgPT09IGRvY3VtZW50IHx8IGUgPT09IGkgfHwgaS5jb250YWlucyhlKSkgcmV0dXJuO1xuICAgICAgY29uc3QgbiA9IFYuZm9jdXNhYmxlQ2hpbGRyZW4oaSk7XG4gICAgICAwID09PSBuLmxlbmd0aCA/IGkuZm9jdXMoKSA6IHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPT09IEVpID8gbltuLmxlbmd0aCAtIDFdLmZvY3VzKCkgOiBuWzBdLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgX2hhbmRsZUtleWRvd24odCkge1xuICAgICAgXCJUYWJcIiA9PT0gdC5rZXkgJiYgKHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSB0LnNoaWZ0S2V5ID8gRWkgOiBcImZvcndhcmRcIik7XG4gICAgfVxuXG4gICAgX2dldENvbmZpZyh0KSB7XG4gICAgICByZXR1cm4gdCA9IHsgLi4udmksXG4gICAgICAgIC4uLihcIm9iamVjdFwiID09IHR5cGVvZiB0ID8gdCA6IHt9KVxuICAgICAgfSwgYShcImZvY3VzdHJhcFwiLCB0LCB5aSksIHQ7XG4gICAgfVxuXG4gIH1cblxuICBjb25zdCBUaSA9IFwibW9kYWxcIixcbiAgICAgICAgT2kgPSBcIkVzY2FwZVwiLFxuICAgICAgICBDaSA9IHtcbiAgICBiYWNrZHJvcDogITAsXG4gICAga2V5Ym9hcmQ6ICEwLFxuICAgIGZvY3VzOiAhMFxuICB9LFxuICAgICAgICBraSA9IHtcbiAgICBiYWNrZHJvcDogXCIoYm9vbGVhbnxzdHJpbmcpXCIsXG4gICAga2V5Ym9hcmQ6IFwiYm9vbGVhblwiLFxuICAgIGZvY3VzOiBcImJvb2xlYW5cIlxuICB9LFxuICAgICAgICBMaSA9IFwiaGlkZGVuLmJzLm1vZGFsXCIsXG4gICAgICAgIHhpID0gXCJzaG93LmJzLm1vZGFsXCIsXG4gICAgICAgIERpID0gXCJyZXNpemUuYnMubW9kYWxcIixcbiAgICAgICAgU2kgPSBcImNsaWNrLmRpc21pc3MuYnMubW9kYWxcIixcbiAgICAgICAgTmkgPSBcImtleWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLFxuICAgICAgICBJaSA9IFwibW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWxcIixcbiAgICAgICAgUGkgPSBcIm1vZGFsLW9wZW5cIixcbiAgICAgICAgamkgPSBcInNob3dcIixcbiAgICAgICAgTWkgPSBcIm1vZGFsLXN0YXRpY1wiO1xuXG4gIGNsYXNzIEhpIGV4dGVuZHMgQiB7XG4gICAgY29uc3RydWN0b3IodCwgZSkge1xuICAgICAgc3VwZXIodCksIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhlKSwgdGhpcy5fZGlhbG9nID0gVi5maW5kT25lKFwiLm1vZGFsLWRpYWxvZ1wiLCB0aGlzLl9lbGVtZW50KSwgdGhpcy5fYmFja2Ryb3AgPSB0aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKSwgdGhpcy5fZm9jdXN0cmFwID0gdGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpLCB0aGlzLl9pc1Nob3duID0gITEsIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSAhMSwgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gITEsIHRoaXMuX3Njcm9sbEJhciA9IG5ldyBmaSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICAgIHJldHVybiBDaTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgICByZXR1cm4gVGk7XG4gICAgfVxuXG4gICAgdG9nZ2xlKHQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3codCk7XG4gICAgfVxuXG4gICAgc2hvdyh0KSB7XG4gICAgICB0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgeGksIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdFxuICAgICAgfSkuZGVmYXVsdFByZXZlbnRlZCB8fCAodGhpcy5faXNTaG93biA9ICEwLCB0aGlzLl9pc0FuaW1hdGVkKCkgJiYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9ICEwKSwgdGhpcy5fc2Nyb2xsQmFyLmhpZGUoKSwgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFBpKSwgdGhpcy5fYWRqdXN0RGlhbG9nKCksIHRoaXMuX3NldEVzY2FwZUV2ZW50KCksIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCksIGoub24odGhpcy5fZGlhbG9nLCBJaSwgKCkgPT4ge1xuICAgICAgICBqLm9uZSh0aGlzLl9lbGVtZW50LCBcIm1vdXNldXAuZGlzbWlzcy5icy5tb2RhbFwiLCB0ID0+IHtcbiAgICAgICAgICB0LnRhcmdldCA9PT0gdGhpcy5fZWxlbWVudCAmJiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9ICEwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSwgdGhpcy5fc2hvd0JhY2tkcm9wKCgpID0+IHRoaXMuX3Nob3dFbGVtZW50KHQpKSk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHJldHVybjtcbiAgICAgIGlmIChqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgXCJoaWRlLmJzLm1vZGFsXCIpLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSAhMTtcblxuICAgICAgY29uc3QgdCA9IHRoaXMuX2lzQW5pbWF0ZWQoKTtcblxuICAgICAgdCAmJiAodGhpcy5faXNUcmFuc2l0aW9uaW5nID0gITApLCB0aGlzLl9zZXRFc2NhcGVFdmVudCgpLCB0aGlzLl9zZXRSZXNpemVFdmVudCgpLCB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoamkpLCBqLm9mZih0aGlzLl9lbGVtZW50LCBTaSksIGoub2ZmKHRoaXMuX2RpYWxvZywgSWkpLCB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHRoaXMuX2hpZGVNb2RhbCgpLCB0aGlzLl9lbGVtZW50LCB0KTtcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgW3dpbmRvdywgdGhpcy5fZGlhbG9nXS5mb3JFYWNoKHQgPT4gai5vZmYodCwgXCIuYnMubW9kYWxcIikpLCB0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKCksIHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCksIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICBoYW5kbGVVcGRhdGUoKSB7XG4gICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgICB9XG5cbiAgICBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xuICAgICAgcmV0dXJuIG5ldyBiaSh7XG4gICAgICAgIGlzVmlzaWJsZTogQm9vbGVhbih0aGlzLl9jb25maWcuYmFja2Ryb3ApLFxuICAgICAgICBpc0FuaW1hdGVkOiB0aGlzLl9pc0FuaW1hdGVkKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9pbml0aWFsaXplRm9jdXNUcmFwKCkge1xuICAgICAgcmV0dXJuIG5ldyBBaSh7XG4gICAgICAgIHRyYXBFbGVtZW50OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfZ2V0Q29uZmlnKHQpIHtcbiAgICAgIHJldHVybiB0ID0geyAuLi5DaSxcbiAgICAgICAgLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgICAgLi4uKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgPyB0IDoge30pXG4gICAgICB9LCBhKFRpLCB0LCBraSksIHQ7XG4gICAgfVxuXG4gICAgX3Nob3dFbGVtZW50KHQpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzLl9pc0FuaW1hdGVkKCksXG4gICAgICAgICAgICBpID0gVi5maW5kT25lKFwiLm1vZGFsLWJvZHlcIiwgdGhpcy5fZGlhbG9nKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgfHwgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy5fZWxlbWVudCksIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIiwgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSwgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsICEwKSwgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiZGlhbG9nXCIpLCB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDAsIGkgJiYgKGkuc2Nyb2xsVG9wID0gMCksIGUgJiYgdSh0aGlzLl9lbGVtZW50KSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGppKSwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5mb2N1cyAmJiB0aGlzLl9mb2N1c3RyYXAuYWN0aXZhdGUoKSwgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gITEsIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcInNob3duLmJzLm1vZGFsXCIsIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0XG4gICAgICAgIH0pO1xuICAgICAgfSwgdGhpcy5fZGlhbG9nLCBlKTtcbiAgICB9XG5cbiAgICBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgICB0aGlzLl9pc1Nob3duID8gai5vbih0aGlzLl9lbGVtZW50LCBOaSwgdCA9PiB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiB0LmtleSA9PT0gT2kgPyAodC5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmhpZGUoKSkgOiB0aGlzLl9jb25maWcua2V5Ym9hcmQgfHwgdC5rZXkgIT09IE9pIHx8IHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgIH0pIDogai5vZmYodGhpcy5fZWxlbWVudCwgTmkpO1xuICAgIH1cblxuICAgIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgIHRoaXMuX2lzU2hvd24gPyBqLm9uKHdpbmRvdywgRGksICgpID0+IHRoaXMuX2FkanVzdERpYWxvZygpKSA6IGoub2ZmKHdpbmRvdywgRGkpO1xuICAgIH1cblxuICAgIF9oaWRlTW9kYWwoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIiwgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCAhMCksIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiKSwgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJyb2xlXCIpLCB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSAhMSwgdGhpcy5fYmFja2Ryb3AuaGlkZSgoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShQaSksIHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKSwgdGhpcy5fc2Nyb2xsQmFyLnJlc2V0KCksIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBMaSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfc2hvd0JhY2tkcm9wKHQpIHtcbiAgICAgIGoub24odGhpcy5fZWxlbWVudCwgU2ksIHQgPT4ge1xuICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID8gdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9ICExIDogdC50YXJnZXQgPT09IHQuY3VycmVudFRhcmdldCAmJiAoITAgPT09IHRoaXMuX2NvbmZpZy5iYWNrZHJvcCA/IHRoaXMuaGlkZSgpIDogXCJzdGF0aWNcIiA9PT0gdGhpcy5fY29uZmlnLmJhY2tkcm9wICYmIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSk7XG4gICAgICB9KSwgdGhpcy5fYmFja2Ryb3Auc2hvdyh0KTtcbiAgICB9XG5cbiAgICBfaXNBbmltYXRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImZhZGVcIik7XG4gICAgfVxuXG4gICAgX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSB7XG4gICAgICBpZiAoai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwiaGlkZVByZXZlbnRlZC5icy5tb2RhbFwiKS5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgICBjb25zdCB7XG4gICAgICAgIGNsYXNzTGlzdDogdCxcbiAgICAgICAgc2Nyb2xsSGVpZ2h0OiBlLFxuICAgICAgICBzdHlsZTogaVxuICAgICAgfSA9IHRoaXMuX2VsZW1lbnQsXG4gICAgICAgICAgICBuID0gZSA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAhbiAmJiBcImhpZGRlblwiID09PSBpLm92ZXJmbG93WSB8fCB0LmNvbnRhaW5zKE1pKSB8fCAobiB8fCAoaS5vdmVyZmxvd1kgPSBcImhpZGRlblwiKSwgdC5hZGQoTWkpLCB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgdC5yZW1vdmUoTWkpLCBuIHx8IHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgIGkub3ZlcmZsb3dZID0gXCJcIjtcbiAgICAgICAgfSwgdGhpcy5fZGlhbG9nKTtcbiAgICAgIH0sIHRoaXMuX2RpYWxvZyksIHRoaXMuX2VsZW1lbnQuZm9jdXMoKSk7XG4gICAgfVxuXG4gICAgX2FkanVzdERpYWxvZygpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICBlID0gdGhpcy5fc2Nyb2xsQmFyLmdldFdpZHRoKCksXG4gICAgICAgICAgICBpID0gZSA+IDA7XG5cbiAgICAgICghaSAmJiB0ICYmICFtKCkgfHwgaSAmJiAhdCAmJiBtKCkpICYmICh0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gYCR7ZX1weGApLCAoaSAmJiAhdCAmJiAhbSgpIHx8ICFpICYmIHQgJiYgbSgpKSAmJiAodGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtlfXB4YCk7XG4gICAgfVxuXG4gICAgX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCJcIiwgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiO1xuICAgIH1cblxuICAgIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCwgZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGkgPSBIaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIHQpO1xuXG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gaVt0XSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7XG4gICAgICAgICAgaVt0XShlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gIH1cblxuICBqLm9uKGRvY3VtZW50LCBcImNsaWNrLmJzLm1vZGFsLmRhdGEtYXBpXCIsICdbZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uICh0KSB7XG4gICAgY29uc3QgZSA9IG4odGhpcyk7XG4gICAgW1wiQVwiLCBcIkFSRUFcIl0uaW5jbHVkZXModGhpcy50YWdOYW1lKSAmJiB0LnByZXZlbnREZWZhdWx0KCksIGoub25lKGUsIHhpLCB0ID0+IHtcbiAgICAgIHQuZGVmYXVsdFByZXZlbnRlZCB8fCBqLm9uZShlLCBMaSwgKCkgPT4ge1xuICAgICAgICBsKHRoaXMpICYmIHRoaXMuZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGkgPSBWLmZpbmRPbmUoXCIubW9kYWwuc2hvd1wiKTtcbiAgICBpICYmIEhpLmdldEluc3RhbmNlKGkpLmhpZGUoKSwgSGkuZ2V0T3JDcmVhdGVJbnN0YW5jZShlKS50b2dnbGUodGhpcyk7XG4gIH0pLCBSKEhpKSwgZyhIaSk7XG4gIGNvbnN0IEJpID0gXCJvZmZjYW52YXNcIixcbiAgICAgICAgUmkgPSB7XG4gICAgYmFja2Ryb3A6ICEwLFxuICAgIGtleWJvYXJkOiAhMCxcbiAgICBzY3JvbGw6ICExXG4gIH0sXG4gICAgICAgIFdpID0ge1xuICAgIGJhY2tkcm9wOiBcImJvb2xlYW5cIixcbiAgICBrZXlib2FyZDogXCJib29sZWFuXCIsXG4gICAgc2Nyb2xsOiBcImJvb2xlYW5cIlxuICB9LFxuICAgICAgICAkaSA9IFwic2hvd1wiLFxuICAgICAgICB6aSA9IFwiLm9mZmNhbnZhcy5zaG93XCIsXG4gICAgICAgIHFpID0gXCJoaWRkZW4uYnMub2ZmY2FudmFzXCI7XG5cbiAgY2xhc3MgRmkgZXh0ZW5kcyBCIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICBzdXBlcih0KSwgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGUpLCB0aGlzLl9pc1Nob3duID0gITEsIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKCksIHRoaXMuX2ZvY3VzdHJhcCA9IHRoaXMuX2luaXRpYWxpemVGb2N1c1RyYXAoKSwgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgICByZXR1cm4gQmk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgICAgcmV0dXJuIFJpO1xuICAgIH1cblxuICAgIHRvZ2dsZSh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHQpO1xuICAgIH1cblxuICAgIHNob3codCkge1xuICAgICAgdGhpcy5faXNTaG93biB8fCBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgXCJzaG93LmJzLm9mZmNhbnZhc1wiLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRcbiAgICAgIH0pLmRlZmF1bHRQcmV2ZW50ZWQgfHwgKHRoaXMuX2lzU2hvd24gPSAhMCwgdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCIsIHRoaXMuX2JhY2tkcm9wLnNob3coKSwgdGhpcy5fY29uZmlnLnNjcm9sbCB8fCBuZXcgZmkoKS5oaWRlKCksIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiksIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiLCAhMCksIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImRpYWxvZ1wiKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCRpKSwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5zY3JvbGwgfHwgdGhpcy5fZm9jdXN0cmFwLmFjdGl2YXRlKCksIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcInNob3duLmJzLm9mZmNhbnZhc1wiLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdFxuICAgICAgICB9KTtcbiAgICAgIH0sIHRoaXMuX2VsZW1lbnQsICEwKSk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgIHRoaXMuX2lzU2hvd24gJiYgKGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcImhpZGUuYnMub2ZmY2FudmFzXCIpLmRlZmF1bHRQcmV2ZW50ZWQgfHwgKHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCksIHRoaXMuX2VsZW1lbnQuYmx1cigpLCB0aGlzLl9pc1Nob3duID0gITEsIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgkaSksIHRoaXMuX2JhY2tkcm9wLmhpZGUoKSwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgITApLCB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiksIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwicm9sZVwiKSwgdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIiwgdGhpcy5fY29uZmlnLnNjcm9sbCB8fCBuZXcgZmkoKS5yZXNldCgpLCBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgcWkpO1xuICAgICAgfSwgdGhpcy5fZWxlbWVudCwgITApKSk7XG4gICAgfVxuXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKSwgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKSwgc3VwZXIuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIF9nZXRDb25maWcodCkge1xuICAgICAgcmV0dXJuIHQgPSB7IC4uLlJpLFxuICAgICAgICAuLi5VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgICAuLi4oXCJvYmplY3RcIiA9PSB0eXBlb2YgdCA/IHQgOiB7fSlcbiAgICAgIH0sIGEoQmksIHQsIFdpKSwgdDtcbiAgICB9XG5cbiAgICBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xuICAgICAgcmV0dXJuIG5ldyBiaSh7XG4gICAgICAgIGNsYXNzTmFtZTogXCJvZmZjYW52YXMtYmFja2Ryb3BcIixcbiAgICAgICAgaXNWaXNpYmxlOiB0aGlzLl9jb25maWcuYmFja2Ryb3AsXG4gICAgICAgIGlzQW5pbWF0ZWQ6ICEwLFxuICAgICAgICByb290RWxlbWVudDogdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBjbGlja0NhbGxiYWNrOiAoKSA9PiB0aGlzLmhpZGUoKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemVGb2N1c1RyYXAoKSB7XG4gICAgICByZXR1cm4gbmV3IEFpKHtcbiAgICAgICAgdHJhcEVsZW1lbnQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIGoub24odGhpcy5fZWxlbWVudCwgXCJrZXlkb3duLmRpc21pc3MuYnMub2ZmY2FudmFzXCIsIHQgPT4ge1xuICAgICAgICB0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgXCJFc2NhcGVcIiA9PT0gdC5rZXkgJiYgdGhpcy5oaWRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gRmkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTtcblxuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGVbdF0gfHwgdC5zdGFydHNXaXRoKFwiX1wiKSB8fCBcImNvbnN0cnVjdG9yXCIgPT09IHQpIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO1xuICAgICAgICAgIGVbdF0odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgai5vbihkb2N1bWVudCwgXCJjbGljay5icy5vZmZjYW52YXMuZGF0YS1hcGlcIiwgJ1tkYXRhLWJzLXRvZ2dsZT1cIm9mZmNhbnZhc1wiXScsIGZ1bmN0aW9uICh0KSB7XG4gICAgY29uc3QgZSA9IG4odGhpcyk7XG4gICAgaWYgKFtcIkFcIiwgXCJBUkVBXCJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkgJiYgdC5wcmV2ZW50RGVmYXVsdCgpLCBjKHRoaXMpKSByZXR1cm47XG4gICAgai5vbmUoZSwgcWksICgpID0+IHtcbiAgICAgIGwodGhpcykgJiYgdGhpcy5mb2N1cygpO1xuICAgIH0pO1xuICAgIGNvbnN0IGkgPSBWLmZpbmRPbmUoemkpO1xuICAgIGkgJiYgaSAhPT0gZSAmJiBGaS5nZXRJbnN0YW5jZShpKS5oaWRlKCksIEZpLmdldE9yQ3JlYXRlSW5zdGFuY2UoZSkudG9nZ2xlKHRoaXMpO1xuICB9KSwgai5vbih3aW5kb3csIFwibG9hZC5icy5vZmZjYW52YXMuZGF0YS1hcGlcIiwgKCkgPT4gVi5maW5kKHppKS5mb3JFYWNoKHQgPT4gRmkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0KS5zaG93KCkpKSwgUihGaSksIGcoRmkpO1xuXG4gIGNvbnN0IFVpID0gbmV3IFNldChbXCJiYWNrZ3JvdW5kXCIsIFwiY2l0ZVwiLCBcImhyZWZcIiwgXCJpdGVtdHlwZVwiLCBcImxvbmdkZXNjXCIsIFwicG9zdGVyXCIsIFwic3JjXCIsIFwieGxpbms6aHJlZlwiXSksXG4gICAgICAgIFZpID0gL14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZXxzbXMpOnxbXiMmLzo/XSooPzpbIy8/XXwkKSkvaSxcbiAgICAgICAgS2kgPSAvXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pLFxuICAgICAgICBYaSA9ICh0LCBlKSA9PiB7XG4gICAgY29uc3QgaSA9IHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZS5pbmNsdWRlcyhpKSkgcmV0dXJuICFVaS5oYXMoaSkgfHwgQm9vbGVhbihWaS50ZXN0KHQubm9kZVZhbHVlKSB8fCBLaS50ZXN0KHQubm9kZVZhbHVlKSk7XG4gICAgY29uc3QgbiA9IGUuZmlsdGVyKHQgPT4gdCBpbnN0YW5jZW9mIFJlZ0V4cCk7XG5cbiAgICBmb3IgKGxldCB0ID0gMCwgZSA9IG4ubGVuZ3RoOyB0IDwgZTsgdCsrKSBpZiAoblt0XS50ZXN0KGkpKSByZXR1cm4gITA7XG5cbiAgICByZXR1cm4gITE7XG4gIH07XG5cbiAgZnVuY3Rpb24gWWkodCwgZSwgaSkge1xuICAgIGlmICghdC5sZW5ndGgpIHJldHVybiB0O1xuICAgIGlmIChpICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaSkgcmV0dXJuIGkodCk7XG4gICAgY29uc3QgbiA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHQsIFwidGV4dC9odG1sXCIpLFxuICAgICAgICAgIHMgPSBbXS5jb25jYXQoLi4ubi5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpKTtcblxuICAgIGZvciAobGV0IHQgPSAwLCBpID0gcy5sZW5ndGg7IHQgPCBpOyB0KyspIHtcbiAgICAgIGNvbnN0IGkgPSBzW3RdLFxuICAgICAgICAgICAgbiA9IGkubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKCFPYmplY3Qua2V5cyhlKS5pbmNsdWRlcyhuKSkge1xuICAgICAgICBpLnJlbW92ZSgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbyA9IFtdLmNvbmNhdCguLi5pLmF0dHJpYnV0ZXMpLFxuICAgICAgICAgICAgciA9IFtdLmNvbmNhdChlW1wiKlwiXSB8fCBbXSwgZVtuXSB8fCBbXSk7XG4gICAgICBvLmZvckVhY2godCA9PiB7XG4gICAgICAgIFhpKHQsIHIpIHx8IGkucmVtb3ZlQXR0cmlidXRlKHQubm9kZU5hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG4uYm9keS5pbm5lckhUTUw7XG4gIH1cblxuICBjb25zdCBRaSA9IFwidG9vbHRpcFwiLFxuICAgICAgICBHaSA9IG5ldyBTZXQoW1wic2FuaXRpemVcIiwgXCJhbGxvd0xpc3RcIiwgXCJzYW5pdGl6ZUZuXCJdKSxcbiAgICAgICAgWmkgPSB7XG4gICAgYW5pbWF0aW9uOiBcImJvb2xlYW5cIixcbiAgICB0ZW1wbGF0ZTogXCJzdHJpbmdcIixcbiAgICB0aXRsZTogXCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCIsXG4gICAgdHJpZ2dlcjogXCJzdHJpbmdcIixcbiAgICBkZWxheTogXCIobnVtYmVyfG9iamVjdClcIixcbiAgICBodG1sOiBcImJvb2xlYW5cIixcbiAgICBzZWxlY3RvcjogXCIoc3RyaW5nfGJvb2xlYW4pXCIsXG4gICAgcGxhY2VtZW50OiBcIihzdHJpbmd8ZnVuY3Rpb24pXCIsXG4gICAgb2Zmc2V0OiBcIihhcnJheXxzdHJpbmd8ZnVuY3Rpb24pXCIsXG4gICAgY29udGFpbmVyOiBcIihzdHJpbmd8ZWxlbWVudHxib29sZWFuKVwiLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50czogXCJhcnJheVwiLFxuICAgIGJvdW5kYXJ5OiBcIihzdHJpbmd8ZWxlbWVudClcIixcbiAgICBjdXN0b21DbGFzczogXCIoc3RyaW5nfGZ1bmN0aW9uKVwiLFxuICAgIHNhbml0aXplOiBcImJvb2xlYW5cIixcbiAgICBzYW5pdGl6ZUZuOiBcIihudWxsfGZ1bmN0aW9uKVwiLFxuICAgIGFsbG93TGlzdDogXCJvYmplY3RcIixcbiAgICBwb3BwZXJDb25maWc6IFwiKG51bGx8b2JqZWN0fGZ1bmN0aW9uKVwiXG4gIH0sXG4gICAgICAgIEppID0ge1xuICAgIEFVVE86IFwiYXV0b1wiLFxuICAgIFRPUDogXCJ0b3BcIixcbiAgICBSSUdIVDogbSgpID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsXG4gICAgQk9UVE9NOiBcImJvdHRvbVwiLFxuICAgIExFRlQ6IG0oKSA/IFwicmlnaHRcIiA6IFwibGVmdFwiXG4gIH0sXG4gICAgICAgIHRuID0ge1xuICAgIGFuaW1hdGlvbjogITAsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogXCJob3ZlciBmb2N1c1wiLFxuICAgIHRpdGxlOiBcIlwiLFxuICAgIGRlbGF5OiAwLFxuICAgIGh0bWw6ICExLFxuICAgIHNlbGVjdG9yOiAhMSxcbiAgICBwbGFjZW1lbnQ6IFwidG9wXCIsXG4gICAgb2Zmc2V0OiBbMCwgMF0sXG4gICAgY29udGFpbmVyOiAhMSxcbiAgICBmYWxsYmFja1BsYWNlbWVudHM6IFtcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiXSxcbiAgICBib3VuZGFyeTogXCJjbGlwcGluZ1BhcmVudHNcIixcbiAgICBjdXN0b21DbGFzczogXCJcIixcbiAgICBzYW5pdGl6ZTogITAsXG4gICAgc2FuaXRpemVGbjogbnVsbCxcbiAgICBhbGxvd0xpc3Q6IHtcbiAgICAgIFwiKlwiOiBbXCJjbGFzc1wiLCBcImRpclwiLCBcImlkXCIsIFwibGFuZ1wiLCBcInJvbGVcIiwgL15hcmlhLVtcXHctXSokL2ldLFxuICAgICAgYTogW1widGFyZ2V0XCIsIFwiaHJlZlwiLCBcInRpdGxlXCIsIFwicmVsXCJdLFxuICAgICAgYXJlYTogW10sXG4gICAgICBiOiBbXSxcbiAgICAgIGJyOiBbXSxcbiAgICAgIGNvbDogW10sXG4gICAgICBjb2RlOiBbXSxcbiAgICAgIGRpdjogW10sXG4gICAgICBlbTogW10sXG4gICAgICBocjogW10sXG4gICAgICBoMTogW10sXG4gICAgICBoMjogW10sXG4gICAgICBoMzogW10sXG4gICAgICBoNDogW10sXG4gICAgICBoNTogW10sXG4gICAgICBoNjogW10sXG4gICAgICBpOiBbXSxcbiAgICAgIGltZzogW1wic3JjXCIsIFwic3Jjc2V0XCIsIFwiYWx0XCIsIFwidGl0bGVcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiXSxcbiAgICAgIGxpOiBbXSxcbiAgICAgIG9sOiBbXSxcbiAgICAgIHA6IFtdLFxuICAgICAgcHJlOiBbXSxcbiAgICAgIHM6IFtdLFxuICAgICAgc21hbGw6IFtdLFxuICAgICAgc3BhbjogW10sXG4gICAgICBzdWI6IFtdLFxuICAgICAgc3VwOiBbXSxcbiAgICAgIHN0cm9uZzogW10sXG4gICAgICB1OiBbXSxcbiAgICAgIHVsOiBbXVxuICAgIH0sXG4gICAgcG9wcGVyQ29uZmlnOiBudWxsXG4gIH0sXG4gICAgICAgIGVuID0ge1xuICAgIEhJREU6IFwiaGlkZS5icy50b29sdGlwXCIsXG4gICAgSElEREVOOiBcImhpZGRlbi5icy50b29sdGlwXCIsXG4gICAgU0hPVzogXCJzaG93LmJzLnRvb2x0aXBcIixcbiAgICBTSE9XTjogXCJzaG93bi5icy50b29sdGlwXCIsXG4gICAgSU5TRVJURUQ6IFwiaW5zZXJ0ZWQuYnMudG9vbHRpcFwiLFxuICAgIENMSUNLOiBcImNsaWNrLmJzLnRvb2x0aXBcIixcbiAgICBGT0NVU0lOOiBcImZvY3VzaW4uYnMudG9vbHRpcFwiLFxuICAgIEZPQ1VTT1VUOiBcImZvY3Vzb3V0LmJzLnRvb2x0aXBcIixcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXIuYnMudG9vbHRpcFwiLFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZS5icy50b29sdGlwXCJcbiAgfSxcbiAgICAgICAgbm4gPSBcImZhZGVcIixcbiAgICAgICAgc24gPSBcInNob3dcIixcbiAgICAgICAgb24gPSBcInNob3dcIixcbiAgICAgICAgcm4gPSBcIm91dFwiLFxuICAgICAgICBhbiA9IFwiLnRvb2x0aXAtaW5uZXJcIixcbiAgICAgICAgbG4gPSBcIi5tb2RhbFwiLFxuICAgICAgICBjbiA9IFwiaGlkZS5icy5tb2RhbFwiLFxuICAgICAgICBobiA9IFwiaG92ZXJcIixcbiAgICAgICAgZG4gPSBcImZvY3VzXCI7XG5cbiAgY2xhc3MgdW4gZXh0ZW5kcyBCIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBGZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJvb3RzdHJhcCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO1xuICAgICAgc3VwZXIodCksIHRoaXMuX2lzRW5hYmxlZCA9ICEwLCB0aGlzLl90aW1lb3V0ID0gMCwgdGhpcy5faG92ZXJTdGF0ZSA9IFwiXCIsIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fSwgdGhpcy5fcG9wcGVyID0gbnVsbCwgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGUpLCB0aGlzLnRpcCA9IG51bGwsIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICAgIHJldHVybiB0bjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgICByZXR1cm4gUWk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBFdmVudCgpIHtcbiAgICAgIHJldHVybiBlbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgICAgcmV0dXJuIFppO1xuICAgIH1cblxuICAgIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9ICEwO1xuICAgIH1cblxuICAgIGRpc2FibGUoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhMTtcbiAgICB9XG5cbiAgICB0b2dnbGVFbmFibGVkKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZDtcbiAgICB9XG5cbiAgICB0b2dnbGUodCkge1xuICAgICAgaWYgKHRoaXMuX2lzRW5hYmxlZCkgaWYgKHQpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCh0KTtcblxuICAgICAgICBlLl9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWUuX2FjdGl2ZVRyaWdnZXIuY2xpY2ssIGUuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSA/IGUuX2VudGVyKG51bGwsIGUpIDogZS5fbGVhdmUobnVsbCwgZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKHNuKSkgcmV0dXJuIHZvaWQgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KSwgai5vZmYodGhpcy5fZWxlbWVudC5jbG9zZXN0KGxuKSwgY24sIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpLCB0aGlzLnRpcCAmJiB0aGlzLnRpcC5yZW1vdmUoKSwgdGhpcy5fZGlzcG9zZVBvcHBlcigpLCBzdXBlci5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgIGlmIChcIm5vbmVcIiA9PT0gdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5KSB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTtcbiAgICAgIGlmICghdGhpcy5pc1dpdGhDb250ZW50KCkgfHwgIXRoaXMuX2lzRW5hYmxlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgdCA9IGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpLFxuICAgICAgICAgICAgZSA9IGgodGhpcy5fZWxlbWVudCksXG4gICAgICAgICAgICBpID0gbnVsbCA9PT0gZSA/IHRoaXMuX2VsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGhpcy5fZWxlbWVudCkgOiBlLmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgaWYgKHQuZGVmYXVsdFByZXZlbnRlZCB8fCAhaSkgcmV0dXJuO1xuICAgICAgXCJ0b29sdGlwXCIgPT09IHRoaXMuY29uc3RydWN0b3IuTkFNRSAmJiB0aGlzLnRpcCAmJiB0aGlzLmdldFRpdGxlKCkgIT09IHRoaXMudGlwLnF1ZXJ5U2VsZWN0b3IoYW4pLmlubmVySFRNTCAmJiAodGhpcy5fZGlzcG9zZVBvcHBlcigpLCB0aGlzLnRpcC5yZW1vdmUoKSwgdGhpcy50aXAgPSBudWxsKTtcblxuICAgICAgY29uc3QgbiA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpLFxuICAgICAgICAgICAgcyA9ICh0ID0+IHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHQgKz0gTWF0aC5mbG9vcigxZTYgKiBNYXRoLnJhbmRvbSgpKTtcbiAgICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCkpO1xuXG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfSkodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKTtcblxuICAgICAgbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBzKSwgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIHMpLCB0aGlzLl9jb25maWcuYW5pbWF0aW9uICYmIG4uY2xhc3NMaXN0LmFkZChubik7XG5cbiAgICAgIGNvbnN0IG8gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQgPyB0aGlzLl9jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgbiwgdGhpcy5fZWxlbWVudCkgOiB0aGlzLl9jb25maWcucGxhY2VtZW50LFxuICAgICAgICAgICAgciA9IHRoaXMuX2dldEF0dGFjaG1lbnQobyk7XG5cbiAgICAgIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyhyKTtcblxuICAgICAgY29uc3Qge1xuICAgICAgICBjb250YWluZXI6IGFcbiAgICAgIH0gPSB0aGlzLl9jb25maWc7XG4gICAgICBILnNldChuLCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKSwgdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkgfHwgKGEuYXBwZW5kKG4pLCBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCkpLCB0aGlzLl9wb3BwZXIgPyB0aGlzLl9wb3BwZXIudXBkYXRlKCkgOiB0aGlzLl9wb3BwZXIgPSBxZSh0aGlzLl9lbGVtZW50LCBuLCB0aGlzLl9nZXRQb3BwZXJDb25maWcocikpLCBuLmNsYXNzTGlzdC5hZGQoc24pO1xuXG4gICAgICBjb25zdCBsID0gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzKTtcblxuICAgICAgbCAmJiBuLmNsYXNzTGlzdC5hZGQoLi4ubC5zcGxpdChcIiBcIikpLCBcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgai5vbih0LCBcIm1vdXNlb3ZlclwiLCBkKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgYyA9IHRoaXMudGlwLmNsYXNzTGlzdC5jb250YWlucyhubik7XG5cbiAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5faG92ZXJTdGF0ZTtcbiAgICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9IG51bGwsIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKSwgdCA9PT0gcm4gJiYgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG4gICAgICB9LCB0aGlzLnRpcCwgYyk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgIGlmICghdGhpcy5fcG9wcGVyKSByZXR1cm47XG4gICAgICBjb25zdCB0ID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICBpZiAoai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElERSkuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgdC5jbGFzc0xpc3QucmVtb3ZlKHNuKSwgXCJvbnRvdWNoc3RhcnRcIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2godCA9PiBqLm9mZih0LCBcIm1vdXNlb3ZlclwiLCBkKSksIHRoaXMuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhMSwgdGhpcy5fYWN0aXZlVHJpZ2dlci5mb2N1cyA9ICExLCB0aGlzLl9hY3RpdmVUcmlnZ2VyLmhvdmVyID0gITE7XG4gICAgICBjb25zdCBlID0gdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKG5uKTtcbiAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICB0aGlzLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkgfHwgKHRoaXMuX2hvdmVyU3RhdGUgIT09IG9uICYmIHQucmVtb3ZlKCksIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKSwgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpLCBqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pLCB0aGlzLl9kaXNwb3NlUG9wcGVyKCkpO1xuICAgICAgfSwgdGhpcy50aXAsIGUpLCB0aGlzLl9ob3ZlclN0YXRlID0gXCJcIjtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICBudWxsICE9PSB0aGlzLl9wb3BwZXIgJiYgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xuICAgIH1cblxuICAgIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICBpZiAodGhpcy50aXApIHJldHVybiB0aGlzLnRpcDtcbiAgICAgIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdC5pbm5lckhUTUwgPSB0aGlzLl9jb25maWcudGVtcGxhdGU7XG4gICAgICBjb25zdCBlID0gdC5jaGlsZHJlblswXTtcbiAgICAgIHJldHVybiB0aGlzLnNldENvbnRlbnQoZSksIGUuY2xhc3NMaXN0LnJlbW92ZShubiwgc24pLCB0aGlzLnRpcCA9IGUsIHRoaXMudGlwO1xuICAgIH1cblxuICAgIHNldENvbnRlbnQodCkge1xuICAgICAgdGhpcy5fc2FuaXRpemVBbmRTZXRDb250ZW50KHQsIHRoaXMuZ2V0VGl0bGUoKSwgYW4pO1xuICAgIH1cblxuICAgIF9zYW5pdGl6ZUFuZFNldENvbnRlbnQodCwgZSwgaSkge1xuICAgICAgY29uc3QgbiA9IFYuZmluZE9uZShpLCB0KTtcbiAgICAgIGUgfHwgIW4gPyB0aGlzLnNldEVsZW1lbnRDb250ZW50KG4sIGUpIDogbi5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBzZXRFbGVtZW50Q29udGVudCh0LCBlKSB7XG4gICAgICBpZiAobnVsbCAhPT0gdCkgcmV0dXJuIG8oZSkgPyAoZSA9IHIoZSksIHZvaWQgKHRoaXMuX2NvbmZpZy5odG1sID8gZS5wYXJlbnROb2RlICE9PSB0ICYmICh0LmlubmVySFRNTCA9IFwiXCIsIHQuYXBwZW5kKGUpKSA6IHQudGV4dENvbnRlbnQgPSBlLnRleHRDb250ZW50KSkgOiB2b2lkICh0aGlzLl9jb25maWcuaHRtbCA/ICh0aGlzLl9jb25maWcuc2FuaXRpemUgJiYgKGUgPSBZaShlLCB0aGlzLl9jb25maWcuYWxsb3dMaXN0LCB0aGlzLl9jb25maWcuc2FuaXRpemVGbikpLCB0LmlubmVySFRNTCA9IGUpIDogdC50ZXh0Q29udGVudCA9IGUpO1xuICAgIH1cblxuICAgIGdldFRpdGxlKCkge1xuICAgICAgY29uc3QgdCA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1vcmlnaW5hbC10aXRsZVwiKSB8fCB0aGlzLl9jb25maWcudGl0bGU7XG5cbiAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0KTtcbiAgICB9XG5cbiAgICB1cGRhdGVBdHRhY2htZW50KHQpIHtcbiAgICAgIHJldHVybiBcInJpZ2h0XCIgPT09IHQgPyBcImVuZFwiIDogXCJsZWZ0XCIgPT09IHQgPyBcInN0YXJ0XCIgOiB0O1xuICAgIH1cblxuICAgIF9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQodCwgZSkge1xuICAgICAgcmV0dXJuIGUgfHwgdGhpcy5jb25zdHJ1Y3Rvci5nZXRPckNyZWF0ZUluc3RhbmNlKHQuZGVsZWdhdGVUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgIH1cblxuICAgIF9nZXRPZmZzZXQoKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9mZnNldDogdFxuICAgICAgfSA9IHRoaXMuX2NvbmZpZztcbiAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gdC5zcGxpdChcIixcIikubWFwKHQgPT4gTnVtYmVyLnBhcnNlSW50KHQsIDEwKSkgOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgPyBlID0+IHQoZSwgdGhpcy5fZWxlbWVudCkgOiB0O1xuICAgIH1cblxuICAgIF9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ID8gdC5jYWxsKHRoaXMuX2VsZW1lbnQpIDogdDtcbiAgICB9XG5cbiAgICBfZ2V0UG9wcGVyQ29uZmlnKHQpIHtcbiAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgIHBsYWNlbWVudDogdCxcbiAgICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICAgIG5hbWU6IFwiZmxpcFwiLFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGZhbGxiYWNrUGxhY2VtZW50czogdGhpcy5fY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50c1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5hbWU6IFwib2Zmc2V0XCIsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5hbWU6IFwicHJldmVudE92ZXJmbG93XCIsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG5hbWU6IFwiYXJyb3dcIixcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBlbGVtZW50OiBgLiR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfS1hcnJvd2BcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBuYW1lOiBcIm9uQ2hhbmdlXCIsXG4gICAgICAgICAgZW5hYmxlZDogITAsXG4gICAgICAgICAgcGhhc2U6IFwiYWZ0ZXJXcml0ZVwiLFxuICAgICAgICAgIGZuOiB0ID0+IHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KVxuICAgICAgICB9XSxcbiAgICAgICAgb25GaXJzdFVwZGF0ZTogdCA9PiB7XG4gICAgICAgICAgdC5vcHRpb25zLnBsYWNlbWVudCAhPT0gdC5wbGFjZW1lbnQgJiYgdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHsgLi4uZSxcbiAgICAgICAgLi4uKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyA/IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcoZSkgOiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBfYWRkQXR0YWNobWVudENsYXNzKHQpIHtcbiAgICAgIHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoYCR7dGhpcy5fZ2V0QmFzaWNDbGFzc1ByZWZpeCgpfS0ke3RoaXMudXBkYXRlQXR0YWNobWVudCh0KX1gKTtcbiAgICB9XG5cbiAgICBfZ2V0QXR0YWNobWVudCh0KSB7XG4gICAgICByZXR1cm4gSmlbdC50b1VwcGVyQ2FzZSgpXTtcbiAgICB9XG5cbiAgICBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5fY29uZmlnLnRyaWdnZXIuc3BsaXQoXCIgXCIpLmZvckVhY2godCA9PiB7XG4gICAgICAgIGlmIChcImNsaWNrXCIgPT09IHQpIGoub24odGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSywgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCB0ID0+IHRoaXMudG9nZ2xlKHQpKTtlbHNlIGlmIChcIm1hbnVhbFwiICE9PSB0KSB7XG4gICAgICAgICAgY29uc3QgZSA9IHQgPT09IGhuID8gdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDogdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOLFxuICAgICAgICAgICAgICAgIGkgPSB0ID09PSBobiA/IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgICAgai5vbih0aGlzLl9lbGVtZW50LCBlLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIHQgPT4gdGhpcy5fZW50ZXIodCkpLCBqLm9uKHRoaXMuX2VsZW1lbnQsIGksIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgdCA9PiB0aGlzLl9sZWF2ZSh0KSk7XG4gICAgICAgIH1cbiAgICAgIH0pLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICB0aGlzLl9lbGVtZW50ICYmIHRoaXMuaGlkZSgpO1xuICAgICAgfSwgai5vbih0aGlzLl9lbGVtZW50LmNsb3Nlc3QobG4pLCBjbiwgdGhpcy5faGlkZU1vZGFsSGFuZGxlciksIHRoaXMuX2NvbmZpZy5zZWxlY3RvciA/IHRoaXMuX2NvbmZpZyA9IHsgLi4udGhpcy5fY29uZmlnLFxuICAgICAgICB0cmlnZ2VyOiBcIm1hbnVhbFwiLFxuICAgICAgICBzZWxlY3RvcjogXCJcIlxuICAgICAgfSA6IHRoaXMuX2ZpeFRpdGxlKCk7XG4gICAgfVxuXG4gICAgX2ZpeFRpdGxlKCkge1xuICAgICAgY29uc3QgdCA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIiksXG4gICAgICAgICAgICBlID0gdHlwZW9mIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1vcmlnaW5hbC10aXRsZVwiKTtcblxuICAgICAgKHQgfHwgXCJzdHJpbmdcIiAhPT0gZSkgJiYgKHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1icy1vcmlnaW5hbC10aXRsZVwiLCB0IHx8IFwiXCIpLCAhdCB8fCB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIikgfHwgdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudCB8fCB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdCksIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgXCJcIikpO1xuICAgIH1cblxuICAgIF9lbnRlcih0LCBlKSB7XG4gICAgICBlID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQsIGUpLCB0ICYmIChlLl9hY3RpdmVUcmlnZ2VyW1wiZm9jdXNpblwiID09PSB0LnR5cGUgPyBkbiA6IGhuXSA9ICEwKSwgZS5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKHNuKSB8fCBlLl9ob3ZlclN0YXRlID09PSBvbiA/IGUuX2hvdmVyU3RhdGUgPSBvbiA6IChjbGVhclRpbWVvdXQoZS5fdGltZW91dCksIGUuX2hvdmVyU3RhdGUgPSBvbiwgZS5fY29uZmlnLmRlbGF5ICYmIGUuX2NvbmZpZy5kZWxheS5zaG93ID8gZS5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlLl9ob3ZlclN0YXRlID09PSBvbiAmJiBlLnNob3coKTtcbiAgICAgIH0sIGUuX2NvbmZpZy5kZWxheS5zaG93KSA6IGUuc2hvdygpKTtcbiAgICB9XG5cbiAgICBfbGVhdmUodCwgZSkge1xuICAgICAgZSA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCh0LCBlKSwgdCAmJiAoZS5fYWN0aXZlVHJpZ2dlcltcImZvY3Vzb3V0XCIgPT09IHQudHlwZSA/IGRuIDogaG5dID0gZS5fZWxlbWVudC5jb250YWlucyh0LnJlbGF0ZWRUYXJnZXQpKSwgZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpIHx8IChjbGVhclRpbWVvdXQoZS5fdGltZW91dCksIGUuX2hvdmVyU3RhdGUgPSBybiwgZS5fY29uZmlnLmRlbGF5ICYmIGUuX2NvbmZpZy5kZWxheS5oaWRlID8gZS5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlLl9ob3ZlclN0YXRlID09PSBybiAmJiBlLmhpZGUoKTtcbiAgICAgIH0sIGUuX2NvbmZpZy5kZWxheS5oaWRlKSA6IGUuaGlkZSgpKTtcbiAgICB9XG5cbiAgICBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHtcbiAgICAgIGZvciAoY29uc3QgdCBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSBpZiAodGhpcy5fYWN0aXZlVHJpZ2dlclt0XSkgcmV0dXJuICEwO1xuXG4gICAgICByZXR1cm4gITE7XG4gICAgfVxuXG4gICAgX2dldENvbmZpZyh0KSB7XG4gICAgICBjb25zdCBlID0gVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBHaS5oYXModCkgJiYgZGVsZXRlIGVbdF07XG4gICAgICB9KSwgKHQgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgICAgLi4uZSxcbiAgICAgICAgLi4uKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgdCA/IHQgOiB7fSlcbiAgICAgIH0pLmNvbnRhaW5lciA9ICExID09PSB0LmNvbnRhaW5lciA/IGRvY3VtZW50LmJvZHkgOiByKHQuY29udGFpbmVyKSwgXCJudW1iZXJcIiA9PSB0eXBlb2YgdC5kZWxheSAmJiAodC5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogdC5kZWxheSxcbiAgICAgICAgaGlkZTogdC5kZWxheVxuICAgICAgfSksIFwibnVtYmVyXCIgPT0gdHlwZW9mIHQudGl0bGUgJiYgKHQudGl0bGUgPSB0LnRpdGxlLnRvU3RyaW5nKCkpLCBcIm51bWJlclwiID09IHR5cGVvZiB0LmNvbnRlbnQgJiYgKHQuY29udGVudCA9IHQuY29udGVudC50b1N0cmluZygpKSwgYShRaSwgdCwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksIHQuc2FuaXRpemUgJiYgKHQudGVtcGxhdGUgPSBZaSh0LnRlbXBsYXRlLCB0LmFsbG93TGlzdCwgdC5zYW5pdGl6ZUZuKSksIHQ7XG4gICAgfVxuXG4gICAgX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgICAgY29uc3QgdCA9IHt9O1xuXG4gICAgICBmb3IgKGNvbnN0IGUgaW4gdGhpcy5fY29uZmlnKSB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRbZV0gIT09IHRoaXMuX2NvbmZpZ1tlXSAmJiAodFtlXSA9IHRoaXMuX2NvbmZpZ1tlXSk7XG5cbiAgICAgIHJldHVybiB0O1xuICAgIH1cblxuICAgIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpLFxuICAgICAgICAgICAgZSA9IG5ldyBSZWdFeHAoYChefFxcXFxzKSR7dGhpcy5fZ2V0QmFzaWNDbGFzc1ByZWZpeCgpfVxcXFxTK2AsIFwiZ1wiKSxcbiAgICAgICAgICAgIGkgPSB0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLm1hdGNoKGUpO1xuICAgICAgbnVsbCAhPT0gaSAmJiBpLmxlbmd0aCA+IDAgJiYgaS5tYXAodCA9PiB0LnRyaW0oKSkuZm9yRWFjaChlID0+IHQuY2xhc3NMaXN0LnJlbW92ZShlKSk7XG4gICAgfVxuXG4gICAgX2dldEJhc2ljQ2xhc3NQcmVmaXgoKSB7XG4gICAgICByZXR1cm4gXCJicy10b29sdGlwXCI7XG4gICAgfVxuXG4gICAgX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHN0YXRlOiBlXG4gICAgICB9ID0gdDtcbiAgICAgIGUgJiYgKHRoaXMudGlwID0gZS5lbGVtZW50cy5wb3BwZXIsIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKSwgdGhpcy5fYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQoZS5wbGFjZW1lbnQpKSk7XG4gICAgfVxuXG4gICAgX2Rpc3Bvc2VQb3BwZXIoKSB7XG4gICAgICB0aGlzLl9wb3BwZXIgJiYgKHRoaXMuX3BvcHBlci5kZXN0cm95KCksIHRoaXMuX3BvcHBlciA9IG51bGwpO1xuICAgIH1cblxuICAgIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB1bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIHQpO1xuXG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZVt0XSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7XG4gICAgICAgICAgZVt0XSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIGcodW4pO1xuICBjb25zdCBmbiA9IHsgLi4udW4uRGVmYXVsdCxcbiAgICBwbGFjZW1lbnQ6IFwicmlnaHRcIixcbiAgICBvZmZzZXQ6IFswLCA4XSxcbiAgICB0cmlnZ2VyOiBcImNsaWNrXCIsXG4gICAgY29udGVudDogXCJcIixcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwicG9wb3Zlci1hcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J1xuICB9LFxuICAgICAgICBwbiA9IHsgLi4udW4uRGVmYXVsdFR5cGUsXG4gICAgY29udGVudDogXCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCJcbiAgfSxcbiAgICAgICAgbW4gPSB7XG4gICAgSElERTogXCJoaWRlLmJzLnBvcG92ZXJcIixcbiAgICBISURERU46IFwiaGlkZGVuLmJzLnBvcG92ZXJcIixcbiAgICBTSE9XOiBcInNob3cuYnMucG9wb3ZlclwiLFxuICAgIFNIT1dOOiBcInNob3duLmJzLnBvcG92ZXJcIixcbiAgICBJTlNFUlRFRDogXCJpbnNlcnRlZC5icy5wb3BvdmVyXCIsXG4gICAgQ0xJQ0s6IFwiY2xpY2suYnMucG9wb3ZlclwiLFxuICAgIEZPQ1VTSU46IFwiZm9jdXNpbi5icy5wb3BvdmVyXCIsXG4gICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXQuYnMucG9wb3ZlclwiLFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlci5icy5wb3BvdmVyXCIsXG4gICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlLmJzLnBvcG92ZXJcIlxuICB9O1xuXG4gIGNsYXNzIGduIGV4dGVuZHMgdW4ge1xuICAgIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgICByZXR1cm4gXCJwb3BvdmVyXCI7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBFdmVudCgpIHtcbiAgICAgIHJldHVybiBtbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgICAgcmV0dXJuIHBuO1xuICAgIH1cblxuICAgIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcbiAgICB9XG5cbiAgICBzZXRDb250ZW50KHQpIHtcbiAgICAgIHRoaXMuX3Nhbml0aXplQW5kU2V0Q29udGVudCh0LCB0aGlzLmdldFRpdGxlKCksIFwiLnBvcG92ZXItaGVhZGVyXCIpLCB0aGlzLl9zYW5pdGl6ZUFuZFNldENvbnRlbnQodCwgdGhpcy5fZ2V0Q29udGVudCgpLCBcIi5wb3BvdmVyLWJvZHlcIik7XG4gICAgfVxuXG4gICAgX2dldENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmNvbnRlbnQpO1xuICAgIH1cblxuICAgIF9nZXRCYXNpY0NsYXNzUHJlZml4KCkge1xuICAgICAgcmV0dXJuIFwiYnMtcG9wb3ZlclwiO1xuICAgIH1cblxuICAgIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGUgPSBnbi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIHQpO1xuXG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZVt0XSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7XG4gICAgICAgICAgZVt0XSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIGcoZ24pO1xuICBjb25zdCBfbiA9IFwic2Nyb2xsc3B5XCIsXG4gICAgICAgIGJuID0ge1xuICAgIG9mZnNldDogMTAsXG4gICAgbWV0aG9kOiBcImF1dG9cIixcbiAgICB0YXJnZXQ6IFwiXCJcbiAgfSxcbiAgICAgICAgdm4gPSB7XG4gICAgb2Zmc2V0OiBcIm51bWJlclwiLFxuICAgIG1ldGhvZDogXCJzdHJpbmdcIixcbiAgICB0YXJnZXQ6IFwiKHN0cmluZ3xlbGVtZW50KVwiXG4gIH0sXG4gICAgICAgIHluID0gXCJhY3RpdmVcIixcbiAgICAgICAgd24gPSBcIi5uYXYtbGluaywgLmxpc3QtZ3JvdXAtaXRlbSwgLmRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgRW4gPSBcInBvc2l0aW9uXCI7XG5cbiAgY2xhc3MgQW4gZXh0ZW5kcyBCIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICBzdXBlcih0KSwgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IFwiQk9EWVwiID09PSB0aGlzLl9lbGVtZW50LnRhZ05hbWUgPyB3aW5kb3cgOiB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoZSksIHRoaXMuX29mZnNldHMgPSBbXSwgdGhpcy5fdGFyZ2V0cyA9IFtdLCB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsLCB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwLCBqLm9uKHRoaXMuX3Njcm9sbEVsZW1lbnQsIFwic2Nyb2xsLmJzLnNjcm9sbHNweVwiLCAoKSA9PiB0aGlzLl9wcm9jZXNzKCkpLCB0aGlzLnJlZnJlc2goKSwgdGhpcy5fcHJvY2VzcygpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICAgIHJldHVybiBibjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgICByZXR1cm4gX247XG4gICAgfVxuXG4gICAgcmVmcmVzaCgpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvdyA/IFwib2Zmc2V0XCIgOiBFbixcbiAgICAgICAgICAgIGUgPSBcImF1dG9cIiA9PT0gdGhpcy5fY29uZmlnLm1ldGhvZCA/IHQgOiB0aGlzLl9jb25maWcubWV0aG9kLFxuICAgICAgICAgICAgbiA9IGUgPT09IEVuID8gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgOiAwO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdLCB0aGlzLl90YXJnZXRzID0gW10sIHRoaXMuX3Njcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpLCBWLmZpbmQod24sIHRoaXMuX2NvbmZpZy50YXJnZXQpLm1hcCh0ID0+IHtcbiAgICAgICAgY29uc3QgcyA9IGkodCksXG4gICAgICAgICAgICAgIG8gPSBzID8gVi5maW5kT25lKHMpIDogbnVsbDtcblxuICAgICAgICBpZiAobykge1xuICAgICAgICAgIGNvbnN0IHQgPSBvLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIGlmICh0LndpZHRoIHx8IHQuaGVpZ2h0KSByZXR1cm4gW1VbZV0obykudG9wICsgbiwgc107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLmZpbHRlcih0ID0+IHQpLnNvcnQoKHQsIGUpID0+IHRbMF0gLSBlWzBdKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgICB0aGlzLl9vZmZzZXRzLnB1c2godFswXSksIHRoaXMuX3RhcmdldHMucHVzaCh0WzFdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICBqLm9mZih0aGlzLl9zY3JvbGxFbGVtZW50LCBcIi5icy5zY3JvbGxzcHlcIiksIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICBfZ2V0Q29uZmlnKHQpIHtcbiAgICAgIHJldHVybiAodCA9IHsgLi4uYm4sXG4gICAgICAgIC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAgIC4uLihcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIHQgPyB0IDoge30pXG4gICAgICB9KS50YXJnZXQgPSByKHQudGFyZ2V0KSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGEoX24sIHQsIHZuKSwgdDtcbiAgICB9XG5cbiAgICBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICB9XG5cbiAgICBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KTtcbiAgICB9XG5cbiAgICBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH1cblxuICAgIF9wcm9jZXNzKCkge1xuICAgICAgY29uc3QgdCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldCxcbiAgICAgICAgICAgIGUgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKSxcbiAgICAgICAgICAgIGkgPSB0aGlzLl9jb25maWcub2Zmc2V0ICsgZSAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXG4gICAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBlICYmIHRoaXMucmVmcmVzaCgpLCB0ID49IGkpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0ICYmIHRoaXMuX2FjdGl2YXRlKHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAmJiB0IDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkgcmV0dXJuIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGwsIHZvaWQgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgICBmb3IgKGxldCBlID0gdGhpcy5fb2Zmc2V0cy5sZW5ndGg7IGUtLTspIHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGhpcy5fdGFyZ2V0c1tlXSAmJiB0ID49IHRoaXMuX29mZnNldHNbZV0gJiYgKHZvaWQgMCA9PT0gdGhpcy5fb2Zmc2V0c1tlICsgMV0gfHwgdCA8IHRoaXMuX29mZnNldHNbZSArIDFdKSAmJiB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2VdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYWN0aXZhdGUodCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdCwgdGhpcy5fY2xlYXIoKTtcbiAgICAgIGNvbnN0IGUgPSB3bi5zcGxpdChcIixcIikubWFwKGUgPT4gYCR7ZX1bZGF0YS1icy10YXJnZXQ9XCIke3R9XCJdLCR7ZX1baHJlZj1cIiR7dH1cIl1gKSxcbiAgICAgICAgICAgIGkgPSBWLmZpbmRPbmUoZS5qb2luKFwiLFwiKSwgdGhpcy5fY29uZmlnLnRhcmdldCk7XG4gICAgICBpLmNsYXNzTGlzdC5hZGQoeW4pLCBpLmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duLWl0ZW1cIikgPyBWLmZpbmRPbmUoXCIuZHJvcGRvd24tdG9nZ2xlXCIsIGkuY2xvc2VzdChcIi5kcm9wZG93blwiKSkuY2xhc3NMaXN0LmFkZCh5bikgOiBWLnBhcmVudHMoaSwgXCIubmF2LCAubGlzdC1ncm91cFwiKS5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBWLnByZXYodCwgXCIubmF2LWxpbmssIC5saXN0LWdyb3VwLWl0ZW1cIikuZm9yRWFjaCh0ID0+IHQuY2xhc3NMaXN0LmFkZCh5bikpLCBWLnByZXYodCwgXCIubmF2LWl0ZW1cIikuZm9yRWFjaCh0ID0+IHtcbiAgICAgICAgICBWLmNoaWxkcmVuKHQsIFwiLm5hdi1saW5rXCIpLmZvckVhY2godCA9PiB0LmNsYXNzTGlzdC5hZGQoeW4pKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSwgai50cmlnZ2VyKHRoaXMuX3Njcm9sbEVsZW1lbnQsIFwiYWN0aXZhdGUuYnMuc2Nyb2xsc3B5XCIsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NsZWFyKCkge1xuICAgICAgVi5maW5kKHduLCB0aGlzLl9jb25maWcudGFyZ2V0KS5maWx0ZXIodCA9PiB0LmNsYXNzTGlzdC5jb250YWlucyh5bikpLmZvckVhY2godCA9PiB0LmNsYXNzTGlzdC5yZW1vdmUoeW4pKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gQW4uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTtcblxuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGVbdF0pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO1xuICAgICAgICAgIGVbdF0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gIH1cblxuICBqLm9uKHdpbmRvdywgXCJsb2FkLmJzLnNjcm9sbHNweS5kYXRhLWFwaVwiLCAoKSA9PiB7XG4gICAgVi5maW5kKCdbZGF0YS1icy1zcHk9XCJzY3JvbGxcIl0nKS5mb3JFYWNoKHQgPT4gbmV3IEFuKHQpKTtcbiAgfSksIGcoQW4pO1xuICBjb25zdCBUbiA9IFwiYWN0aXZlXCIsXG4gICAgICAgIE9uID0gXCJmYWRlXCIsXG4gICAgICAgIENuID0gXCJzaG93XCIsXG4gICAgICAgIGtuID0gXCIuYWN0aXZlXCIsXG4gICAgICAgIExuID0gXCI6c2NvcGUgPiBsaSA+IC5hY3RpdmVcIjtcblxuICBjbGFzcyB4biBleHRlbmRzIEIge1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICAgIHJldHVybiBcInRhYlwiO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoVG4pKSByZXR1cm47XG4gICAgICBsZXQgdDtcblxuICAgICAgY29uc3QgZSA9IG4odGhpcy5fZWxlbWVudCksXG4gICAgICAgICAgICBpID0gdGhpcy5fZWxlbWVudC5jbG9zZXN0KFwiLm5hdiwgLmxpc3QtZ3JvdXBcIik7XG5cbiAgICAgIGlmIChpKSB7XG4gICAgICAgIGNvbnN0IGUgPSBcIlVMXCIgPT09IGkubm9kZU5hbWUgfHwgXCJPTFwiID09PSBpLm5vZGVOYW1lID8gTG4gOiBrbjtcbiAgICAgICAgdCA9IFYuZmluZChlLCBpKSwgdCA9IHRbdC5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcyA9IHQgPyBqLnRyaWdnZXIodCwgXCJoaWRlLmJzLnRhYlwiLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pIDogbnVsbDtcbiAgICAgIGlmIChqLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgXCJzaG93LmJzLnRhYlwiLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRcbiAgICAgIH0pLmRlZmF1bHRQcmV2ZW50ZWQgfHwgbnVsbCAhPT0gcyAmJiBzLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcblxuICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCwgaSk7XG5cbiAgICAgIGNvbnN0IG8gPSAoKSA9PiB7XG4gICAgICAgIGoudHJpZ2dlcih0LCBcImhpZGRlbi5icy50YWJcIiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgICAgfSksIGoudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBcInNob3duLmJzLnRhYlwiLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGUgPyB0aGlzLl9hY3RpdmF0ZShlLCBlLnBhcmVudE5vZGUsIG8pIDogbygpO1xuICAgIH1cblxuICAgIF9hY3RpdmF0ZSh0LCBlLCBpKSB7XG4gICAgICBjb25zdCBuID0gKCFlIHx8IFwiVUxcIiAhPT0gZS5ub2RlTmFtZSAmJiBcIk9MXCIgIT09IGUubm9kZU5hbWUgPyBWLmNoaWxkcmVuKGUsIGtuKSA6IFYuZmluZChMbiwgZSkpWzBdLFxuICAgICAgICAgICAgcyA9IGkgJiYgbiAmJiBuLmNsYXNzTGlzdC5jb250YWlucyhPbiksXG4gICAgICAgICAgICBvID0gKCkgPT4gdGhpcy5fdHJhbnNpdGlvbkNvbXBsZXRlKHQsIG4sIGkpO1xuXG4gICAgICBuICYmIHMgPyAobi5jbGFzc0xpc3QucmVtb3ZlKENuKSwgdGhpcy5fcXVldWVDYWxsYmFjayhvLCB0LCAhMCkpIDogbygpO1xuICAgIH1cblxuICAgIF90cmFuc2l0aW9uQ29tcGxldGUodCwgZSwgaSkge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgZS5jbGFzc0xpc3QucmVtb3ZlKFRuKTtcbiAgICAgICAgY29uc3QgdCA9IFYuZmluZE9uZShcIjpzY29wZSA+IC5kcm9wZG93bi1tZW51IC5hY3RpdmVcIiwgZS5wYXJlbnROb2RlKTtcbiAgICAgICAgdCAmJiB0LmNsYXNzTGlzdC5yZW1vdmUoVG4pLCBcInRhYlwiID09PSBlLmdldEF0dHJpYnV0ZShcInJvbGVcIikgJiYgZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsICExKTtcbiAgICAgIH1cblxuICAgICAgdC5jbGFzc0xpc3QuYWRkKFRuKSwgXCJ0YWJcIiA9PT0gdC5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpICYmIHQuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCAhMCksIHUodCksIHQuY2xhc3NMaXN0LmNvbnRhaW5zKE9uKSAmJiB0LmNsYXNzTGlzdC5hZGQoQ24pO1xuICAgICAgbGV0IG4gPSB0LnBhcmVudE5vZGU7XG5cbiAgICAgIGlmIChuICYmIFwiTElcIiA9PT0gbi5ub2RlTmFtZSAmJiAobiA9IG4ucGFyZW50Tm9kZSksIG4gJiYgbi5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wZG93bi1tZW51XCIpKSB7XG4gICAgICAgIGNvbnN0IGUgPSB0LmNsb3Nlc3QoXCIuZHJvcGRvd25cIik7XG4gICAgICAgIGUgJiYgVi5maW5kKFwiLmRyb3Bkb3duLXRvZ2dsZVwiLCBlKS5mb3JFYWNoKHQgPT4gdC5jbGFzc0xpc3QuYWRkKFRuKSksIHQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCAhMCk7XG4gICAgICB9XG5cbiAgICAgIGkgJiYgaSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB4bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuXG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZVt0XSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7XG4gICAgICAgICAgZVt0XSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIGoub24oZG9jdW1lbnQsIFwiY2xpY2suYnMudGFiLmRhdGEtYXBpXCIsICdbZGF0YS1icy10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cImxpc3RcIl0nLCBmdW5jdGlvbiAodCkge1xuICAgIFtcIkFcIiwgXCJBUkVBXCJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkgJiYgdC5wcmV2ZW50RGVmYXVsdCgpLCBjKHRoaXMpIHx8IHhuLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcykuc2hvdygpO1xuICB9KSwgZyh4bik7XG4gIGNvbnN0IERuID0gXCJ0b2FzdFwiLFxuICAgICAgICBTbiA9IFwiaGlkZVwiLFxuICAgICAgICBObiA9IFwic2hvd1wiLFxuICAgICAgICBJbiA9IFwic2hvd2luZ1wiLFxuICAgICAgICBQbiA9IHtcbiAgICBhbmltYXRpb246IFwiYm9vbGVhblwiLFxuICAgIGF1dG9oaWRlOiBcImJvb2xlYW5cIixcbiAgICBkZWxheTogXCJudW1iZXJcIlxuICB9LFxuICAgICAgICBqbiA9IHtcbiAgICBhbmltYXRpb246ICEwLFxuICAgIGF1dG9oaWRlOiAhMCxcbiAgICBkZWxheTogNWUzXG4gIH07XG5cbiAgY2xhc3MgTW4gZXh0ZW5kcyBCIHtcbiAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XG4gICAgICBzdXBlcih0KSwgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGUpLCB0aGlzLl90aW1lb3V0ID0gbnVsbCwgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9ICExLCB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uID0gITEsIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgICByZXR1cm4gUG47XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgICAgcmV0dXJuIGpuO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICAgIHJldHVybiBEbjtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwic2hvdy5icy50b2FzdFwiKS5kZWZhdWx0UHJldmVudGVkIHx8ICh0aGlzLl9jbGVhclRpbWVvdXQoKSwgdGhpcy5fY29uZmlnLmFuaW1hdGlvbiAmJiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmYWRlXCIpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoU24pLCB1KHRoaXMuX2VsZW1lbnQpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoTm4pLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoSW4pLCB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEluKSwgai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwic2hvd24uYnMudG9hc3RcIiksIHRoaXMuX21heWJlU2NoZWR1bGVIaWRlKCk7XG4gICAgICB9LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcuYW5pbWF0aW9uKSk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKE5uKSAmJiAoai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwiaGlkZS5icy50b2FzdFwiKS5kZWZhdWx0UHJldmVudGVkIHx8ICh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoSW4pLCB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFNuKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEluKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKE5uKSwgai50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIFwiaGlkZGVuLmJzLnRvYXN0XCIpO1xuICAgICAgfSwgdGhpcy5fZWxlbWVudCwgdGhpcy5fY29uZmlnLmFuaW1hdGlvbikpKTtcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KCksIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKE5uKSAmJiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoTm4pLCBzdXBlci5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgX2dldENvbmZpZyh0KSB7XG4gICAgICByZXR1cm4gdCA9IHsgLi4uam4sXG4gICAgICAgIC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAgIC4uLihcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIHQgPyB0IDoge30pXG4gICAgICB9LCBhKERuLCB0LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSwgdDtcbiAgICB9XG5cbiAgICBfbWF5YmVTY2hlZHVsZUhpZGUoKSB7XG4gICAgICB0aGlzLl9jb25maWcuYXV0b2hpZGUgJiYgKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gfHwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiB8fCAodGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSkpKTtcbiAgICB9XG5cbiAgICBfb25JbnRlcmFjdGlvbih0LCBlKSB7XG4gICAgICBzd2l0Y2ggKHQudHlwZSkge1xuICAgICAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgICAgIHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gPSBlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgIHRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24gPSBlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZSkgcmV0dXJuIHZvaWQgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XG4gICAgICBjb25zdCBpID0gdC5yZWxhdGVkVGFyZ2V0O1xuICAgICAgdGhpcy5fZWxlbWVudCA9PT0gaSB8fCB0aGlzLl9lbGVtZW50LmNvbnRhaW5zKGkpIHx8IHRoaXMuX21heWJlU2NoZWR1bGVIaWRlKCk7XG4gICAgfVxuXG4gICAgX3NldExpc3RlbmVycygpIHtcbiAgICAgIGoub24odGhpcy5fZWxlbWVudCwgXCJtb3VzZW92ZXIuYnMudG9hc3RcIiwgdCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKHQsICEwKSksIGoub24odGhpcy5fZWxlbWVudCwgXCJtb3VzZW91dC5icy50b2FzdFwiLCB0ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24odCwgITEpKSwgai5vbih0aGlzLl9lbGVtZW50LCBcImZvY3VzaW4uYnMudG9hc3RcIiwgdCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKHQsICEwKSksIGoub24odGhpcy5fZWxlbWVudCwgXCJmb2N1c291dC5icy50b2FzdFwiLCB0ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24odCwgITEpKTtcbiAgICB9XG5cbiAgICBfY2xlYXJUaW1lb3V0KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLCB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gTW4uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTtcblxuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGVbdF0pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO1xuICAgICAgICAgIGVbdF0odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIFIoTW4pLCBnKE1uKSwge1xuICAgIEFsZXJ0OiBXLFxuICAgIEJ1dHRvbjogeixcbiAgICBDYXJvdXNlbDogc3QsXG4gICAgQ29sbGFwc2U6IHB0LFxuICAgIERyb3Bkb3duOiBoaSxcbiAgICBNb2RhbDogSGksXG4gICAgT2ZmY2FudmFzOiBGaSxcbiAgICBQb3BvdmVyOiBnbixcbiAgICBTY3JvbGxTcHk6IEFuLFxuICAgIFRhYjogeG4sXG4gICAgVG9hc3Q6IE1uLFxuICAgIFRvb2x0aXA6IHVuXG4gIH07XG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js\n')},"./node_modules/jquery-mask-plugin/dist/jquery.mask.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * jquery.mask.js\n * @version: v1.14.16\n * @author: Igor Escobar\n *\n * Created by Igor Escobar on 2012-03-10. Please report any bug at github.com/igorescobar/jQuery-Mask-Plugin\n *\n * Copyright (c) 2012 Igor Escobar http://igorescobar.com\n *\n * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* jshint laxbreak: true */\n\n/* jshint maxcomplexity:17 */\n\n/* global define */\n// UMD (Universal Module Definition) patterns for JavaScript modules that work everywhere.\n// https://github.com/umdjs/umd/blob/master/templates/jqueryPlugin.js\n(function (factory, jQuery, Zepto) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function ($) {\n  'use strict';\n\n  var Mask = function (el, mask, options) {\n    var p = {\n      invalid: [],\n      getCaret: function () {\n        try {\n          var sel,\n              pos = 0,\n              ctrl = el.get(0),\n              dSel = document.selection,\n              cSelStart = ctrl.selectionStart; // IE Support\n\n          if (dSel && navigator.appVersion.indexOf('MSIE 10') === -1) {\n            sel = dSel.createRange();\n            sel.moveStart('character', -p.val().length);\n            pos = sel.text.length;\n          } // Firefox support\n          else if (cSelStart || cSelStart === '0') {\n            pos = cSelStart;\n          }\n\n          return pos;\n        } catch (e) {}\n      },\n      setCaret: function (pos) {\n        try {\n          if (el.is(':focus')) {\n            var range,\n                ctrl = el.get(0); // Firefox, WebKit, etc..\n\n            if (ctrl.setSelectionRange) {\n              ctrl.setSelectionRange(pos, pos);\n            } else {\n              // IE\n              range = ctrl.createTextRange();\n              range.collapse(true);\n              range.moveEnd('character', pos);\n              range.moveStart('character', pos);\n              range.select();\n            }\n          }\n        } catch (e) {}\n      },\n      events: function () {\n        el.on('keydown.mask', function (e) {\n          el.data('mask-keycode', e.keyCode || e.which);\n          el.data('mask-previus-value', el.val());\n          el.data('mask-previus-caret-pos', p.getCaret());\n          p.maskDigitPosMapOld = p.maskDigitPosMap;\n        }).on($.jMaskGlobals.useInput ? 'input.mask' : 'keyup.mask', p.behaviour).on('paste.mask drop.mask', function () {\n          setTimeout(function () {\n            el.keydown().keyup();\n          }, 100);\n        }).on('change.mask', function () {\n          el.data('changed', true);\n        }).on('blur.mask', function () {\n          if (oldValue !== p.val() && !el.data('changed')) {\n            el.trigger('change');\n          }\n\n          el.data('changed', false);\n        }) // it's very important that this callback remains in this position\n        // otherwhise oldValue it's going to work buggy\n        .on('blur.mask', function () {\n          oldValue = p.val();\n        }) // select all text on focus\n        .on('focus.mask', function (e) {\n          if (options.selectOnFocus === true) {\n            $(e.target).select();\n          }\n        }) // clear the value if it not complete the mask\n        .on('focusout.mask', function () {\n          if (options.clearIfNotMatch && !regexMask.test(p.val())) {\n            p.val('');\n          }\n        });\n      },\n      getRegexMask: function () {\n        var maskChunks = [],\n            translation,\n            pattern,\n            optional,\n            recursive,\n            oRecursive,\n            r;\n\n        for (var i = 0; i < mask.length; i++) {\n          translation = jMask.translation[mask.charAt(i)];\n\n          if (translation) {\n            pattern = translation.pattern.toString().replace(/.{1}$|^.{1}/g, '');\n            optional = translation.optional;\n            recursive = translation.recursive;\n\n            if (recursive) {\n              maskChunks.push(mask.charAt(i));\n              oRecursive = {\n                digit: mask.charAt(i),\n                pattern: pattern\n              };\n            } else {\n              maskChunks.push(!optional && !recursive ? pattern : pattern + '?');\n            }\n          } else {\n            maskChunks.push(mask.charAt(i).replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'));\n          }\n        }\n\n        r = maskChunks.join('');\n\n        if (oRecursive) {\n          r = r.replace(new RegExp('(' + oRecursive.digit + '(.*' + oRecursive.digit + ')?)'), '($1)?').replace(new RegExp(oRecursive.digit, 'g'), oRecursive.pattern);\n        }\n\n        return new RegExp(r);\n      },\n      destroyEvents: function () {\n        el.off(['input', 'keydown', 'keyup', 'paste', 'drop', 'blur', 'focusout', ''].join('.mask '));\n      },\n      val: function (v) {\n        var isInput = el.is('input'),\n            method = isInput ? 'val' : 'text',\n            r;\n\n        if (arguments.length > 0) {\n          if (el[method]() !== v) {\n            el[method](v);\n          }\n\n          r = el;\n        } else {\n          r = el[method]();\n        }\n\n        return r;\n      },\n      calculateCaretPosition: function (oldVal) {\n        var newVal = p.getMasked(),\n            caretPosNew = p.getCaret();\n\n        if (oldVal !== newVal) {\n          var caretPosOld = el.data('mask-previus-caret-pos') || 0,\n              newValL = newVal.length,\n              oldValL = oldVal.length,\n              maskDigitsBeforeCaret = 0,\n              maskDigitsAfterCaret = 0,\n              maskDigitsBeforeCaretAll = 0,\n              maskDigitsBeforeCaretAllOld = 0,\n              i = 0;\n\n          for (i = caretPosNew; i < newValL; i++) {\n            if (!p.maskDigitPosMap[i]) {\n              break;\n            }\n\n            maskDigitsAfterCaret++;\n          }\n\n          for (i = caretPosNew - 1; i >= 0; i--) {\n            if (!p.maskDigitPosMap[i]) {\n              break;\n            }\n\n            maskDigitsBeforeCaret++;\n          }\n\n          for (i = caretPosNew - 1; i >= 0; i--) {\n            if (p.maskDigitPosMap[i]) {\n              maskDigitsBeforeCaretAll++;\n            }\n          }\n\n          for (i = caretPosOld - 1; i >= 0; i--) {\n            if (p.maskDigitPosMapOld[i]) {\n              maskDigitsBeforeCaretAllOld++;\n            }\n          } // if the cursor is at the end keep it there\n\n\n          if (caretPosNew > oldValL) {\n            caretPosNew = newValL * 10;\n          } else if (caretPosOld >= caretPosNew && caretPosOld !== oldValL) {\n            if (!p.maskDigitPosMapOld[caretPosNew]) {\n              var caretPos = caretPosNew;\n              caretPosNew -= maskDigitsBeforeCaretAllOld - maskDigitsBeforeCaretAll;\n              caretPosNew -= maskDigitsBeforeCaret;\n\n              if (p.maskDigitPosMap[caretPosNew]) {\n                caretPosNew = caretPos;\n              }\n            }\n          } else if (caretPosNew > caretPosOld) {\n            caretPosNew += maskDigitsBeforeCaretAll - maskDigitsBeforeCaretAllOld;\n            caretPosNew += maskDigitsAfterCaret;\n          }\n        }\n\n        return caretPosNew;\n      },\n      behaviour: function (e) {\n        e = e || window.event;\n        p.invalid = [];\n        var keyCode = el.data('mask-keycode');\n\n        if ($.inArray(keyCode, jMask.byPassKeys) === -1) {\n          var newVal = p.getMasked(),\n              caretPos = p.getCaret(),\n              oldVal = el.data('mask-previus-value') || ''; // this is a compensation to devices/browsers that don't compensate\n          // caret positioning the right way\n\n          setTimeout(function () {\n            p.setCaret(p.calculateCaretPosition(oldVal));\n          }, $.jMaskGlobals.keyStrokeCompensation);\n          p.val(newVal);\n          p.setCaret(caretPos);\n          return p.callbacks(e);\n        }\n      },\n      getMasked: function (skipMaskChars, val) {\n        var buf = [],\n            value = val === undefined ? p.val() : val + '',\n            m = 0,\n            maskLen = mask.length,\n            v = 0,\n            valLen = value.length,\n            offset = 1,\n            addMethod = 'push',\n            resetPos = -1,\n            maskDigitCount = 0,\n            maskDigitPosArr = [],\n            lastMaskChar,\n            check;\n\n        if (options.reverse) {\n          addMethod = 'unshift';\n          offset = -1;\n          lastMaskChar = 0;\n          m = maskLen - 1;\n          v = valLen - 1;\n\n          check = function () {\n            return m > -1 && v > -1;\n          };\n        } else {\n          lastMaskChar = maskLen - 1;\n\n          check = function () {\n            return m < maskLen && v < valLen;\n          };\n        }\n\n        var lastUntranslatedMaskChar;\n\n        while (check()) {\n          var maskDigit = mask.charAt(m),\n              valDigit = value.charAt(v),\n              translation = jMask.translation[maskDigit];\n\n          if (translation) {\n            if (valDigit.match(translation.pattern)) {\n              buf[addMethod](valDigit);\n\n              if (translation.recursive) {\n                if (resetPos === -1) {\n                  resetPos = m;\n                } else if (m === lastMaskChar && m !== resetPos) {\n                  m = resetPos - offset;\n                }\n\n                if (lastMaskChar === resetPos) {\n                  m -= offset;\n                }\n              }\n\n              m += offset;\n            } else if (valDigit === lastUntranslatedMaskChar) {\n              // matched the last untranslated (raw) mask character that we encountered\n              // likely an insert offset the mask character from the last entry; fall\n              // through and only increment v\n              maskDigitCount--;\n              lastUntranslatedMaskChar = undefined;\n            } else if (translation.optional) {\n              m += offset;\n              v -= offset;\n            } else if (translation.fallback) {\n              buf[addMethod](translation.fallback);\n              m += offset;\n              v -= offset;\n            } else {\n              p.invalid.push({\n                p: v,\n                v: valDigit,\n                e: translation.pattern\n              });\n            }\n\n            v += offset;\n          } else {\n            if (!skipMaskChars) {\n              buf[addMethod](maskDigit);\n            }\n\n            if (valDigit === maskDigit) {\n              maskDigitPosArr.push(v);\n              v += offset;\n            } else {\n              lastUntranslatedMaskChar = maskDigit;\n              maskDigitPosArr.push(v + maskDigitCount);\n              maskDigitCount++;\n            }\n\n            m += offset;\n          }\n        }\n\n        var lastMaskCharDigit = mask.charAt(lastMaskChar);\n\n        if (maskLen === valLen + 1 && !jMask.translation[lastMaskCharDigit]) {\n          buf.push(lastMaskCharDigit);\n        }\n\n        var newVal = buf.join('');\n        p.mapMaskdigitPositions(newVal, maskDigitPosArr, valLen);\n        return newVal;\n      },\n      mapMaskdigitPositions: function (newVal, maskDigitPosArr, valLen) {\n        var maskDiff = options.reverse ? newVal.length - valLen : 0;\n        p.maskDigitPosMap = {};\n\n        for (var i = 0; i < maskDigitPosArr.length; i++) {\n          p.maskDigitPosMap[maskDigitPosArr[i] + maskDiff] = 1;\n        }\n      },\n      callbacks: function (e) {\n        var val = p.val(),\n            changed = val !== oldValue,\n            defaultArgs = [val, e, el, options],\n            callback = function (name, criteria, args) {\n          if (typeof options[name] === 'function' && criteria) {\n            options[name].apply(this, args);\n          }\n        };\n\n        callback('onChange', changed === true, defaultArgs);\n        callback('onKeyPress', changed === true, defaultArgs);\n        callback('onComplete', val.length === mask.length, defaultArgs);\n        callback('onInvalid', p.invalid.length > 0, [val, e, el, p.invalid, options]);\n      }\n    };\n    el = $(el);\n    var jMask = this,\n        oldValue = p.val(),\n        regexMask;\n    mask = typeof mask === 'function' ? mask(p.val(), undefined, el, options) : mask; // public methods\n\n    jMask.mask = mask;\n    jMask.options = options;\n\n    jMask.remove = function () {\n      var caret = p.getCaret();\n\n      if (jMask.options.placeholder) {\n        el.removeAttr('placeholder');\n      }\n\n      if (el.data('mask-maxlength')) {\n        el.removeAttr('maxlength');\n      }\n\n      p.destroyEvents();\n      p.val(jMask.getCleanVal());\n      p.setCaret(caret);\n      return el;\n    }; // get value without mask\n\n\n    jMask.getCleanVal = function () {\n      return p.getMasked(true);\n    }; // get masked value without the value being in the input or element\n\n\n    jMask.getMaskedVal = function (val) {\n      return p.getMasked(false, val);\n    };\n\n    jMask.init = function (onlyMask) {\n      onlyMask = onlyMask || false;\n      options = options || {};\n      jMask.clearIfNotMatch = $.jMaskGlobals.clearIfNotMatch;\n      jMask.byPassKeys = $.jMaskGlobals.byPassKeys;\n      jMask.translation = $.extend({}, $.jMaskGlobals.translation, options.translation);\n      jMask = $.extend(true, {}, jMask, options);\n      regexMask = p.getRegexMask();\n\n      if (onlyMask) {\n        p.events();\n        p.val(p.getMasked());\n      } else {\n        if (options.placeholder) {\n          el.attr('placeholder', options.placeholder);\n        } // this is necessary, otherwise if the user submit the form\n        // and then press the \"back\" button, the autocomplete will erase\n        // the data. Works fine on IE9+, FF, Opera, Safari.\n\n\n        if (el.data('mask')) {\n          el.attr('autocomplete', 'off');\n        } // detect if is necessary let the user type freely.\n        // for is a lot faster than forEach.\n\n\n        for (var i = 0, maxlength = true; i < mask.length; i++) {\n          var translation = jMask.translation[mask.charAt(i)];\n\n          if (translation && translation.recursive) {\n            maxlength = false;\n            break;\n          }\n        }\n\n        if (maxlength) {\n          el.attr('maxlength', mask.length).data('mask-maxlength', true);\n        }\n\n        p.destroyEvents();\n        p.events();\n        var caret = p.getCaret();\n        p.val(p.getMasked());\n        p.setCaret(caret);\n      }\n    };\n\n    jMask.init(!el.is('input'));\n  };\n\n  $.maskWatchers = {};\n\n  var HTMLAttributes = function () {\n    var input = $(this),\n        options = {},\n        prefix = 'data-mask-',\n        mask = input.attr('data-mask');\n\n    if (input.attr(prefix + 'reverse')) {\n      options.reverse = true;\n    }\n\n    if (input.attr(prefix + 'clearifnotmatch')) {\n      options.clearIfNotMatch = true;\n    }\n\n    if (input.attr(prefix + 'selectonfocus') === 'true') {\n      options.selectOnFocus = true;\n    }\n\n    if (notSameMaskObject(input, mask, options)) {\n      return input.data('mask', new Mask(this, mask, options));\n    }\n  },\n      notSameMaskObject = function (field, mask, options) {\n    options = options || {};\n    var maskObject = $(field).data('mask'),\n        stringify = JSON.stringify,\n        value = $(field).val() || $(field).text();\n\n    try {\n      if (typeof mask === 'function') {\n        mask = mask(value);\n      }\n\n      return typeof maskObject !== 'object' || stringify(maskObject.options) !== stringify(options) || maskObject.mask !== mask;\n    } catch (e) {}\n  },\n      eventSupported = function (eventName) {\n    var el = document.createElement('div'),\n        isSupported;\n    eventName = 'on' + eventName;\n    isSupported = eventName in el;\n\n    if (!isSupported) {\n      el.setAttribute(eventName, 'return;');\n      isSupported = typeof el[eventName] === 'function';\n    }\n\n    el = null;\n    return isSupported;\n  };\n\n  $.fn.mask = function (mask, options) {\n    options = options || {};\n\n    var selector = this.selector,\n        globals = $.jMaskGlobals,\n        interval = globals.watchInterval,\n        watchInputs = options.watchInputs || globals.watchInputs,\n        maskFunction = function () {\n      if (notSameMaskObject(this, mask, options)) {\n        return $(this).data('mask', new Mask(this, mask, options));\n      }\n    };\n\n    $(this).each(maskFunction);\n\n    if (selector && selector !== '' && watchInputs) {\n      clearInterval($.maskWatchers[selector]);\n      $.maskWatchers[selector] = setInterval(function () {\n        $(document).find(selector).each(maskFunction);\n      }, interval);\n    }\n\n    return this;\n  };\n\n  $.fn.masked = function (val) {\n    return this.data('mask').getMaskedVal(val);\n  };\n\n  $.fn.unmask = function () {\n    clearInterval($.maskWatchers[this.selector]);\n    delete $.maskWatchers[this.selector];\n    return this.each(function () {\n      var dataMask = $(this).data('mask');\n\n      if (dataMask) {\n        dataMask.remove().removeData('mask');\n      }\n    });\n  };\n\n  $.fn.cleanVal = function () {\n    return this.data('mask').getCleanVal();\n  };\n\n  $.applyDataMask = function (selector) {\n    selector = selector || $.jMaskGlobals.maskElements;\n    var $selector = selector instanceof $ ? selector : $(selector);\n    $selector.filter($.jMaskGlobals.dataMaskAttr).each(HTMLAttributes);\n  };\n\n  var globals = {\n    maskElements: 'input,td,span,div',\n    dataMaskAttr: '*[data-mask]',\n    dataMask: true,\n    watchInterval: 300,\n    watchInputs: true,\n    keyStrokeCompensation: 10,\n    // old versions of chrome dont work great with input event\n    useInput: !/Chrome\\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) && eventSupported('input'),\n    watchDataMask: false,\n    byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91],\n    translation: {\n      '0': {\n        pattern: /\\d/\n      },\n      '9': {\n        pattern: /\\d/,\n        optional: true\n      },\n      '#': {\n        pattern: /\\d/,\n        recursive: true\n      },\n      'A': {\n        pattern: /[a-zA-Z0-9]/\n      },\n      'S': {\n        pattern: /[a-zA-Z]/\n      }\n    }\n  };\n  $.jMaskGlobals = $.jMaskGlobals || {};\n  globals = $.jMaskGlobals = $.extend(true, {}, globals, $.jMaskGlobals); // looking for inputs with data-mask attribute\n\n  if (globals.dataMask) {\n    $.applyDataMask();\n  }\n\n  setInterval(function () {\n    if ($.jMaskGlobals.watchDataMask) {\n      $.applyDataMask();\n    }\n  }, globals.watchInterval);\n}, window.jQuery, window.Zepto);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-mask-plugin/dist/jquery.mask.js\n")},"./node_modules/jquery/dist/jquery.js":function(module,exports){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n(function (global, factory) {\n  "use strict";\n\n  if ( true && typeof module.exports === "object") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require("jquery")(window);\n    // See ticket #14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error("jQuery requires a window with a document");\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  } // Pass this if window is not defined yet\n\n})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n  // enough that all such attempts are guarded in a try block.\n  "use strict";\n\n  var arr = [];\n  var getProto = Object.getPrototypeOf;\n  var slice = arr.slice;\n  var flat = arr.flat ? function (array) {\n    return arr.flat.call(array);\n  } : function (array) {\n    return arr.concat.apply([], array);\n  };\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var fnToString = hasOwn.toString;\n  var ObjectFunctionString = fnToString.call(Object);\n  var support = {};\n\n  var isFunction = function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns "function" for HTML <object> elements\n    // (i.e., `typeof document.createElement( "object" ) === "function"`).\n    // We don\'t want to classify *any* DOM node as a function.\n    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n    // Plus for old WebKit, typeof returns "function" for HTML collections\n    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)\n    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";\n  };\n\n  var isWindow = function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n\n  var document = window.document;\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n        val,\n        script = doc.createElement("script");\n    script.text = code;\n\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don\'t support the "nonce" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n\n  function toType(obj) {\n    if (obj == null) {\n      return obj + "";\n    } // Support: Android <=2.3 only (functionish RegExp)\n\n\n    return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;\n  }\n  /* global Symbol */\n  // Defining this global in .eslintrc.json would create a danger of using the global\n  // unguarded in another place, it seems safer to define global only for this module\n\n\n  var version = "3.6.0",\n      // Define a local copy of jQuery\n  jQuery = function (selector, context) {\n    // The jQuery object is actually just the init constructor \'enhanced\'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function () {\n      return slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function (num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return slice.call(this);\n      } // Return just the one element from the set\n\n\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function (elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function (callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function (callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function () {\n      return this.pushStack(slice.apply(this, arguments));\n    },\n    first: function () {\n      return this.eq(0);\n    },\n    last: function () {\n      return this.eq(-1);\n    },\n    even: function () {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return (i + 1) % 2;\n      }));\n    },\n    odd: function () {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return i % 2;\n      }));\n    },\n    eq: function (i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function () {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array\'s method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === "boolean") {\n      deep = target; // Skip the boolean and the target\n\n      target = arguments[i] || {};\n      i++;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (typeof target !== "object" && !isFunction(target)) {\n      target = {};\n    } // Extend jQuery itself if only one argument is passed\n\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name]; // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n\n          if (name === "__proto__" || target === copy) {\n            continue;\n          } // Recurse if we\'re merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name]; // Ensure proper type for the source value\n\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n\n            copyIsArray = false; // Never move original objects, clone them\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don\'t bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: "jQuery" + (version + Math.random()).replace(/\\D/g, ""),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function (msg) {\n      throw new Error(msg);\n    },\n    noop: function () {},\n    isPlainObject: function (obj) {\n      var proto, Ctor; // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n\n      if (!obj || toString.call(obj) !== "[object Object]") {\n        return false;\n      }\n\n      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\n\n      if (!proto) {\n        return true;\n      } // Objects with prototype are plain iff they were constructed by a global Object function\n\n\n      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;\n      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function (obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function (code, options, doc) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      }, doc);\n    },\n    each: function (obj, callback) {\n      var length,\n          i = 0;\n\n      if (isArrayLike(obj)) {\n        length = obj.length;\n\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n\n      return obj;\n    },\n    // results is for internal usage only\n    makeArray: function (arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function (elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function (first, second) {\n      var len = +second.length,\n          j = 0,\n          i = first.length;\n\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function (elems, callback, invert) {\n      var callbackInverse,\n          matches = [],\n          i = 0,\n          length = elems.length,\n          callbackExpect = !invert; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function (elems, callback, arg) {\n      var length,\n          value,\n          i = 0,\n          ret = []; // Go through the array, translating each of the items to their new values\n\n      if (isArrayLike(elems)) {\n        length = elems.length;\n\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return flat(ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n\n  if (typeof Symbol === "function") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  } // Populate the class2type map\n\n\n  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {\n    class2type["[object " + name + "]"] = name.toLowerCase();\n  });\n\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn\'t used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && "length" in obj && obj.length,\n        type = toType(obj);\n\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n\n    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;\n  }\n\n  var Sizzle =\n  /*!\n   * Sizzle CSS Selector Engine v2.3.6\n   * https://sizzlejs.com/\n   *\n   * Copyright JS Foundation and other contributors\n   * Released under the MIT license\n   * https://js.foundation/\n   *\n   * Date: 2021-02-16\n   */\n  function (window) {\n    var i,\n        support,\n        Expr,\n        getText,\n        isXML,\n        tokenize,\n        compile,\n        select,\n        outermostContext,\n        sortInput,\n        hasDuplicate,\n        // Local document vars\n    setDocument,\n        document,\n        docElem,\n        documentIsHTML,\n        rbuggyQSA,\n        rbuggyMatches,\n        matches,\n        contains,\n        // Instance-specific data\n    expando = "sizzle" + 1 * new Date(),\n        preferredDoc = window.document,\n        dirruns = 0,\n        done = 0,\n        classCache = createCache(),\n        tokenCache = createCache(),\n        compilerCache = createCache(),\n        nonnativeSelectorCache = createCache(),\n        sortOrder = function (a, b) {\n      if (a === b) {\n        hasDuplicate = true;\n      }\n\n      return 0;\n    },\n        // Instance methods\n    hasOwn = {}.hasOwnProperty,\n        arr = [],\n        pop = arr.pop,\n        pushNative = arr.push,\n        push = arr.push,\n        slice = arr.slice,\n        // Use a stripped-down indexOf as it\'s faster than native\n    // https://jsperf.com/thor-indexof-vs-for/5\n    indexOf = function (list, elem) {\n      var i = 0,\n          len = list.length;\n\n      for (; i < len; i++) {\n        if (list[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",\n        // Regular expressions\n    // http://www.w3.org/TR/css3-selectors/#whitespace\n    whitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = "(?:\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+",\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)\n    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]\n    // or strings [capture 3 or capture 4]"\n    "*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace + "*\\\\]",\n        pseudos = ":(" + identifier + ")(?:\\\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n    // 1. quoted (capture 3; capture 4 or capture 5)\n    "(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" + // 2. simple (capture 6)\n    "((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)\n    ".*" + ")\\\\)|)",\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp(whitespace + "+", "g"),\n        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g"),\n        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),\n        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),\n        rdescend = new RegExp(whitespace + "|>"),\n        rpseudo = new RegExp(pseudos),\n        ridentifier = new RegExp("^" + identifier + "$"),\n        matchExpr = {\n      "ID": new RegExp("^#(" + identifier + ")"),\n      "CLASS": new RegExp("^\\\\.(" + identifier + ")"),\n      "TAG": new RegExp("^(" + identifier + "|[*])"),\n      "ATTR": new RegExp("^" + attributes),\n      "PSEUDO": new RegExp("^" + pseudos),\n      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace + "*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i"),\n      "bool": new RegExp("^(?:" + booleans + ")$", "i"),\n      // For use in libraries implementing .is()\n      // We use this for POS matching in `select`\n      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" + whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i")\n    },\n        rhtml = /HTML$/i,\n        rinputs = /^(?:input|select|textarea|button)$/i,\n        rheader = /^h\\d$/i,\n        rnative = /^[^{]+\\{\\s*\\[native \\w/,\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        rsibling = /[+~]/,\n        // CSS escapes\n    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp("\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\([^\\\\r\\\\n\\\\f])", "g"),\n        funescape = function (escape, nonHex) {\n      var high = "0x" + escape.slice(1) - 0x10000;\n      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence\n      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point\n      // Support: IE <=11+\n      // For values outside the Basic Multilingual Plane (BMP), manually construct a\n      // surrogate pair\n      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n    },\n        // CSS string/identifier serialization\n    // https://drafts.csswg.org/cssom/#common-serializing-idioms\n    rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        fcssescape = function (ch, asCodePoint) {\n      if (asCodePoint) {\n        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n        if (ch === "\\0") {\n          return "\\uFFFD";\n        } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n        return ch.slice(0, -1) + "\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";\n      } // Other potentially-special ASCII characters get backslash-escaped\n\n\n      return "\\\\" + ch;\n    },\n        // Used for iframes\n    // See setDocument()\n    // Removing the function wrapper causes a "Permission Denied"\n    // error in IE\n    unloadHandler = function () {\n      setDocument();\n    },\n        inDisabledFieldset = addCombinator(function (elem) {\n      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";\n    }, {\n      dir: "parentNode",\n      next: "legend"\n    }); // Optimize for push.apply( _, NodeList )\n\n\n    try {\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n      // Detect silently failing push.apply\n      // eslint-disable-next-line no-unused-expressions\n\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: arr.length ? // Leverage slice if possible\n        function (target, els) {\n          pushNative.apply(target, slice.call(els));\n        } : // Support: IE<9\n        // Otherwise append directly\n        function (target, els) {\n          var j = target.length,\n              i = 0; // Can\'t trust NodeList.length\n\n          while (target[j++] = els[i++]) {}\n\n          target.length = j - 1;\n        }\n      };\n    }\n\n    function Sizzle(selector, context, results, seed) {\n      var m,\n          i,\n          elem,\n          nid,\n          match,\n          groups,\n          newSelector,\n          newContext = context && context.ownerDocument,\n          // nodeType defaults to 9, since context defaults to document\n      nodeType = context ? context.nodeType : 9;\n      results = results || []; // Return early from calls with invalid selector or context\n\n      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n      if (!seed) {\n        setDocument(context);\n        context = context || document;\n\n        if (documentIsHTML) {\n          // If the selector is sufficiently simple, try using a "get*By*" DOM method\n          // (excepting DocumentFragment context, where the methods don\'t exist)\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n            // ID selector\n            if (m = match[1]) {\n              // Document context\n              if (nodeType === 9) {\n                if (elem = context.getElementById(m)) {\n                  // Support: IE, Opera, Webkit\n                  // TODO: identify versions\n                  // getElementById can match elements by name instead of ID\n                  if (elem.id === m) {\n                    results.push(elem);\n                    return results;\n                  }\n                } else {\n                  return results;\n                } // Element context\n\n              } else {\n                // Support: IE, Opera, Webkit\n                // TODO: identify versions\n                // getElementById can match elements by name instead of ID\n                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } // Type selector\n\n            } else if (match[2]) {\n              push.apply(results, context.getElementsByTagName(selector));\n              return results; // Class selector\n            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n              push.apply(results, context.getElementsByClassName(m));\n              return results;\n            }\n          } // Take advantage of querySelectorAll\n\n\n          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only\n          // Exclude object elements\n          nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {\n            newSelector = selector;\n            newContext = context; // qSA considers elements outside a scoping root when evaluating child or\n            // descendant combinators, which is not what we want.\n            // In such cases, we work around the behavior by prefixing every selector in the\n            // list with an ID selector referencing the scope context.\n            // The technique has to be used as well when a leading combinator is used\n            // as such selectors are not recognized by querySelectorAll.\n            // Thanks to Andrew Dupont for this technique.\n\n            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {\n              // Expand context for sibling selectors\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser\n              // supports it & if we\'re not changing the context.\n\n              if (newContext !== context || !support.scope) {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute("id")) {\n                  nid = nid.replace(rcssescape, fcssescape);\n                } else {\n                  context.setAttribute("id", nid = expando);\n                }\n              } // Prefix every selector in the list\n\n\n              groups = tokenize(selector);\n              i = groups.length;\n\n              while (i--) {\n                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);\n              }\n\n              newSelector = groups.join(",");\n            }\n\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {\n              nonnativeSelectorCache(selector, true);\n            } finally {\n              if (nid === expando) {\n                context.removeAttribute("id");\n              }\n            }\n          }\n        }\n      } // All others\n\n\n      return select(selector.replace(rtrim, "$1"), context, results, seed);\n    }\n    /**\n     * Create key-value caches of limited size\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n\n\n    function createCache() {\n      var keys = [];\n\n      function cache(key, value) {\n        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key + " ") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n\n        return cache[key + " "] = value;\n      }\n\n      return cache;\n    }\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n\n\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created element and returns a boolean result\n     */\n\n\n    function assert(fn) {\n      var el = document.createElement("fieldset");\n\n      try {\n        return !!fn(el);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        } // release memory in IE\n\n\n        el = null;\n      }\n    }\n    /**\n     * Adds the same handler for all of the specified attrs\n     * @param {String} attrs Pipe-separated list of attributes\n     * @param {Function} handler The method that will be applied\n     */\n\n\n    function addHandle(attrs, handler) {\n      var arr = attrs.split("|"),\n          i = arr.length;\n\n      while (i--) {\n        Expr.attrHandle[arr[i]] = handler;\n      }\n    }\n    /**\n     * Checks document order of two siblings\n     * @param {Element} a\n     * @param {Element} b\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n     */\n\n\n    function siblingCheck(a, b) {\n      var cur = b && a,\n          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n      if (diff) {\n        return diff;\n      } // Check if b follows a\n\n\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n\n      return a ? 1 : -1;\n    }\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n\n\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === "input" && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n\n\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === "input" || name === "button") && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for :enabled/:disabled\n     * @param {Boolean} disabled true for :disabled; false for :enabled\n     */\n\n\n    function createDisabledPseudo(disabled) {\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n      return function (elem) {\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ("form" in elem) {\n          // Check for inherited disabledness on relevant non-disabled elements:\n          // * listed form-associated elements in a disabled fieldset\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n          // * option elements in a disabled optgroup\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n          // All such elements have a "form" property.\n          if (elem.parentNode && elem.disabled === false) {\n            // Option elements defer to a parent optgroup if present\n            if ("label" in elem) {\n              if ("label" in elem.parentNode) {\n                return elem.parentNode.disabled === disabled;\n              } else {\n                return elem.disabled === disabled;\n              }\n            } // Support: IE 6 - 11\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n            /* jshint -W018 */\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n          }\n\n          return elem.disabled === disabled; // Try to winnow out elements that can\'t be disabled before trusting the disabled property.\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn\'t\n          // even exist on them, let alone have a boolean value.\n        } else if ("label" in elem) {\n          return elem.disabled === disabled;\n        } // Remaining elements are neither :enabled nor :disabled\n\n\n        return false;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n\n\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n              matchIndexes = fn([], seed.length, argument),\n              i = matchIndexes.length; // Match elements found at the specified indexes\n\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Checks a node for validity as a Sizzle context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n\n\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== "undefined" && context;\n    } // Expose support vars for convenience\n\n\n    support = Sizzle.support = {};\n    /**\n     * Detects XML nodes\n     * @param {Element|Object} elem An element or a document\n     * @returns {Boolean} True iff elem is a non-HTML XML node\n     */\n\n    isXML = Sizzle.isXML = function (elem) {\n      var namespace = elem && elem.namespaceURI,\n          docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8\n      // Assume HTML when documentElement doesn\'t yet exist, such as inside loading iframes\n      // https://bugs.jquery.com/ticket/4833\n\n      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");\n    };\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n\n\n    setDocument = Sizzle.setDocument = function (node) {\n      var hasCompare,\n          subWindow,\n          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      } // Update global variables\n\n\n      document = doc;\n      docElem = document.documentElement;\n      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+\n      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n        // Support: IE 11, Edge\n        if (subWindow.addEventListener) {\n          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only\n        } else if (subWindow.attachEvent) {\n          subWindow.attachEvent("onunload", unloadHandler);\n        }\n      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n      // Safari 4 - 5 only, Opera <=11.6 - 12.x only\n      // IE/Edge & older browsers don\'t support the :scope pseudo-class.\n      // Support: Safari 6.0 only\n      // Safari 6.0 supports :scope but it\'s an alias of :root there.\n\n\n      support.scope = assert(function (el) {\n        docElem.appendChild(el).appendChild(document.createElement("div"));\n        return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;\n      });\n      /* Attributes\n      ---------------------------------------------------------------------- */\n      // Support: IE<8\n      // Verify that getAttribute really returns attributes and not properties\n      // (excepting IE8 booleans)\n\n      support.attributes = assert(function (el) {\n        el.className = "i";\n        return !el.getAttribute("className");\n      });\n      /* getElement(s)By*\n      ---------------------------------------------------------------------- */\n      // Check if getElementsByTagName("*") returns only elements\n\n      support.getElementsByTagName = assert(function (el) {\n        el.appendChild(document.createComment(""));\n        return !el.getElementsByTagName("*").length;\n      }); // Support: IE<9\n\n      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don\'t pick up programmatically-set names,\n      // so use a roundabout getElementsByName test\n\n      support.getById = assert(function (el) {\n        docElem.appendChild(el).id = expando;\n        return !document.getElementsByName || !document.getElementsByName(expando).length;\n      }); // ID filter and find\n\n      if (support.getById) {\n        Expr.filter["ID"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute("id") === attrId;\n          };\n        };\n\n        Expr.find["ID"] = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var elem = context.getElementById(id);\n            return elem ? [elem] : [];\n          }\n        };\n      } else {\n        Expr.filter["ID"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");\n            return node && node.value === attrId;\n          };\n        }; // Support: IE 6 - 7 only\n        // getElementById is not reliable as a find shortcut\n\n\n        Expr.find["ID"] = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var node,\n                i,\n                elems,\n                elem = context.getElementById(id);\n\n            if (elem) {\n              // Verify the id attribute\n              node = elem.getAttributeNode("id");\n\n              if (node && node.value === id) {\n                return [elem];\n              } // Fall back on getElementsByName\n\n\n              elems = context.getElementsByName(id);\n              i = 0;\n\n              while (elem = elems[i++]) {\n                node = elem.getAttributeNode("id");\n\n                if (node && node.value === id) {\n                  return [elem];\n                }\n              }\n            }\n\n            return [];\n          }\n        };\n      } // Tag\n\n\n      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {\n        if (typeof context.getElementsByTagName !== "undefined") {\n          return context.getElementsByTagName(tag); // DocumentFragment nodes don\'t have gEBTN\n        } else if (support.qsa) {\n          return context.querySelectorAll(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n            tmp = [],\n            i = 0,\n            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n        results = context.getElementsByTagName(tag); // Filter out possible comments\n\n        if (tag === "*") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n\n          return tmp;\n        }\n\n        return results;\n      }; // Class\n\n      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {\n        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n      // QSA and matchesSelector support\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n      // We allow this because of a bug in IE8/9 that throws an error\n      // whenever `document.activeElement` is accessed on an iframe\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\n      // See https://bugs.jquery.com/ticket/13378\n\n      rbuggyQSA = [];\n\n      if (support.qsa = rnative.test(document.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (el) {\n          var input; // Select is set to empty string on purpose\n          // This is to test IE\'s treatment of not explicitly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // https://bugs.jquery.com/ticket/12359\n\n          docElem.appendChild(el).innerHTML = "<a id=\'" + expando + "\'></a>" + "<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" + "<option selected=\'\'></option></select>"; // Support: IE8, Opera 11-12.16\n          // Nothing should be selected when empty strings follow ^= or $= or *=\n          // The test attribute must be unknown in Opera but "safe" for WinRT\n          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n          if (el.querySelectorAll("[msallowcapture^=\'\']").length) {\n            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\'\'|\\"\\")");\n          } // Support: IE8\n          // Boolean attributes and "value" are not treated correctly\n\n\n          if (!el.querySelectorAll("[selected]").length) {\n            rbuggyQSA.push("\\\\[" + whitespace + "*(?:value|" + booleans + ")");\n          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {\n            rbuggyQSA.push("~=");\n          } // Support: IE 11+, Edge 15 - 18+\n          // IE 11/Edge don\'t find elements on a `[name=\'\']` query in some cases.\n          // Adding a temporary attribute to the document before the selection works\n          // around the issue.\n          // Interestingly, IE 10 & older don\'t seem to have the issue.\n\n\n          input = document.createElement("input");\n          input.setAttribute("name", "");\n          el.appendChild(input);\n\n          if (!el.querySelectorAll("[name=\'\']").length) {\n            rbuggyQSA.push("\\\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:\'\'|\\"\\")");\n          } // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n\n\n          if (!el.querySelectorAll(":checked").length) {\n            rbuggyQSA.push(":checked");\n          } // Support: Safari 8+, iOS 8+\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\n          // In-page `selector#id sibling-combinator selector` fails\n\n\n          if (!el.querySelectorAll("a#" + expando + "+*").length) {\n            rbuggyQSA.push(".#.+[+~]");\n          } // Support: Firefox <=3.6 - 5 only\n          // Old Firefox doesn\'t throw on a badly-escaped identifier.\n\n\n          el.querySelectorAll("\\\\\\f");\n          rbuggyQSA.push("[\\\\r\\\\n\\\\f]");\n        });\n        assert(function (el) {\n          el.innerHTML = "<a href=\'\' disabled=\'disabled\'></a>" + "<select disabled=\'disabled\'><option/></select>"; // Support: Windows 8 Native Apps\n          // The type and name attributes are restricted during .innerHTML assignment\n\n          var input = document.createElement("input");\n          input.setAttribute("type", "hidden");\n          el.appendChild(input).setAttribute("name", "D"); // Support: IE8\n          // Enforce case-sensitivity of name attribute\n\n          if (el.querySelectorAll("[name=d]").length) {\n            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n\n\n          if (el.querySelectorAll(":enabled").length !== 2) {\n            rbuggyQSA.push(":enabled", ":disabled");\n          } // Support: IE9-11+\n          // IE\'s :disabled selector does not pick up the children of disabled fieldsets\n\n\n          docElem.appendChild(el).disabled = true;\n\n          if (el.querySelectorAll(":disabled").length !== 2) {\n            rbuggyQSA.push(":enabled", ":disabled");\n          } // Support: Opera 10 - 11 only\n          // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n          el.querySelectorAll("*,:x");\n          rbuggyQSA.push(",.*:");\n        });\n      }\n\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (el) {\n          // Check to see if it\'s possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception\n          // Gecko does not error, returns false instead\n\n          matches.call(el, "[s!=\'\']:x");\n          rbuggyMatches.push("!=", pseudos);\n        });\n      }\n\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));\n      /* Contains\n      ---------------------------------------------------------------------- */\n\n      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n      // Purposefully self-exclusive\n      // As in, an element does not contain itself\n\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n        var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n      /* Sorting\n      ---------------------------------------------------------------------- */\n      // Document order sorting\n\n      sortOrder = hasCompare ? function (a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        } // Sort on method existence if only one input has compareDocumentPosition\n\n\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n        if (compare) {\n          return compare;\n        } // Calculate position if both inputs belong to the same document\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n\n\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n        1; // Disconnected nodes\n\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {\n            return -1;\n          } // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n\n\n          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {\n            return 1;\n          } // Maintain original order\n\n\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n        }\n\n        return compare & 4 ? -1 : 1;\n      } : function (a, b) {\n        // Exit early if the nodes are identical\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        var cur,\n            i = 0,\n            aup = a.parentNode,\n            bup = b.parentNode,\n            ap = [a],\n            bp = [b]; // Parentless nodes are either documents or disconnected\n\n        if (!aup || !bup) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n\n          /* eslint-disable eqeqeq */\n          return a == document ? -1 : b == document ? 1 :\n          /* eslint-enable eqeqeq */\n          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        } // Otherwise we need full lists of their ancestors for comparison\n\n\n        cur = a;\n\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n\n        cur = b;\n\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        } // Walk down the tree looking for a discrepancy\n\n\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n\n        return i ? // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n        // two documents; shallow comparisons work.\n\n        /* eslint-disable eqeqeq */\n        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :\n        /* eslint-enable eqeqeq */\n        0;\n      };\n      return document;\n    };\n\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n\n    Sizzle.matchesSelector = function (elem, expr) {\n      setDocument(elem);\n\n      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr); // IE 9\'s matchesSelector returns false on disconnected nodes\n\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {\n          nonnativeSelectorCache(expr, true);\n        }\n      }\n\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((context.ownerDocument || context) != document) {\n        setDocument(context);\n      }\n\n      return contains(context, elem);\n    };\n\n    Sizzle.attr = function (elem, name) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((elem.ownerDocument || elem) != document) {\n        setDocument(elem);\n      }\n\n      var fn = Expr.attrHandle[name.toLowerCase()],\n          // Don\'t get fooled by Object.prototype properties (jQuery #13807)\n      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    };\n\n    Sizzle.escape = function (sel) {\n      return (sel + "").replace(rcssescape, fcssescape);\n    };\n\n    Sizzle.error = function (msg) {\n      throw new Error("Syntax error, unrecognized expression: " + msg);\n    };\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n\n\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n          duplicates = [],\n          j = 0,\n          i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n      hasDuplicate = !support.detectDuplicates;\n      sortInput = !support.sortStable && results.slice(0);\n      results.sort(sortOrder);\n\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      } // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n\n\n      sortInput = null;\n      return results;\n    };\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n\n\n    getText = Sizzle.getText = function (elem) {\n      var node,\n          ret = "",\n          i = 0,\n          nodeType = elem.nodeType;\n\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (jQuery #11153)\n        if (typeof elem.textContent === "string") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      } // Do not include comment or processing instruction nodes\n\n\n      return ret;\n    };\n\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        ">": {\n          dir: "parentNode",\n          first: true\n        },\n        " ": {\n          dir: "parentNode"\n        },\n        "+": {\n          dir: "previousSibling",\n          first: true\n        },\n        "~": {\n          dir: "previousSibling"\n        }\n      },\n      preFilter: {\n        "ATTR": function (match) {\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);\n\n          if (match[2] === "~=") {\n            match[3] = " " + match[3] + " ";\n          }\n\n          return match.slice(0, 4);\n        },\n        "CHILD": function (match) {\n          /* matches from matchExpr["CHILD"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n\n          if (match[1].slice(0, 3) === "nth") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            } // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n\n\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));\n            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n\n          return match;\n        },\n        "PSEUDO": function (match) {\n          var excess,\n              unquoted = !match[6] && match[2];\n\n          if (matchExpr["CHILD"].test(match[0])) {\n            return null;\n          } // Accept quoted arguments as-is\n\n\n          if (match[3]) {\n            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        "TAG": function (nodeNameSelector) {\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === "*" ? function () {\n            return true;\n          } : function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        "CLASS": function (className) {\n          var pattern = classCache[className + " "];\n          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");\n          });\n        },\n        "ATTR": function (name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n\n            if (result == null) {\n              return operator === "!=";\n            }\n\n            if (!operator) {\n              return true;\n            }\n\n            result += "";\n            /* eslint-disable max-len */\n\n            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;\n            /* eslint-enable max-len */\n          };\n        },\n        "CHILD": function (type, what, _argument, first, last) {\n          var simple = type.slice(0, 3) !== "nth",\n              forward = type.slice(-4) !== "last",\n              ofType = what === "of-type";\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, _context, xml) {\n            var cache,\n                uniqueCache,\n                outerCache,\n                node,\n                nodeIndex,\n                start,\n                dir = simple !== forward ? "nextSibling" : "previousSibling",\n                parent = elem.parentNode,\n                name = ofType && elem.nodeName.toLowerCase(),\n                useCache = !xml && !ofType,\n                diff = false;\n\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  } // Reverse direction for :only-* (if we haven\'t yet done so)\n\n\n                  start = dir = type === "only" && !start && "nextSibling";\n                }\n\n                return true;\n              }\n\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                // ...in a gzip-friendly way\n                node = parent;\n                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                cache = uniqueCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n\n                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    uniqueCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                }\n              } else {\n                // Use previously-cached element index if available\n                if (useCache) {\n                  // ...in a gzip-friendly way\n                  node = elem;\n                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                  // Defend against cloned attroperties (jQuery gh-1709)\n\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                  cache = uniqueCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex;\n                } // xml :nth-child(...)\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n                if (diff === false) {\n                  // Use the same loop as above to seek `elem` from the start\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                      // Cache the index of each encountered element\n                      if (useCache) {\n                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                        // Defend against cloned attroperties (jQuery gh-1709)\n\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                        uniqueCache[type] = [dirruns, diff];\n                      }\n\n                      if (node === elem) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              } // Incorporate the offset, then check against cycle size\n\n\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        "PSEUDO": function (pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n\n          if (fn[expando]) {\n            return fn(argument);\n          } // But maintain support for old signatures\n\n\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, "", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                  matched = fn(seed, argument),\n                  i = matched.length;\n\n              while (i--) {\n                idx = indexOf(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        "not": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n              results = [],\n              matcher = compile(selector.replace(rtrim, "$1"));\n          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {\n            var elem,\n                unmatched = matcher(seed, null, xml, []),\n                i = seed.length; // Match elements unmatched by `matcher`\n\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, _context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results); // Don\'t keep the element (issue #299)\n\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        "has": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        "contains": markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // "Whether an element is represented by a :lang() selector\n        // is based solely on the element\'s language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by "-".\n        // The matching of C against the element\'s language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name."\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        "lang": markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || "")) {\n            Sizzle.error("unsupported lang: " + lang);\n          }\n\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n            return false;\n          };\n        }),\n        // Miscellaneous\n        "target": function (elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        "root": function (elem) {\n          return elem === docElem;\n        },\n        "focus": function (elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        "enabled": createDisabledPseudo(false),\n        "disabled": createDisabledPseudo(true),\n        "checked": function (elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;\n        },\n        "selected": function (elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            // eslint-disable-next-line no-unused-expressions\n            elem.parentNode.selectedIndex;\n          }\n\n          return elem.selected === true;\n        },\n        // Contents\n        "empty": function (elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        "parent": function (elem) {\n          return !Expr.pseudos["empty"](elem);\n        },\n        // Element/input types\n        "header": function (elem) {\n          return rheader.test(elem.nodeName);\n        },\n        "input": function (elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        "button": function (elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === "input" && elem.type === "button" || name === "button";\n        },\n        "text": function (elem) {\n          var attr;\n          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8\n          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"\n          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");\n        },\n        // Position-in-collection\n        "first": createPositionalPseudo(function () {\n          return [0];\n        }),\n        "last": createPositionalPseudo(function (_matchIndexes, length) {\n          return [length - 1];\n        }),\n        "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        "even": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "odd": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument > length ? length : argument;\n\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos\n\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    } // Easy API for creating new setFilters\n\n\n    function setFilters() {}\n\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n      var matched,\n          match,\n          tokens,\n          type,\n          soFar,\n          groups,\n          preFilters,\n          cached = tokenCache[selector + " "];\n\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don\'t consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n\n          groups.push(tokens = []);\n        }\n\n        matched = false; // Combinators\n\n        if (match = rcombinators.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, " ")\n          });\n          soFar = soFar.slice(matched.length);\n        } // Filters\n\n\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n\n        if (!matched) {\n          break;\n        }\n      } // Return the length of the invalid excess\n      // if we\'re just parsing\n      // Otherwise, throw an error or return tokens\n\n\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    };\n\n    function toSelector(tokens) {\n      var i = 0,\n          len = tokens.length,\n          selector = "";\n\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n\n      return selector;\n    }\n\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n          skip = combinator.next,\n          key = skip || dir,\n          checkNonElements = base && key === "parentNode",\n          doneName = done++;\n      return combinator.first ? // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n\n        return false;\n      } : // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n            uniqueCache,\n            outerCache,\n            newCache = [dirruns, doneName]; // We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n              // Defend against cloned attroperties (jQuery gh-1709)\n\n              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n              if (skip && skip === elem.nodeName.toLowerCase()) {\n                elem = elem[dir] || elem;\n              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                uniqueCache[key] = newCache; // A match means we\'re done; a fail means we have to keep checking\n\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      };\n    }\n\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n\n        return true;\n      } : matchers[0];\n    }\n\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n          len = contexts.length;\n\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n\n      return results;\n    }\n\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n          newUnmatched = [],\n          i = 0,\n          len = unmatched.length,\n          mapped = map != null;\n\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n\n      return newUnmatched;\n    }\n\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n            i,\n            elem,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n            // Get initial elements from seed or context\n        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n        [] : // ...otherwise use results directly\n        results : matcherIn; // Find primary matches\n\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        } // Apply postFilter\n\n\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n          i = temp.length;\n\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n\n              postFinder(null, matcherOut = [], temp, xml);\n            } // Move matched elements from seed to results to keep them synchronized\n\n\n            i = matcherOut.length;\n\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          } // Add elements to results, through postFinder if defined\n\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n\n    function matcherFromTokens(tokens) {\n      var checkContext,\n          matcher,\n          j,\n          len = tokens.length,\n          leadingRelative = Expr.relative[tokens[0].type],\n          implicitRelative = leadingRelative || Expr.relative[" "],\n          i = leadingRelative ? 1 : 0,\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\n      matchContext = addCombinator(function (elem) {\n        return elem === checkContext;\n      }, implicitRelative, true),\n          matchAnyContext = addCombinator(function (elem) {\n        return indexOf(checkContext, elem) > -1;\n      }, implicitRelative, true),\n          matchers = [function (elem, context, xml) {\n        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n        checkContext = null;\n        return ret;\n      }];\n\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === " " ? "*" : ""\n            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n\n          matchers.push(matcher);\n        }\n      }\n\n      return elementMatcher(matchers);\n    }\n\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n          byElement = elementMatchers.length > 0,\n          superMatcher = function (seed, context, xml, results, outermost) {\n        var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = "0",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n        elems = seed || byElement && Expr.find["TAG"]("*", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n\n        if (outermost) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          outermostContext = context == document || context || outermost;\n        } // Add elements passing elementMatchers directly to results\n        // Support: IE<9, Safari\n        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id\n\n\n        for (; i !== len && (elem = elems[i]) != null; i++) {\n          if (byElement && elem) {\n            j = 0; // Support: IE 11+, Edge 17 - 18+\n            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n            // two documents; shallow comparisons work.\n            // eslint-disable-next-line eqeqeq\n\n            if (!context && elem.ownerDocument != document) {\n              setDocument(elem);\n              xml = !documentIsHTML;\n            }\n\n            while (matcher = elementMatchers[j++]) {\n              if (matcher(elem, context || document, xml)) {\n                results.push(elem);\n                break;\n              }\n            }\n\n            if (outermost) {\n              dirruns = dirrunsUnique;\n            }\n          } // Track unmatched elements for set filters\n\n\n          if (bySet) {\n            // They will have gone through all possible matchers\n            if (elem = !matcher && elem) {\n              matchedCount--;\n            } // Lengthen the array for every element, matched or not\n\n\n            if (seed) {\n              unmatched.push(elem);\n            }\n          }\n        } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n        // makes the latter nonnegative.\n\n\n        matchedCount += i; // Apply set filters to unmatched elements\n        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n        // equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n        // no element matchers and no seed.\n        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n        // case, which will result in a "00" `matchedCount` that differs from `i` but is also\n        // numerically zero.\n\n        if (bySet && i !== matchedCount) {\n          j = 0;\n\n          while (matcher = setMatchers[j++]) {\n            matcher(unmatched, setMatched, context, xml);\n          }\n\n          if (seed) {\n            // Reintegrate element matches to eliminate the need for sorting\n            if (matchedCount > 0) {\n              while (i--) {\n                if (!(unmatched[i] || setMatched[i])) {\n                  setMatched[i] = pop.call(results);\n                }\n              }\n            } // Discard index placeholder values to get only actual matches\n\n\n            setMatched = condense(setMatched);\n          } // Add matches to results\n\n\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n            Sizzle.uniqueSort(results);\n          }\n        } // Override manipulation of globals by nested matchers\n\n\n        if (outermost) {\n          dirruns = dirrunsUnique;\n          outermostContext = contextBackup;\n        }\n\n        return unmatched;\n      };\n\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n\n    compile = Sizzle.compile = function (selector, match\n    /* Internal Use Only */\n    ) {\n      var i,\n          setMatchers = [],\n          elementMatchers = [],\n          cached = compilerCache[selector + " "];\n\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n\n        i = match.length;\n\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        } // Cache the compiled function\n\n\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n        cached.selector = selector;\n      }\n\n      return cached;\n    };\n    /**\n     * A low-level selection function that works with Sizzle\'s compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with Sizzle.compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n\n\n    select = Sizzle.select = function (selector, context, results, seed) {\n      var i,\n          tokens,\n          token,\n          type,\n          find,\n          compiled = typeof selector === "function" && selector,\n          match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n      // (the latter of which guarantees us context)\n\n      if (match.length === 1) {\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[0] = match[0].slice(0);\n\n        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n          if (!context) {\n            return results; // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n\n          selector = selector.slice(tokens.shift().value.length);\n        } // Fetch a seed set for right-to-left matching\n\n\n        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;\n\n        while (i--) {\n          token = tokens[i]; // Abort if we hit a combinator\n\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n\n              break;\n            }\n          }\n        }\n      } // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n\n\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    }; // One-time assignments\n    // Sort stability\n\n\n    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+\n    // Always assume duplicates if they aren\'t passed to the comparison function\n\n    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n    // Detached nodes confoundingly follow *each other*\n\n    support.sortDetached = assert(function (el) {\n      // Should return 1, but returns 4 (following)\n      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;\n    }); // Support: IE<8\n    // Prevent attribute/property "interpolation"\n    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n    if (!assert(function (el) {\n      el.innerHTML = "<a href=\'#\'></a>";\n      return el.firstChild.getAttribute("href") === "#";\n    })) {\n      addHandle("type|href|height|width", function (elem, name, isXML) {\n        if (!isXML) {\n          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);\n        }\n      });\n    } // Support: IE<9\n    // Use defaultValue in place of getAttribute("value")\n\n\n    if (!support.attributes || !assert(function (el) {\n      el.innerHTML = "<input/>";\n      el.firstChild.setAttribute("value", "");\n      return el.firstChild.getAttribute("value") === "";\n    })) {\n      addHandle("value", function (elem, _name, isXML) {\n        if (!isXML && elem.nodeName.toLowerCase() === "input") {\n          return elem.defaultValue;\n        }\n      });\n    } // Support: IE<9\n    // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n    if (!assert(function (el) {\n      return el.getAttribute("disabled") == null;\n    })) {\n      addHandle(booleans, function (elem, name, isXML) {\n        var val;\n\n        if (!isXML) {\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n        }\n      });\n    }\n\n    return Sizzle;\n  }(window);\n\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors; // Deprecated\n\n  jQuery.expr[":"] = jQuery.expr.pseudos;\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  jQuery.escapeSelector = Sizzle.escape;\n\n  var dir = function (elem, dir, until) {\n    var matched = [],\n        truncate = until !== undefined;\n\n    while ((elem = elem[dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n\n        matched.push(elem);\n      }\n    }\n\n    return matched;\n  };\n\n  var siblings = function (n, elem) {\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  };\n\n  var rneedsContext = jQuery.expr.match.needsContext;\n\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i; // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    } // Single element\n\n\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    } // Arraylike of elements (jQuery, arguments, Array)\n\n\n    if (typeof qualifier !== "string") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    } // Filtered directly for both simple and complex selectors\n\n\n    return jQuery.filter(qualifier, elements, not);\n  }\n\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n\n    if (not) {\n      expr = ":not(" + expr + ")";\n    }\n\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n\n  jQuery.fn.extend({\n    find: function (selector) {\n      var i,\n          ret,\n          len = this.length,\n          self = this;\n\n      if (typeof selector !== "string") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      ret = this.pushStack([]);\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function (selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function (selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function (selector) {\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n      // so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  }); // Initialize a jQuery object\n  // A central reference to the root jQuery(document)\n\n  var rootjQuery,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  // Shortcut simple #id case for speed\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      init = jQuery.fn.init = function (selector, context, root) {\n    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)\n\n    if (!selector) {\n      return this;\n    } // Method init() accepts an alternate rootjQuery\n    // so migrate can support jQuery.sub (gh-2101)\n\n\n    root = root || rootjQuery; // Handle HTML strings\n\n    if (typeof selector === "string") {\n      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n      } else {\n        match = rquickExpr.exec(selector);\n      } // Match html or make sure no context is specified for #id\n\n\n      if (match && (match[1] || !context)) {\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (isFunction(this[match])) {\n                this[match](context[match]); // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this; // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]);\n\n          if (elem) {\n            // Inject the element directly into the jQuery object\n            this[0] = elem;\n            this.length = 1;\n          }\n\n          return this;\n        } // HANDLE: $(expr, $(...))\n\n      } else if (!context || context.jquery) {\n        return (context || root).find(selector); // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      } // HANDLE: $(DOMElement)\n\n    } else if (selector.nodeType) {\n      this[0] = selector;\n      this.length = 1;\n      return this; // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (isFunction(selector)) {\n      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    return jQuery.makeArray(selector, this);\n  }; // Give the init function the jQuery prototype for later instantiation\n\n\n  init.prototype = jQuery.fn; // Initialize central reference\n\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      // Methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.fn.extend({\n    has: function (target) {\n      var targets = jQuery(target, this),\n          l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function (selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          matched = [],\n          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there\'s no _selection_ context\n\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don\'t pass non-elements to Sizzle\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function (elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // Index in selector\n\n\n      if (typeof elem === "string") {\n        return indexOf.call(jQuery(elem), this[0]);\n      } // Locate the position of the desired element\n\n\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function (selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function (selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function (elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function (elem) {\n      return dir(elem, "parentNode");\n    },\n    parentsUntil: function (elem, _i, until) {\n      return dir(elem, "parentNode", until);\n    },\n    next: function (elem) {\n      return sibling(elem, "nextSibling");\n    },\n    prev: function (elem) {\n      return sibling(elem, "previousSibling");\n    },\n    nextAll: function (elem) {\n      return dir(elem, "nextSibling");\n    },\n    prevAll: function (elem) {\n      return dir(elem, "previousSibling");\n    },\n    nextUntil: function (elem, _i, until) {\n      return dir(elem, "nextSibling", until);\n    },\n    prevUntil: function (elem, _i, until) {\n      return dir(elem, "previousSibling", until);\n    },\n    siblings: function (elem) {\n      return siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function (elem) {\n      return siblings(elem.firstChild);\n    },\n    contents: function (elem) {\n      if (elem.contentDocument != null && // Support: IE 11+\n      // <object> elements with no `data` attribute has an object\n      // `contentDocument` with a `null` prototype.\n      getProto(elem.contentDocument)) {\n        return elem.contentDocument;\n      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don\'t support it.\n\n\n      if (nodeName(elem, "template")) {\n        elem = elem.content || elem;\n      }\n\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n\n      if (name.slice(-5) !== "Until") {\n        selector = until;\n      }\n\n      if (selector && typeof selector === "string") {\n        matched = jQuery.filter(selector, matched);\n      }\n\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        } // Reverse order for parents* and prev-derivatives\n\n\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n\n      return this.pushStack(matched);\n    };\n  });\n  var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g; // Convert String-formatted options into Object-formatted ones\n\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * "fired" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n        // Last fire value for non-forgettable lists\n    memory,\n        // Flag to know if list was already fired\n    fired,\n        // Flag to prevent firing\n    locked,\n        // Actual callback list\n    list = [],\n        // Queue of execution data for repeatable lists\n    queue = [],\n        // Index of currently firing callback (modified by add/remove as needed)\n    firingIndex = -1,\n        // Fire callbacks\n    fire = function () {\n      // Enforce single-firing\n      locked = locked || options.once; // Execute callbacks for all pending executions,\n      // respecting firingIndex overrides and runtime changes\n\n      fired = firing = true;\n\n      for (; queue.length; firingIndex = -1) {\n        memory = queue.shift();\n\n        while (++firingIndex < list.length) {\n          // Run callback and check for early termination\n          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n            // Jump to end and forget the data so .add doesn\'t re-fire\n            firingIndex = list.length;\n            memory = false;\n          }\n        }\n      } // Forget the data if we\'re done with it\n\n\n      if (!options.memory) {\n        memory = false;\n      }\n\n      firing = false; // Clean up if we\'re done firing for good\n\n      if (locked) {\n        // Keep an empty list if we have data for future add calls\n        if (memory) {\n          list = []; // Otherwise, this object is spent\n        } else {\n          list = "";\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function () {\n        if (list) {\n          // If we have memory from a past run, we should fire after adding\n          if (memory && !firing) {\n            firingIndex = list.length - 1;\n            queue.push(memory);\n          }\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              if (isFunction(arg)) {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && toType(arg) !== "string") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments);\n\n          if (memory && !firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function () {\n        jQuery.each(arguments, function (_, arg) {\n          var index;\n\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\n            list.splice(index, 1); // Handle firing indexes\n\n            if (index <= firingIndex) {\n              firingIndex--;\n            }\n          }\n        });\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function (fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n      },\n      // Remove all callbacks from the list\n      empty: function () {\n        if (list) {\n          list = [];\n        }\n\n        return this;\n      },\n      // Disable .fire and .add\n      // Abort any current/pending executions\n      // Clear all callbacks and values\n      disable: function () {\n        locked = queue = [];\n        list = memory = "";\n        return this;\n      },\n      disabled: function () {\n        return !list;\n      },\n      // Disable .fire\n      // Also disable .add unless we have memory (since it would have no effect)\n      // Abort any pending executions\n      lock: function () {\n        locked = queue = [];\n\n        if (!memory && !firing) {\n          list = memory = "";\n        }\n\n        return this;\n      },\n      locked: function () {\n        return !!locked;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function (context, args) {\n        if (!locked) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          queue.push(args);\n\n          if (!firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function () {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function () {\n        return !!fired;\n      }\n    };\n\n    return self;\n  };\n\n  function Identity(v) {\n    return v;\n  }\n\n  function Thrower(ex) {\n    throw ex;\n  }\n\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject); // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject); // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      } // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn\'t unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n\n  jQuery.extend({\n    Deferred: function (func) {\n      var tuples = [// action, add listener, callbacks,\n      // ... .then handlers, argument index, [final state]\n      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],\n          state = "pending",\n          promise = {\n        state: function () {\n          return state;\n        },\n        always: function () {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        "catch": function (fn) {\n          return promise.then(null, fn);\n        },\n        // Keep pipe for back-compat\n        pipe: function\n          /* fnDone, fnFail, fnProgress */\n        () {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (_i, tuple) {\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && isFunction(returned.promise)) {\n                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                } else {\n                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        then: function (onFulfilled, onRejected, onProgress) {\n          var maxDepth = 0;\n\n          function resolve(depth, deferred, handler, special) {\n            return function () {\n              var that = this,\n                  args = arguments,\n                  mightThrow = function () {\n                var returned, then; // Support: Promises/A+ section 2.3.3.3.3\n                // https://promisesaplus.com/#point-59\n                // Ignore double-resolution attempts\n\n                if (depth < maxDepth) {\n                  return;\n                }\n\n                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\n                // https://promisesaplus.com/#point-48\n\n                if (returned === deferred.promise()) {\n                  throw new TypeError("Thenable self-resolution");\n                } // Support: Promises/A+ sections 2.3.3.1, 3.5\n                // https://promisesaplus.com/#point-54\n                // https://promisesaplus.com/#point-75\n                // Retrieve `then` only once\n\n\n                then = returned && ( // Support: Promises/A+ section 2.3.4\n                // https://promisesaplus.com/#point-64\n                // Only check objects and functions for thenability\n                typeof returned === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable\n\n                if (isFunction(then)) {\n                  // Special processors (notify) just wait for resolution\n                  if (special) {\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\n                  } else {\n                    // ...and disregard older resolution values\n                    maxDepth++;\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                  } // Handle all other returned values\n\n                } else {\n                  // Only substitute handlers pass on context\n                  // and multiple values (non-spec behavior)\n                  if (handler !== Identity) {\n                    that = undefined;\n                    args = [returned];\n                  } // Process the value(s)\n                  // Default process is resolve\n\n\n                  (special || deferred.resolveWith)(that, args);\n                }\n              },\n                  // Only normal processors (resolve) catch and reject exceptions\n              process = special ? mightThrow : function () {\n                try {\n                  mightThrow();\n                } catch (e) {\n                  if (jQuery.Deferred.exceptionHook) {\n                    jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                  } // Support: Promises/A+ section 2.3.3.3.4.1\n                  // https://promisesaplus.com/#point-61\n                  // Ignore post-resolution exceptions\n\n\n                  if (depth + 1 >= maxDepth) {\n                    // Only substitute handlers pass on context\n                    // and multiple values (non-spec behavior)\n                    if (handler !== Thrower) {\n                      that = undefined;\n                      args = [e];\n                    }\n\n                    deferred.rejectWith(that, args);\n                  }\n                }\n              }; // Support: Promises/A+ section 2.3.3.3.1\n              // https://promisesaplus.com/#point-57\n              // Re-resolve promises immediately to dodge false rejection from\n              // subsequent errors\n\n\n              if (depth) {\n                process();\n              } else {\n                // Call an optional hook to record the stack, in case of exception\n                // since it\'s otherwise lost when execution goes async\n                if (jQuery.Deferred.getStackHook) {\n                  process.stackTrace = jQuery.Deferred.getStackHook();\n                }\n\n                window.setTimeout(process);\n              }\n            };\n          }\n\n          return jQuery.Deferred(function (newDefer) {\n            // progress_handlers.add( ... )\n            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\n\n            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\n\n            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function (obj) {\n          return obj != null ? jQuery.extend(obj, promise) : promise;\n        }\n      },\n          deferred = {}; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[5]; // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n\n        promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = "resolved" (i.e., fulfilled)\n            // state = "rejected"\n            state = stateString;\n          }, // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable, // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable, // progress_callbacks.lock\n          tuples[0][2].lock, // progress_handlers.lock\n          tuples[0][3].lock);\n        } // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n\n\n        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);\n          return this;\n        }; // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n\n\n        deferred[tuple[0] + "With"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      promise.promise(deferred); // Call given func if any\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function (singleValue) {\n      var // count of uncompleted subordinates\n      remaining = arguments.length,\n          // count of unprocessed arguments\n      i = remaining,\n          // subordinate fulfillment data\n      resolveContexts = Array(i),\n          resolveValues = slice.call(arguments),\n          // the primary Deferred\n      primary = jQuery.Deferred(),\n          // subordinate callback factory\n      updateFunc = function (i) {\n        return function (value) {\n          resolveContexts[i] = this;\n          resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;\n\n          if (! --remaining) {\n            primary.resolveWith(resolveContexts, resolveValues);\n          }\n        };\n      }; // Single- and empty arguments are adopted like Promise.resolve\n\n\n      if (remaining <= 1) {\n        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\n\n        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return primary.then();\n        }\n      } // Multiple arguments are aggregated like Promise.all array elements\n\n\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), primary.reject);\n      }\n\n      return primary.promise();\n    }\n  }); // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n  jQuery.Deferred.exceptionHook = function (error, stack) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);\n    }\n  };\n\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  }; // The deferred used on DOM ready\n\n\n  var readyList = jQuery.Deferred();\n\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    .catch(function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function (wait) {\n      // Abort if there are pending holds or we\'re already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\n\n  function completed() {\n    document.removeEventListener("DOMContentLoaded", completed);\n    window.removeEventListener("load", completed);\n    jQuery.ready();\n  } // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals "interactive" too soon\n\n\n  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work\n\n    window.addEventListener("load", completed);\n  } // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it\'s a function\n\n\n  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n        len = elems.length,\n        bulk = key == null; // Sets many values\n\n    if (toType(key) === "object") {\n      chainable = true;\n\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      } // Sets one value\n\n    } else if (value !== undefined) {\n      chainable = true;\n\n      if (!isFunction(value)) {\n        raw = true;\n      }\n\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null; // ...except when executing function values\n        } else {\n          bulk = fn;\n\n          fn = function (elem, _key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n\n    if (chainable) {\n      return elems;\n    } // Gets\n\n\n    if (bulk) {\n      return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n  }; // Matches dashed string for camelizing\n\n\n  var rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()\n\n  function fcamelCase(_all, letter) {\n    return letter.toUpperCase();\n  } // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (#9572)\n\n\n  function camelCase(string) {\n    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);\n  }\n\n  var acceptData = function (owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function (owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando]; // If not, create one\n\n      if (!value) {\n        value = {}; // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see #8335.\n        // Always return an empty object.\n\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return value;\n    },\n    set: function (owner, data, value) {\n      var prop,\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n\n      if (typeof data === "string") {\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n\n      return cache;\n    },\n    get: function (owner, key) {\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function (owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the "read" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === "string" && value === undefined) {\n        return this.get(owner, key);\n      } // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the "set" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function (owner, key) {\n      var i,\n          cache = owner[this.expando];\n\n      if (cache === undefined) {\n        return;\n      }\n\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key); // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n\n        i = key.length;\n\n        while (i--) {\n          delete cache[key[i]];\n        }\n      } // Remove the expando if there\'s no more data\n\n\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function (owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  var dataPriv = new Data();\n  var dataUser = new Data(); //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module\'s maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support "private" and "user" data.\n  //\t4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      rmultiDash = /[A-Z]/g;\n\n  function getData(data) {\n    if (data === "true") {\n      return true;\n    }\n\n    if (data === "false") {\n      return false;\n    }\n\n    if (data === "null") {\n      return null;\n    } // Only convert to a number if it doesn\'t change the string\n\n\n    if (data === +data + "") {\n      return +data;\n    }\n\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  }\n\n  function dataAttr(elem, key, data) {\n    var name; // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n\n    if (data === undefined && elem.nodeType === 1) {\n      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === "string") {\n        try {\n          data = getData(data);\n        } catch (e) {} // Make sure we set the data so it isn\'t changed later\n\n\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  jQuery.extend({\n    hasData: function (elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function (elem, name, data) {\n      return dataUser.access(elem, name, data);\n    },\n    removeData: function (elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function (elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function (elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function (key, value) {\n      var i,\n          name,\n          data,\n          elem = this[0],\n          attrs = elem && elem.attributes; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n\n          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {\n            i = attrs.length;\n\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n\n                if (name.indexOf("data-") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n\n            dataPriv.set(elem, "hasDataAttrs", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (typeof key === "object") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n\n      return access(this, function (value) {\n        var data; // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to "discover" the data in\n          // HTML5 custom data-* attrs\n\n\n          data = dataAttr(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // We tried really hard, but the data doesn\'t exist.\n\n\n          return;\n        } // Set the data...\n\n\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function (key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function (elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || "fx") + "queue";\n        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function (elem, type) {\n      type = type || "fx";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function () {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === "inprogress") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === "fx") {\n          queue.unshift("inprogress");\n        } // Clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function (elem, type) {\n      var key = type + "queueHooks";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks("once memory").add(function () {\n          dataPriv.remove(elem, [type + "queue", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function (type, data) {\n      var setter = 2;\n\n      if (typeof type !== "string") {\n        data = type;\n        type = "fx";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === "fx" && queue[0] !== "inprogress") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function (type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function (type) {\n      return this.queue(type || "fx", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function (type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function () {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== "string") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || "fx";\n\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + "queueHooks");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");\n  var cssExpand = ["Top", "Right", "Bottom", "Left"];\n  var documentElement = document.documentElement;\n\n  var isAttached = function (elem) {\n    return jQuery.contains(elem.ownerDocument, elem);\n  },\n      composed = {\n    composed: true\n  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n\n\n  if (documentElement.getRootNode) {\n    isAttached = function (elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n\n  var isHiddenWithinTree = function (elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem; // Inline style trumps all\n\n    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, "display") === "none";\n  };\n\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n        scale,\n        maxIterations = 20,\n        currentValue = tween ? function () {\n      return tween.cur();\n    } : function () {\n      return jQuery.css(elem, prop, "");\n    },\n        initial = currentValue(),\n        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),\n        // Starting value computation is required for potential unit mismatches\n    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2; // Trust units reported by jQuery.css\n\n      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point\n\n      initialInUnit = +initial || 1;\n\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n\n        initialInUnit = initialInUnit / scale;\n      }\n\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on\n\n      valueParts = valueParts || [];\n    }\n\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\n\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n\n    return adjusted;\n  }\n\n  var defaultDisplayMap = {};\n\n  function getDefaultDisplay(elem) {\n    var temp,\n        doc = elem.ownerDocument,\n        nodeName = elem.nodeName,\n        display = defaultDisplayMap[nodeName];\n\n    if (display) {\n      return display;\n    }\n\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, "display");\n    temp.parentNode.removeChild(temp);\n\n    if (display === "none") {\n      display = "block";\n    }\n\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        values = [],\n        index = 0,\n        length = elements.length; // Determine new display value for elements that need to change\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      display = elem.style.display;\n\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === "none") {\n          values[index] = dataPriv.get(elem, "display") || null;\n\n          if (!values[index]) {\n            elem.style.display = "";\n          }\n        }\n\n        if (elem.style.display === "" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== "none") {\n          values[index] = "none"; // Remember what we\'re overwriting\n\n          dataPriv.set(elem, "display", display);\n        }\n      }\n    } // Set the display of the elements in a second loop to avoid constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.fn.extend({\n    show: function () {\n      return showHide(this, true);\n    },\n    hide: function () {\n      return showHide(this);\n    },\n    toggle: function (state) {\n      if (typeof state === "boolean") {\n        return state ? this.show() : this.hide();\n      }\n\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n  var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n  var rscriptType = /^$|^module$|\\/(?:java|ecma)script/i;\n\n  (function () {\n    var fragment = document.createDocumentFragment(),\n        div = fragment.appendChild(document.createElement("div")),\n        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (#11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (#14901)\n\n    input.setAttribute("type", "radio");\n    input.setAttribute("checked", "checked");\n    input.setAttribute("name", "t");\n    div.appendChild(input); // Support: Android <=4.1 only\n    // Older WebKit doesn\'t clone checked state correctly in fragments\n\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n    div.innerHTML = "<textarea>x</textarea>";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\n    // the select element.\n\n    div.innerHTML = "<option></option>";\n    support.option = !!div.lastChild;\n  })(); // We have to close these tags to support XHTML (#13200)\n\n\n  var wrapMap = {\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, "<table>", "</table>"],\n    col: [2, "<table><colgroup>", "</colgroup></table>"],\n    tr: [2, "<table><tbody>", "</tbody></table>"],\n    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],\n    _default: [0, "", ""]\n  };\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td; // Support: IE <=9 only\n\n  if (!support.option) {\n    wrapMap.optgroup = wrapMap.option = [1, "<select multiple=\'multiple\'>", "</select>"];\n  }\n\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (#15151)\n    var ret;\n\n    if (typeof context.getElementsByTagName !== "undefined") {\n      ret = context.getElementsByTagName(tag || "*");\n    } else if (typeof context.querySelectorAll !== "undefined") {\n      ret = context.querySelectorAll(tag || "*");\n    } else {\n      ret = [];\n    }\n\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n\n    return ret;\n  } // Mark scripts as having already been evaluated\n\n\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));\n    }\n  }\n\n  var rhtml = /<|&#?\\w+;/;\n\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n        tmp,\n        tag,\n        wrap,\n        attached,\n        j,\n        fragment = context.createDocumentFragment(),\n        nodes = [],\n        i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      elem = elems[i];\n\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === "object") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation\n\n          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\n\n          j = wrap[0];\n\n          while (j--) {\n            tmp = tmp.lastChild;\n          } // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n\n\n          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n          tmp.textContent = "";\n        }\n      }\n    } // Remove wrapper from fragment\n\n\n    fragment.textContent = "";\n    i = 0;\n\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n\n        continue;\n      }\n\n      attached = isAttached(elem); // Append to fragment\n\n      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history\n\n      if (attached) {\n        setGlobalEval(tmp);\n      } // Capture executables\n\n\n      if (scripts) {\n        j = 0;\n\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || "")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  var rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Support: IE <=9 - 11+\n  // focus() and blur() are asynchronous, except when they are no-op.\n  // So expect focus to be synchronous when the element is already active,\n  // and blur to be synchronous when the element is not already active.\n  // (focus and blur are always synchronous in other supported browsers,\n  // this just defines when we can count on it).\n\n\n  function expectSync(elem, type) {\n    return elem === safeActiveElement() === (type === "focus");\n  } // Support: IE <=9 only\n  // Accessing document.activeElement can throw unexpectedly\n  // https://bugs.jquery.com/ticket/13393\n\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n\n  function on(elem, types, selector, data, fn, one) {\n    var origFn, type; // Types can be a map of types/handlers\n\n    if (typeof types === "object") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== "string") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n\n      for (type in types) {\n        on(elem, type, selector, data, types[type], one);\n      }\n\n      return elem;\n    }\n\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === "string") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n\n    if (one === 1) {\n      origFn = fn;\n\n      fn = function (event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      }; // Use same guid so caller can remove using origFn\n\n\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards\' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function (elem, types, handler, data, selector) {\n      var handleObjIn,\n          eventHandle,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.get(elem); // Only attach events to objects that accept data\n\n      if (!acceptData(elem)) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\n\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element\'s event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = Object.create(null);\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      } // Handle multiple events separated by a space\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n        if (!type) {\n          continue;\n        } // If event changes its type, use the special event handlers for the changed type\n\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(".")\n        }, handleObjIn); // Init the event handler queue if we\'re the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element\'s handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function (elem, types, handler, selector, mappedTypes) {\n      var j,\n          origCount,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove data and the expando if it\'s no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, "handle events");\n      }\n    },\n    dispatch: function (nativeEvent) {\n      var i,\n          j,\n          ret,\n          matched,\n          handleObj,\n          handlerQueue,\n          args = new Array(arguments.length),\n          // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(nativeEvent),\n          handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n      args[0] = event;\n\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event\'s.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function (event, handlers) {\n      var i,\n          handleObj,\n          sel,\n          matchedHandlers,\n          matchedSelectors,\n          handlerQueue = [],\n          delegateCount = handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n\n      if (delegateCount && // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType && // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === "click" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don\'t check non-elements (#13208)\n          // Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = handlers[i]; // Don\'t conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + " ";\n\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      cur = this;\n\n      if (delegateCount < handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    addProp: function (name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function (value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function (originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Claim the first handler\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            // dataPriv.set( el, "click", ... )\n            leverageNative(el, "click", returnTrue);\n          } // Return false to allow normal processing in the caller\n\n\n          return false;\n        },\n        trigger: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Force setup before triggering a click\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            leverageNative(el, "click");\n          } // Return non-false to allow normal event-path propagation\n\n\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we\'re currently inside a leveraged native-event stack\n        _default: function (event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");\n        }\n      },\n      beforeunload: {\n        postDispatch: function (event) {\n          // Support: Firefox 20+\n          // Firefox doesn\'t alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  }; // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n\n  function leverageNative(el, type, expectSync) {\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n    if (!expectSync) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n\n      return;\n    } // Register the controller as a special universal handler for all event namespaces\n\n\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function (event) {\n        var notAsync,\n            result,\n            saved = dataPriv.get(this, type);\n\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          // Saved data should be false in such cases, but might be a leftover capture object\n          // from an async native handler (gh-4350)\n          if (!saved.length) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = slice.call(arguments);\n            dataPriv.set(this, type, saved); // Trigger the native event and capture its result\n            // Support: IE <=9 - 11+\n            // focus() and blur() are asynchronous\n\n            notAsync = expectSync(this, type);\n            this[type]();\n            result = dataPriv.get(this, type);\n\n            if (saved !== result || notAsync) {\n              dataPriv.set(this, type, false);\n            } else {\n              result = {};\n            }\n\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault(); // Support: Chrome 86+\n              // In Chrome, if an element having a focusout handler is blurred by\n              // clicking outside of it, it invokes the handler synchronously. If\n              // that handler calls `.remove()` on the element, the data is cleared,\n              // leaving `result` undefined. We need to guard against this.\n\n              return result && result.value;\n            } // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering the\n            // native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          } // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n\n        } else if (saved.length) {\n          // ...and capture the result\n          dataPriv.set(this, type, {\n            value: jQuery.event.trigger( // Support: IE <=9 - 11+\n            // Extend with the prototype to reset the above stopImmediatePropagation()\n            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)\n          }); // Abort handling of the native event\n\n          event.stopImmediatePropagation();\n        }\n      }\n    });\n  }\n\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This "if" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the \'new\' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse; // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (#504, #13143)\n\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn\'t have one\n\n\n    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function () {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function () {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function () {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    }\n  }; // Includes all common event props including KeyEvent and MouseEvent specific props\n\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    "char": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: true\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: "focusin",\n    blur: "focusout"\n  }, function (type, delegateType) {\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function () {\n        // Claim the first handler\n        // dataPriv.set( this, "focus", ... )\n        // dataPriv.set( this, "blur", ... )\n        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller\n\n        return false;\n      },\n      trigger: function () {\n        // Force setup before trigger\n        leverageNative(this, type); // Return non-false to allow normal event-path propagation\n\n        return true;\n      },\n      // Suppress native focus or blur as it\'s already being fired\n      // in leverageNative.\n      _default: function () {\n        return true;\n      },\n      delegateType: delegateType\n    };\n  }); // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n\n  jQuery.each({\n    mouseenter: "mouseover",\n    mouseleave: "mouseout",\n    pointerenter: "pointerover",\n    pointerleave: "pointerout"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function (event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn);\n    },\n    one: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn, 1);\n    },\n    off: function (types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (typeof types === "object") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === "function") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  var // Support: IE <=10 - 11, Edge 12 - 13 only\n  // In IE/Edge using regex groups here causes severe slowdowns.\n  // See https://connect.microsoft.com/IE/feedback/details/1736512/\n  rnoInnerhtml = /<script|<style|<link/i,\n      // checked="checked" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g; // Prefer a tbody over its parent table for containing new rows\n\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {\n      return jQuery(elem).children("tbody")[0] || elem;\n    }\n\n    return elem;\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    if ((elem.type || "").slice(0, 5) === "true/") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute("type");\n    }\n\n    return elem;\n  }\n\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, udataOld, udataCur, events;\n\n    if (dest.nodeType !== 1) {\n      return;\n    } // 1. Copy private data: events, handlers, etc.\n\n\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.get(src);\n      events = pdataOld.events;\n\n      if (events) {\n        dataPriv.remove(dest, "handle events");\n\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    } // 2. Copy user data\n\n\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  } // Fix IE bugs, see support tests\n\n\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n    if (nodeName === "input" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === "input" || nodeName === "textarea") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = flat(args);\n    var fragment,\n        first,\n        scripts,\n        hasScripts,\n        node,\n        doc,\n        i = 0,\n        l = collection.length,\n        iNoClone = l - 1,\n        value = args[0],\n        valueIsFunction = isFunction(value); // We can\'t cloneNode fragments that contain checked, in WebKit\n\n    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n\n        domManip(self, args, callback, ignored);\n      });\n    }\n\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      } // Require either new content or an interest in ignored elements to invoke the callback\n\n\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, "script"), disableScript);\n        hasScripts = scripts.length; // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (#8070).\n\n        for (; i < l; i++) {\n          node = fragment;\n\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, "script"));\n            }\n          }\n\n          callback.call(collection[i], node, i);\n        }\n\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n\n            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || "").toLowerCase() !== "module") {\n                // Optional AJAX dependency, but won\'t run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute("nonce")\n                  }, doc);\n                }\n              } else {\n                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return collection;\n  }\n\n  function remove(elem, selector, keepData) {\n    var node,\n        nodes = selector ? jQuery.filter(selector, elem) : elem,\n        i = 0;\n\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, "script"));\n        }\n\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    return elem;\n  }\n\n  jQuery.extend({\n    htmlPrefilter: function (html) {\n      return html;\n    },\n    clone: function (elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n          l,\n          srcElements,\n          destElements,\n          clone = elem.cloneNode(true),\n          inPage = isAttached(elem); // Fix IE cloning issues\n\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, "script");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, "script"));\n      } // Return the cloned set\n\n\n      return clone;\n    },\n    cleanData: function (elems) {\n      var data,\n          elem,\n          type,\n          special = jQuery.event.special,\n          i = 0;\n\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove\'s overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            } // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n\n\n            elem[dataPriv.expando] = undefined;\n          }\n\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function (selector) {\n      return remove(this, selector, true);\n    },\n    remove: function (selector) {\n      return remove(this, selector);\n    },\n    text: function (value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function () {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n          elem.textContent = "";\n        }\n      }\n\n      return this;\n    },\n    clone: function (dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function (value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function () {\n      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\n\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        } // Force callback invocation\n\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: "append",\n    prependTo: "prepend",\n    insertBefore: "before",\n    insertAfter: "after",\n    replaceAll: "replaceWith"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1,\n          i = 0;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n\n        push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");\n\n  var getStyles = function (elem) {\n    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n    var view = elem.ownerDocument.defaultView;\n\n    if (!view || !view.opener) {\n      view = window;\n    }\n\n    return view.getComputedStyle(elem);\n  };\n\n  var swap = function (elem, options, callback) {\n    var ret,\n        name,\n        old = {}; // Remember the old values, and insert the new ones\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.call(elem); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n\n  var rboxStyle = new RegExp(cssExpand.join("|"), "i");\n\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they\'re executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n\n      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";\n      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn\'t\n\n      div.style.right = "60%";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don\'t get tricked when zoom affects offsetWidth (gh-4029)\n\n      div.style.position = "absolute";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container); // Nullify the div so it wouldn\'t be stored in the memory and\n      // it will also be a sign that checks already performed\n\n      div = null;\n    }\n\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n\n    var pixelPositionVal,\n        boxSizingReliableVal,\n        scrollboxSizeVal,\n        pixelBoxStylesVal,\n        reliableTrDimensionsVal,\n        reliableMarginLeftVal,\n        container = document.createElement("div"),\n        div = document.createElement("div"); // Finish early in limited (non-browser) environments\n\n    if (!div.style) {\n      return;\n    } // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (#8908)\n\n\n    div.style.backgroundClip = "content-box";\n    div.cloneNode(true).style.backgroundClip = "";\n    support.clearCloneStyle = div.style.backgroundClip === "content-box";\n    jQuery.extend(support, {\n      boxSizingReliable: function () {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function () {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function () {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function () {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function () {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      },\n      // Support: IE 9 - 11+, Edge 15 - 18+\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\n      // set in CSS while `offset*` properties report correct values.\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\n      // some versions of this test; make sure not to make it pass there!\n      //\n      // Support: Firefox 70+\n      // Only Firefox includes border widths\n      // in computed dimensions. (gh-4529)\n      reliableTrDimensions: function () {\n        var table, tr, trChild, trStyle;\n\n        if (reliableTrDimensionsVal == null) {\n          table = document.createElement("table");\n          tr = document.createElement("tr");\n          trChild = document.createElement("div");\n          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";\n          tr.style.cssText = "border:1px solid"; // Support: Chrome 86+\n          // Height set through cssText does not get applied.\n          // Computed height then comes back as 0.\n\n          tr.style.height = "1px";\n          trChild.style.height = "9px"; // Support: Android 8 Chrome 86+\n          // In our bodyBackground.html iframe,\n          // display for all div elements is set to "inline",\n          // which causes a problem only in Android 8 Chrome 86.\n          // Ensuring the div is display: block\n          // gets around this issue.\n\n          trChild.style.display = "block";\n          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);\n          trStyle = window.getComputedStyle(tr);\n          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;\n          documentElement.removeChild(table);\n        }\n\n        return reliableTrDimensionsVal;\n      }\n    });\n  })();\n\n  function curCSS(elem, name, computed) {\n    var width,\n        minWidth,\n        maxWidth,\n        ret,\n        // Support: Firefox 51+\n    // Retrieving style before computed somehow\n    // fixes an issue with getting wrong values\n    // on detached elements\n    style = elem.style;\n    computed = computed || getStyles(elem); // getPropertyValue is needed for:\n    //   .css(\'filter\') (IE 9 only, #12537)\n    //   .css(\'--customProperty) (#3144)\n\n    if (computed) {\n      ret = computed.getPropertyValue(name) || computed[name];\n\n      if (ret === "" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      } // A tribute to the "awesome hack by Dean Edwards"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n\n\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width; // Revert the changed values\n\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n\n    return ret !== undefined ? // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + "" : ret;\n  }\n\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we\'ll check on the first run if it\'s really needed.\n    return {\n      get: function () {\n        if (conditionFn()) {\n          // Hook not needed (or it\'s not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        } // Hook needed; redefine it so that the support test is not executed again.\n\n\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n\n  var cssPrefixes = ["Webkit", "Moz", "ms"],\n      emptyStyle = document.createElement("div").style,\n      vendorProps = {}; // Return a vendor-prefixed property or undefined\n\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n\n\n  function finalPropName(name) {\n    var final = jQuery.cssProps[name] || vendorProps[name];\n\n    if (final) {\n      return final;\n    }\n\n    if (name in emptyStyle) {\n      return name;\n    }\n\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n\n  var // Swappable if display is none or starts with table\n  // except "table", "table-cell", or "table-caption"\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rcustomProp = /^--/,\n      cssShow = {\n    position: "absolute",\n    visibility: "hidden",\n    display: "block"\n  },\n      cssNormalTransform = {\n    letterSpacing: "0",\n    fontWeight: "400"\n  };\n\n  function setPositiveNumber(_elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;\n  }\n\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === "width" ? 1 : 0,\n        extra = 0,\n        delta = 0; // Adjustment may not be necessary\n\n    if (box === (isBorderBox ? "border" : "content")) {\n      return 0;\n    }\n\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      if (box === "margin") {\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      } // If we get here with a content-box, we\'re seeking "padding" or "border" or "margin"\n\n\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border\n\n        if (box !== "padding") {\n          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        } // If we get here with a border-box (content + padding + border), we\'re seeking "content" or\n        // "padding" or "margin"\n\n      } else {\n        // For "content", subtract padding\n        if (box === "content") {\n          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n        } // For "content" or "padding", subtract border\n\n\n        if (box !== "margin") {\n          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        }\n      }\n    } // Account for positive content-box scroll gutter when requested by providing computedVal\n\n\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can\'t determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n\n    return delta;\n  }\n\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n    // Fake content-box until we know it\'s needed to know the true value.\n    boxSizingNeeded = !support.boxSizingReliable() || extra,\n        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n        valueIsBorderBox = isBorderBox,\n        val = curCSS(elem, dimension, styles),\n        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n\n      val = "auto";\n    } // Support: IE 9 - 11 only\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\n    // In those cases, the computed value can be trusted to be border-box.\n\n\n    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+\n    // IE/Edge misreport `getComputedStyle` of table rows with width/height\n    // set in CSS while `offset*` properties report correct values.\n    // Interestingly, in some cases IE 9 doesn\'t suffer from this issue.\n    !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    val === "auto" || // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected\n    elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n\n      valueIsBorderBox = offsetProp in elem;\n\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    } // Normalize "" and auto\n\n\n    val = parseFloat(val) || 0; // Adjust for the element\'s box model\n\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + "px";\n  }\n\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function (elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, "opacity");\n            return ret === "" ? "1" : ret;\n          }\n        }\n      }\n    },\n    // Don\'t automatically add "px" to these possibly-unitless properties\n    cssNumber: {\n      "animationIterationCount": true,\n      "columnCount": true,\n      "fillOpacity": true,\n      "flexGrow": true,\n      "flexShrink": true,\n      "fontWeight": true,\n      "gridArea": true,\n      "gridColumn": true,\n      "gridColumnEnd": true,\n      "gridColumnStart": true,\n      "gridRow": true,\n      "gridRowEnd": true,\n      "gridRowStart": true,\n      "lineHeight": true,\n      "opacity": true,\n      "order": true,\n      "orphans": true,\n      "widows": true,\n      "zIndex": true,\n      "zoom": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function (elem, name, value, extra) {\n      // Don\'t set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we\'re working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name),\n          style = elem.style; // Make sure that we\'re working with the right name. We don\'t\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Gets hook for the prefixed version, then unprefixed version\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we\'re setting a value\n\n      if (value !== undefined) {\n        type = typeof value; // Convert "+=" or "-=" to relative numbers (#7345)\n\n        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret); // Fixes bug #9237\n\n          type = "number";\n        } // Make sure that null and NaN values aren\'t set (#7116)\n\n\n        if (value == null || value !== value) {\n          return;\n        } // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // "px" to a few hardcoded values.\n\n\n        if (type === "number" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");\n        } // background-* props affect original clone\'s values\n\n\n        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {\n          style[name] = "inherit";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function (elem, name, extra, styles) {\n      var val,\n          num,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name); // Make sure that we\'re working with the right name. We don\'t\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Try prefixed name followed by the unprefixed name\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && "get" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } // Convert "normal" to computed value\n\n\n      if (val === "normal" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === "" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n\n      return val;\n    }\n  });\n  jQuery.each(["height", "width"], function (_i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function (elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+\n          // Table columns in Safari have non-zero offsetWidth & zero\n          // getBoundingClientRect().width unless display is changed.\n          // Support: IE <=11 only\n          // Running getBoundingClientRect on a disconnected node\n          // in IE throws an error.\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function (elem, value, extra) {\n        var matches,\n            styles = getStyles(elem),\n            // Only read styles.position if the test has a chance to fail\n        // to avoid forcing a reflow.\n        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",\n            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n        boxSizingNeeded = scrollboxSizeBuggy || extra,\n            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);\n        } // Convert to pixels if value adjustment is needed\n\n\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + "px";\n    }\n  }); // These hooks are used by animate to expand properties\n\n  jQuery.each({\n    margin: "",\n    padding: "",\n    border: "Width"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function (value) {\n        var i = 0,\n            expanded = {},\n            // Assumes a single number if not a string\n        parts = typeof value === "string" ? value.split(" ") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (prefix !== "margin") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function (name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n            len,\n            map = {},\n            i = 0;\n\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function (elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");\n    },\n    cur: function () {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function (percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function (tween) {\n        var result; // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        } // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as "10px" are parsed to Float;\n        // complex values such as "rotate(1rad)" are returned as-is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.\n\n        return !result || result === "auto" ? 0 : result;\n      },\n      set: function (tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function (tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function (p) {\n      return p;\n    },\n    swing: function (p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: "swing"\n  };\n  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\n\n  jQuery.fx.step = {};\n  var fxNow,\n      inProgress,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rrun = /queueHooks$/;\n\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n\n      jQuery.fx.tick();\n    }\n  } // Animations created synchronously will run synchronously\n\n\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  } // Generate parameters to create a standard animation\n\n\n  function genFx(type, includeWidth) {\n    var which,\n        i = 0,\n        attrs = {\n      height: type\n    }; // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs["margin" + which] = attrs["padding" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  }\n\n  function createTween(value, prop, animation) {\n    var tween,\n        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),\n        index = 0,\n        length = collection.length;\n\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We\'re done with this property\n        return tween;\n      }\n    }\n  }\n\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n        value,\n        toggle,\n        hooks,\n        oldfire,\n        propTween,\n        restoreDisplay,\n        display,\n        isBox = "width" in props || "height" in props,\n        anim = this,\n        orig = {},\n        style = elem.style,\n        hidden = elem.nodeType && isHiddenWithinTree(elem),\n        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, "fx");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, "fx").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // Detect show/hide animations\n\n\n    for (prop in props) {\n      value = props[prop];\n\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === "toggle";\n\n        if (value === (hidden ? "hide" : "show")) {\n          // Pretend to be hidden if this is a "show" and\n          // there is still data from a stopped show/hide\n          if (value === "show" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true; // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    } // Bail out if this is a no-op like .hide().hide()\n\n\n    propTween = !jQuery.isEmptyObject(props);\n\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    } // Restrict "overflow" and "display" styles during box animations\n\n\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\n\n      restoreDisplay = dataShow && dataShow.display;\n\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, "display");\n      }\n\n      display = jQuery.css(elem, "display");\n\n      if (display === "none") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, "display");\n          showHide([elem]);\n        }\n      } // Animate inline elements as inline-block\n\n\n      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {\n        if (jQuery.css(elem, "float") === "none") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === "none" ? "" : display;\n            }\n          }\n\n          style.display = "inline-block";\n        }\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = "hidden";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    } // Implement show/hide animations\n\n\n    propTween = false;\n\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if ("hidden" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, "fxshow", {\n            display: restoreDisplay\n          });\n        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"\n\n\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        } // Show elements before animating them\n\n\n        if (hidden) {\n          showHide([elem], true);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n          // The final step of a "hide" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n\n          dataPriv.remove(elem, "fxshow");\n\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      } // Per-property setup\n\n\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && "expand" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // Not quite $.extend, this won\'t overwrite existing keys.\n        // Reusing \'index\' because we have the correct "name"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = Animation.prefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // Don\'t match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function () {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n      // Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]); // If there\'s more to do, yield\n\n      if (percent < 1 && length) {\n        return remaining;\n      } // If this was an empty animation, synthesize a final progress notification\n\n\n      if (!length) {\n        deferred.notifyWith(elem, [animation, 1, 0]);\n      } // Resolve the animation and report its conclusion\n\n\n      deferred.resolveWith(elem, [animation]);\n      return false;\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {},\n        easing: jQuery.easing._default\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function (prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function (gotoEnd) {\n        var index = 0,\n            // If we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // Resolve when we played the last frame; otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n\n        return result;\n      }\n    }\n\n    jQuery.map(props, createTween, animation);\n\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    } // Attach callbacks from options\n\n\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      "*": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function (props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = ["*"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function (callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    }; // Go to the end state if fx are off\n\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== "number") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    } // Normalize opt.queue - true/undefined/null -> "fx"\n\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = "fx";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.fn.extend({\n    fadeTo: function (speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function (prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function () {\n        // Operate on a copy of prop so per-property easing won\'t be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n        if (empty || dataPriv.get(this, "finish")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function (type, clearQueue, gotoEnd) {\n      var stopQueue = function (hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== "string") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue) {\n        this.queue(type || "fx", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + "queueHooks",\n            timers = jQuery.timers,\n            data = dataPriv.get(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // Start the next in the queue if the last step wasn\'t forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function (type) {\n      if (type !== false) {\n        type = type || "fx";\n      }\n\n      return this.each(function () {\n        var index,\n            data = dataPriv.get(this),\n            queue = data[type + "queue"],\n            hooks = data[type + "queueHooks"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n        data.finish = true; // Empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        } // Look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // Look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // Turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each(["toggle", "show", "hide"], function (_i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  }); // Generate shortcuts for custom animations\n\n  jQuery.each({\n    slideDown: genFx("show"),\n    slideUp: genFx("hide"),\n    slideToggle: genFx("toggle"),\n    fadeIn: {\n      opacity: "show"\n    },\n    fadeOut: {\n      opacity: "hide"\n    },\n    fadeToggle: {\n      opacity: "toggle"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n\n  jQuery.fx.tick = function () {\n    var timer,\n        i = 0,\n        timers = jQuery.timers;\n    fxNow = Date.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n\n    inProgress = true;\n    schedule();\n  };\n\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  }; // Based off of the plugin by Clint Helfers, with permission.\n  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || "fx";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n\n  (function () {\n    var input = document.createElement("input"),\n        select = document.createElement("select"),\n        opt = select.appendChild(document.createElement("option"));\n    input.type = "checkbox"; // Support: Android <=4.3 only\n    // Default value for a checkbox should be "on"\n\n    support.checkOn = input.value !== ""; // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n\n    support.optSelected = opt.selected; // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n\n    input = document.createElement("input");\n    input.value = "t";\n    input.type = "radio";\n    support.radioValue = input.value === "t";\n  })();\n\n  var boolHook,\n      attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function (name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function (name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set attributes on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (typeof elem.getAttribute === "undefined") {\n        return jQuery.prop(elem, name, value);\n      } // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        elem.setAttribute(name, value + "");\n        return value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function (elem, value) {\n          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {\n            var val = elem.value;\n            elem.setAttribute("type", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function (elem, value) {\n      var name,\n          i = 0,\n          // Attribute names can contain non-HTML whitespace characters\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n      attrNames = value && value.match(rnothtmlwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  }); // Hooks for boolean attributes\n\n  boolHook = {\n    set: function (elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n          handle,\n          lowercaseName = name.toLowerCase();\n\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n      rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function (name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function (name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set properties on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        return elem[name] = value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function (elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn\'t always return the\n          // correct value when it hasn\'t been explicitly set\n          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n          // Use proper attribute retrieval(#12072)\n          var tabindex = jQuery.find.attr(elem, "tabindex");\n\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      "for": "htmlFor",\n      "class": "className"\n    }\n  }); // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule "no-unused-expressions" is disabled for this code\n  // since it considers such accessions noop\n\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function (elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n\n        return null;\n      },\n      set: function (elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent) {\n          parent.selectedIndex;\n\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n\n  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  }); // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(" ");\n  }\n\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute("class") || "";\n  }\n\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n\n    if (typeof value === "string") {\n      return value.match(rnothtmlwhite) || [];\n    }\n\n    return [];\n  }\n\n  jQuery.fn.extend({\n    addClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem);\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(" " + clazz + " ") < 0) {\n                cur += clazz + " ";\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      if (!arguments.length) {\n        return this.attr("class", "");\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(" " + clazz + " ") > -1) {\n                cur = cur.replace(" " + clazz + " ", " ");\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function (value, stateVal) {\n      var type = typeof value,\n          isValidValue = type === "string" || Array.isArray(value);\n\n      if (typeof stateVal === "boolean" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        var className, i, self, classNames;\n\n        if (isValidValue) {\n          // Toggle individual class names\n          i = 0;\n          self = jQuery(this);\n          classNames = classesToArray(value);\n\n          while (className = classNames[i++]) {\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          } // Toggle whole class name\n\n        } else if (value === undefined || type === "boolean") {\n          className = getClass(this);\n\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, "__className__", className);\n          } // If the element has a class name or if we\'re passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          if (this.setAttribute) {\n            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");\n          }\n        }\n      });\n    },\n    hasClass: function (selector) {\n      var className,\n          elem,\n          i = 0;\n      className = " " + selector + " ";\n\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function (value) {\n      var hooks,\n          ret,\n          valueIsFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value; // Handle most common string cases\n\n          if (typeof ret === "string") {\n            return ret.replace(rreturn, "");\n          } // Handle cases where value is null/undef or number\n\n\n          return ret == null ? "" : ret;\n        }\n\n        return;\n      }\n\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        } // Treat null/undefined as ""; convert numbers to string\n\n\n        if (val == null) {\n          val = "";\n        } else if (typeof val === "number") {\n          val += "";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? "" : value + "";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function (elem) {\n          var val = jQuery.find.attr(elem, "value");\n          return val != null ? val : // Support: IE <=10 - 11 only\n          // option.text throws exceptions (#14686, #14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function (elem) {\n          var value,\n              option,\n              i,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === "select-one",\n              values = one ? null : [],\n              max = one ? index + 1 : options.length;\n\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          } // Loop through all the selected options\n\n\n          for (; i < max; i++) {\n            option = options[i]; // Support: IE <=9 only\n            // IE8-9 doesn\'t update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && // Don\'t return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don\'t need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function (elem, value) {\n          var optionSet,\n              option,\n              options = elem.options,\n              values = jQuery.makeArray(value),\n              i = options.length;\n\n          while (i--) {\n            option = options[i];\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n            /* eslint-enable no-cond-assign */\n\n          } // Force browsers to behave consistently when non-matching value is set\n\n\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    }\n  }); // Radios and checkboxes getter/setter\n\n  jQuery.each(["radio", "checkbox"], function () {\n    jQuery.valHooks[this] = {\n      set: function (elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute("value") === null ? "on" : elem.value;\n      };\n    }\n  }); // Return jQuery for attributes-only inclusion\n\n  support.focusin = "onfocusin" in window;\n\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      stopPropagationCallback = function (e) {\n    e.stopPropagation();\n  };\n\n  jQuery.extend(jQuery.event, {\n    trigger: function (event, data, elem, onlyHandlers) {\n      var i,\n          cur,\n          tmp,\n          bubbleType,\n          ontype,\n          handle,\n          special,\n          lastElement,\n          eventPath = [elem || document],\n          type = hasOwn.call(event, "type") ? event.type : event,\n          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];\n      cur = lastElement = tmp = elem = elem || document; // Don\'t do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(".") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(".");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(".");\n      event.rnamespace = event.namespace ? new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don\'t do default actions on window, that\'s where global variables be (#6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don\'t re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n\n            elem[type]();\n\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function (type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function (type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function (type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  }); // Support: Firefox <=44\n  // Firefox doesn\'t have focus(in | out) events\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n  //\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n  // focus(in | out) events fire after focus & blur events,\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\n  if (!support.focusin) {\n    jQuery.each({\n      focus: "focusin",\n      blur: "focusout"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function (event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function () {\n          // Handle: regular nodes (via `this.ownerDocument`), window\n          // (via `this.document`) & document (via `this`).\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function () {\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            dataPriv.remove(doc, fix);\n          } else {\n            dataPriv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n\n  var location = window.location;\n  var nonce = {\n    guid: Date.now()\n  };\n  var rquery = /\\?/; // Cross-browser xml parsing\n\n  jQuery.parseXML = function (data) {\n    var xml, parserErrorElem;\n\n    if (!data || typeof data !== "string") {\n      return null;\n    } // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n\n\n    try {\n      xml = new window.DOMParser().parseFromString(data, "text/xml");\n    } catch (e) {}\n\n    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];\n\n    if (!xml || parserErrorElem) {\n      jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {\n        return el.textContent;\n      }).join("\\n") : data));\n    }\n\n    return xml;\n  };\n\n  var rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === "object") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  } // Serialize an array of form elements or a set of\n  // key/values into a query string\n\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function (key, valueOrFunction) {\n      // If value is a function, invoke it and use its return value\n      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);\n    };\n\n    if (a == null) {\n      return "";\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the "old" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join("&");\n  };\n\n  jQuery.fn.extend({\n    serialize: function () {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function () {\n      return this.map(function () {\n        // Can add propHook for "elements" to filter or add form elements\n        var elements = jQuery.prop(this, "elements");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (_i, elem) {\n        var val = jQuery(this).val();\n\n        if (val == null) {\n          return null;\n        }\n\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, "\\r\\n")\n            };\n          });\n        }\n\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, "\\r\\n")\n        };\n      }).get();\n    }\n  });\n  var r20 = /%20/g,\n      rhash = /#.*$/,\n      rantiCache = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n      // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol "*" can be used\n   * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol "*" can be used\n   * 3) selection will start with transport dataType and THEN go to "*" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = "*/".concat("*"),\n      // Anchor tag for parsing the document origin\n  originAnchor = document.createElement("a");\n  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to "*"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== "string") {\n        func = dataTypeExpression;\n        dataTypeExpression = "*";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === "+") {\n            dataType = dataType.slice(1) || "*";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");\n  } // A special extend for ajax options\n  // that takes "flat" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var key,\n        deep,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n        type,\n        finalDataType,\n        firstDataType,\n        contents = s.contents,\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n    while (dataTypes[0] === "*") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");\n      }\n    } // Check if we\'re dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  }\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n\n\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        prev,\n        converters = {},\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift(); // Convert to each sequential dataType\n\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      } // Apply the dataFilter if provided\n\n\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n        // There\'s only work to do if current dataType is non-auto\n        if (current === "*") {\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== "*" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(" ");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s.throws) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: "parsererror",\n                  error: conv ? e : "No conversion from " + prev + " to " + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      state: "success",\n      data: response\n    };\n  }\n\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: "GET",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: "application/x-www-form-urlencoded; charset=UTF-8",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        "*": allTypes,\n        text: "text/plain",\n        html: "text/html",\n        xml: "application/xml, text/xml",\n        json: "application/json, text/javascript"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: "responseXML",\n        text: "responseText",\n        json: "responseJSON"\n      },\n      // Data converters\n      // Keys separate source (or catchall "*") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        "* text": String,\n        // Text to html (true = no transformation)\n        "text html": true,\n        // Evaluate text as a json expression\n        "text json": JSON.parse,\n        // Parse text as xml\n        "text xml": jQuery.parseXML\n      },\n      // For options that shouldn\'t be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn\'t be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function (target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function (url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (typeof url === "object") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n      var transport,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers\n      responseHeadersString,\n          responseHeaders,\n          // timeout handle\n      timeoutTimer,\n          // Url cleanup var\n      urlAnchor,\n          // Request state (becomes false upon send and true upon completion)\n      completed,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          // Loop variable\n      i,\n          // uncached part of the url\n      uncached,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks("once memory"),\n          // Status-dependent callbacks\n      statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // Default abort message\n      strAbort = "canceled",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function (key) {\n          var match;\n\n          if (completed) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase() + " "];\n          }\n\n          return match == null ? null : match.join(", ");\n        },\n        // Raw string\n        getAllResponseHeaders: function () {\n          return completed ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function (name, value) {\n          if (completed == null) {\n            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function (type) {\n          if (completed == null) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function (map) {\n          var code;\n\n          if (map) {\n            if (completed) {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            } else {\n              // Lazy-add the new callbacks in a way that preserves old ones\n              for (code in map) {\n                statusCode[code] = [statusCode[code], map[code]];\n              }\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function (statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn\'t match the current origin.\n\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n\n        try {\n          urlAnchor.href = s.url; // Support: IE <=8 - 11 only\n          // Anchor\'s host property isn\'t correctly set when s.url is relative\n\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== "string") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (completed) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n      // Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger("ajaxStart");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we\'re toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n\n      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url\n\n        if (s.data && (s.processData || typeof s.data === "string")) {\n          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it\'s not used in an eventual retry\n\n          delete s.data;\n        } // Add or update anti-cache param if needed\n\n\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, "$1");\n          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;\n        } // Put hash and anti-cache on the URL that will be requested (gh-1732)\n\n\n        s.url = cacheURL + uncached; // Change \'%20\' to \'+\' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {\n        s.data = s.data.replace(r20, "+");\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader("Content-Type", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // Aborting is no longer a cancellation\n\n\n      strAbort = "abort"; // Install callbacks on deferreds\n\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error); // Get transport\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, "No Transport");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxSend", [jqXHR, s]);\n        } // If request was aborted inside ajaxSend, stop there\n\n\n        if (completed) {\n          return jqXHR;\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort("timeout");\n          }, s.timeout);\n        }\n\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          } // Propagate others as results\n\n\n          done(-1, e);\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Ignore repeat invocations\n\n        if (completed) {\n          return;\n        }\n\n        completed = true; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || ""; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // Use a noop converter for missing script but not if jsonp\n\n\n        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {\n          s.converters["text script"] = function () {};\n        } // Convert no matter what (that way responseXXX fields are always set)\n\n\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader("Last-Modified");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader("etag");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204 || s.type === "HEAD") {\n            statusText = "nocontent"; // if not modified\n          } else if (status === 304) {\n            statusText = "notmodified"; // If we have data, let\'s convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = "error";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(statusCode);\n        statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger("ajaxStop");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getJSON: function (url, data, callback) {\n      return jQuery.get(url, data, callback, "json");\n    },\n    getScript: function (url, callback) {\n      return jQuery.get(url, undefined, callback, "script");\n    }\n  });\n  jQuery.each(["get", "post"], function (_i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      } // The url can be an options object (which then must have .url)\n\n\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  jQuery.ajaxPrefilter(function (s) {\n    var i;\n\n    for (i in s.headers) {\n      if (i.toLowerCase() === "content-type") {\n        s.contentType = s.headers[i] || "";\n      }\n    }\n  });\n\n  jQuery._evalUrl = function (url, options, doc) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (#11264)\n      type: "GET",\n      dataType: "script",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        "text script": function () {}\n      },\n      dataFilter: function (response) {\n        jQuery.globalEval(response, options, doc);\n      }\n    });\n  };\n\n  jQuery.fn.extend({\n    wrapAll: function (html) {\n      var wrap;\n\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        } // The elements to wrap the target around\n\n\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function (html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function (html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function (selector) {\n      this.parent(selector).not("body").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n\n  var xhrSuccessStatus = {\n    // File protocol always yields status code 0, assume 200\n    0: 200,\n    // Support: IE <=9 only\n    // #1450: sometimes IE returns 1223 when it should be 204\n    1223: 204\n  },\n      xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\n\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function (headers, complete) {\n          var i,\n              xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          } // Override mime type if needed\n\n\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          } // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won\'t change header if already provided.\n\n\n          if (!options.crossDomain && !headers["X-Requested-With"]) {\n            headers["X-Requested-With"] = "XMLHttpRequest";\n          } // Set headers\n\n\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          } // Callback\n\n\n          callback = function (type) {\n            return function () {\n              if (callback) {\n                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n\n                if (type === "abort") {\n                  xhr.abort();\n                } else if (type === "error") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== "number") {\n                    complete(0, "error");\n                  } else {\n                    complete( // File: protocol always yields status 0; see #8605, #14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          }; // Listen to events\n\n\n          xhr.onload = callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = callback("error"); // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          } // Create the abort callback\n\n\n          callback = callback("abort");\n\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // #14683: Only rethrow if this hasn\'t been notified as an error yet\n            if (callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  }); // Install script dataType\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      "text script": function (text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache\'s special case and crossDomain\n\n  jQuery.ajaxPrefilter("script", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = "GET";\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport("script", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, callback;\n      return {\n        send: function (_, complete) {\n          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on("load error", callback = function (evt) {\n            script.remove();\n            callback = null;\n\n            if (evt) {\n              complete(evt.type === "error" ? 404 : 200, evt.type);\n            }\n          }); // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n          document.head.appendChild(script[0]);\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: "callback",\n    jsonpCallback: function () {\n      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === "jsonp") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters["script json"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + " was not called");\n        }\n\n        return responseContainer[0];\n      }; // Force json dataType\n\n\n      s.dataTypes[0] = "json"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // If previous value didn\'t exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        } // Save back as free\n\n\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn\'t screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return "script";\n    }\n  }); // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument("").body;\n    body.innerHTML = "<form></form><form></form>";\n    return body.childNodes.length === 2;\n  }(); // Argument "data" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n\n\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== "string") {\n      return [];\n    }\n\n    if (typeof context === "boolean") {\n      keepScripts = context;\n      context = false;\n    }\n\n    var base, parsed, scripts;\n\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document\'s URL (gh-2965)\n\n        base = context.createElement("base");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && []; // Single tag\n\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  };\n  /**\n   * Load a url into a page\n   */\n\n\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n        type,\n        response,\n        self = this,\n        off = url.indexOf(" ");\n\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    } // If it\'s a function\n\n\n    if (isFunction(params)) {\n      // We assume that it\'s the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && typeof params === "object") {\n      type = "POST";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If "type" variable is undefined, then "GET" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || "GET",\n        dataType: "html",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE \'Permission Denied\' errors\n        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets "jqXHR", "status", "error"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n\n    return this;\n  };\n\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n\n  jQuery.offset = {\n    setOffset: function (elem, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = jQuery.css(elem, "position"),\n          curElem = jQuery(elem),\n          props = {}; // Set position first, in-case top/left are set even on static elem\n\n      if (position === "static") {\n        elem.style.position = "relative";\n      }\n\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, "top");\n      curCSSLeft = jQuery.css(elem, "left");\n      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if ("using" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element\'s border box to the document origin\n    offset: function (options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n\n      var rect,\n          win,\n          elem = this[0];\n\n      if (!elem) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element\'s margin box to its offset parent\'s padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function () {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          doc,\n          elem = this[0],\n          parentOffset = {\n        top: 0,\n        left: 0\n      }; // position:fixed elements are offset from the viewport, which itself always has zero offset\n\n      if (jQuery.css(elem, "position") === "fixed") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.parentNode;\n        }\n\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);\n          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);\n        }\n      } // Subtract parent offsets and element margins\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function () {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n\n        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || documentElement;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: "pageXOffset",\n    scrollTop: "pageYOffset"\n  }, function (method, prop) {\n    var top = "pageYOffset" === prop;\n\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n\n  jQuery.each(["top", "left"], function (_i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;\n      }\n    });\n  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n  jQuery.each({\n    Height: "height",\n    Width: "width"\n  }, function (name, type) {\n    jQuery.each({\n      padding: "inner" + name,\n      content: type,\n      "": "outer" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),\n            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");\n        return access(this, function (elem, type, value) {\n          var doc;\n\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n\n            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.fn.extend({\n    bind: function (types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function (types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function (selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function (selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);\n    },\n    hover: function (fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  }); // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g; // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n\n    if (typeof context === "string") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    } // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n\n\n    if (!isFunction(fn)) {\n      return undefined;\n    } // Simulated bind\n\n\n    args = slice.call(arguments, 2);\n\n    proxy = function () {\n      return fn.apply(context || this, args.concat(slice.call(arguments)));\n    }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")\n    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n\n  jQuery.trim = function (text) {\n    return text == null ? "" : (text + "").replace(rtrim, "");\n  }; // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  var // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$;\n\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n\n    return jQuery;\n  }; // Expose jQuery and $ identifiers, even in AMD\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (#13566)\n\n\n  if (typeof noGlobal === "undefined") {\n    window.jQuery = window.$ = jQuery;\n  }\n\n  return jQuery;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n')},"./pages/single/scripts.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _assets_js_main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../assets/js/main */ "./assets/js/main.js");\n/* harmony import */ var _assets_fonts_icons_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../assets/fonts/icons.font */ "./assets/fonts/icons.font.js");\n/* harmony import */ var _assets_fonts_icons_font__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_assets_fonts_icons_font__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_Header_Header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/Header/Header */ "./components/Header/Header/index.js");\n/* harmony import */ var _components_Hero_Hero__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/Hero/Hero */ "./components/Hero/Hero/index.js");\n/* harmony import */ var _components_Footer_Footer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/Footer/Footer */ "./components/Footer/Footer/index.js");\n// Assets\n\n // Components\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9zaW5nbGUvc2NyaXB0cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzZG9jcy1ib2lsZXJwbGF0ZS8uL3BhZ2VzL3NpbmdsZS9zY3JpcHRzLmpzPzI1YzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQXNzZXRzXG5pbXBvcnQgXCIuLi8uLi9hc3NldHMvanMvbWFpblwiO1xuaW1wb3J0IFwiLi4vLi4vYXNzZXRzL2ZvbnRzL2ljb25zLmZvbnRcIjsgLy8gQ29tcG9uZW50c1xuXG5pbXBvcnQgXCIuLi8uLi9jb21wb25lbnRzL0hlYWRlci9IZWFkZXJcIjtcbmltcG9ydCBcIi4uLy4uL2NvbXBvbmVudHMvSGVyby9IZXJvXCI7XG5pbXBvcnQgXCIuLi8uLi9jb21wb25lbnRzL0Zvb3Rlci9Gb290ZXJcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/single/scripts.js\n')},"./assets/fonts/icons.font.js":()=>{throw new Error('Module build failed (from ./node_modules/mini-css-extract-plugin/dist/loader.js):\nHookWebpackError: Module build failed (from ./node_modules/webfonts-loader/index.js):\nTypeError: out.writeUint32LE is not a function\n    at ttf2eot (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/ttf2eot/index.js:113:7)\n    at fn (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/@vusion/webfonts-generator/src/generateFonts.js:114:15)\n    at Promise.apply (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:1185:26)\n    at Promise.promise.promiseDispatch (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:808:41)\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:1411:14\n    at runSingle (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:137:13)\n    at flush (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:79:11)\n    at tryRunOrWebpackError (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/HookWebpackError.js:88:9)\n    at __webpack_require_module__ (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:5051:12)\n    at __webpack_require__ (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:5008:18)\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:5079:20\n    at symbolIterator (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/neo-async/async.js:3485:9)\n    at done (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/neo-async/async.js:3527:9)\n    at Hook.eval [as callAsync] (eval at create (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:13:1)\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:4986:43\n    at symbolIterator (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/neo-async/async.js:3482:9)\n    at timesSync (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/neo-async/async.js:2297:7)\n-- inner error --\nError: Module build failed (from ./node_modules/webfonts-loader/index.js):\nTypeError: out.writeUint32LE is not a function\n    at ttf2eot (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/ttf2eot/index.js:113:7)\n    at fn (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/@vusion/webfonts-generator/src/generateFonts.js:114:15)\n    at Promise.apply (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:1185:26)\n    at Promise.promise.promiseDispatch (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:808:41)\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:1411:14\n    at runSingle (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:137:13)\n    at flush (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:125:13)\n    at processTicksAndRejections (internal/process/task_queues.js:79:11)\n    at Object.<anonymous> (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webfonts-loader/index.js??ruleSet[1].rules[0].use[2]!/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/babel-loader/lib/index.js!/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/assets/fonts/icons.font.js:1:7)\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js:441:11\n    at Hook.eval [as call] (eval at create (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:5:1)\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:5053:39\n    at tryRunOrWebpackError (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/HookWebpackError.js:83:7)\n    at __webpack_require_module__ (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:5051:12)\n    at __webpack_require__ (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:5008:18)\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webpack/lib/Compilation.js:5079:20\n    at symbolIterator (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/neo-async/async.js:3485:9)\n    at done (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/neo-async/async.js:3527:9)\n\nGenerated code for /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/webfonts-loader/index.js??ruleSet[1].rules[0].use[2]!/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/babel-loader/lib/index.js!/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/assets/fonts/icons.font.js\n1 | throw new Error("Module build failed (from ./node_modules/webfonts-loader/index.js):\\nTypeError: out.writeUint32LE is not a function\\n    at ttf2eot (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/ttf2eot/index.js:113:7)\\n    at fn (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/@vusion/webfonts-generator/src/generateFonts.js:114:15)\\n    at Promise.apply (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:1185:26)\\n    at Promise.promise.promiseDispatch (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:808:41)\\n    at /home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:1411:14\\n    at runSingle (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:137:13)\\n    at flush (/home/tatiane/Área de Trabalho/jusdocs/wp-content/themes/jusdocs_theme/node_modules/q/q.js:125:13)\\n    at processTicksAndRejections (internal/process/task_queues.js:79:11)");')},"./pages/single/styles.scss":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9zaW5nbGUvc3R5bGVzLnNjc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanVzZG9jcy1ib2lsZXJwbGF0ZS8uL3BhZ2VzL3NpbmdsZS9zdHlsZXMuc2Nzcz85N2ZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/single/styles.scss\n")}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(g,I)=>{for(var n in I)__webpack_require__.o(I,n)&&!__webpack_require__.o(g,n)&&Object.defineProperty(g,n,{enumerable:!0,get:I[n]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},__webpack_require__("./pages/single/scripts.js");var __webpack_exports__=__webpack_require__("./pages/single/styles.scss")})();